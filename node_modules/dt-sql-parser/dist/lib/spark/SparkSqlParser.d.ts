import { ATN } from "antlr4ts/atn/ATN";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { RuleContext } from "antlr4ts/RuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { SparkSqlParserListener } from "./SparkSqlParserListener";
import { SparkSqlParserVisitor } from "./SparkSqlParserVisitor";
export declare class SparkSqlParser extends Parser {
    static readonly SEMICOLON = 1;
    static readonly LEFT_PAREN = 2;
    static readonly RIGHT_PAREN = 3;
    static readonly COMMA = 4;
    static readonly DOT = 5;
    static readonly LEFT_BRACKET = 6;
    static readonly RIGHT_BRACKET = 7;
    static readonly KW_ADD = 8;
    static readonly KW_AFTER = 9;
    static readonly KW_ALL = 10;
    static readonly KW_ALTER = 11;
    static readonly KW_ALWAYS = 12;
    static readonly KW_ANALYZE = 13;
    static readonly KW_AND = 14;
    static readonly KW_ANTI = 15;
    static readonly KW_ANY = 16;
    static readonly KW_ANY_VALUE = 17;
    static readonly KW_ARCHIVE = 18;
    static readonly KW_ARRAY = 19;
    static readonly KW_AS = 20;
    static readonly KW_ASC = 21;
    static readonly KW_AT = 22;
    static readonly KW_AUTHORIZATION = 23;
    static readonly KW_BETWEEN = 24;
    static readonly KW_BIGINT = 25;
    static readonly KW_BINARY = 26;
    static readonly KW_BOOLEAN = 27;
    static readonly KW_BOTH = 28;
    static readonly KW_BUCKET = 29;
    static readonly KW_BUCKETS = 30;
    static readonly KW_BY = 31;
    static readonly KW_BYTE = 32;
    static readonly KW_CACHE = 33;
    static readonly KW_CASCADE = 34;
    static readonly KW_CASE = 35;
    static readonly KW_CAST = 36;
    static readonly KW_CATALOG = 37;
    static readonly KW_CATALOGS = 38;
    static readonly KW_CHANGE = 39;
    static readonly KW_CHAR = 40;
    static readonly KW_CHARACTER = 41;
    static readonly KW_CHECK = 42;
    static readonly KW_CLEAR = 43;
    static readonly KW_CLUSTER = 44;
    static readonly KW_CLUSTERED = 45;
    static readonly KW_CODEGEN = 46;
    static readonly KW_COLLATE = 47;
    static readonly KW_COLLECTION = 48;
    static readonly KW_COLUMN = 49;
    static readonly KW_COLUMNS = 50;
    static readonly KW_COMMENT = 51;
    static readonly KW_COMMIT = 52;
    static readonly KW_COMPACT = 53;
    static readonly KW_COMPACTIONS = 54;
    static readonly KW_COMPUTE = 55;
    static readonly KW_CONCATENATE = 56;
    static readonly KW_CONSTRAINT = 57;
    static readonly KW_COST = 58;
    static readonly KW_CREATE = 59;
    static readonly KW_CROSS = 60;
    static readonly KW_CUBE = 61;
    static readonly KW_CURRENT = 62;
    static readonly KW_CURRENT_DATE = 63;
    static readonly KW_CURRENT_TIME = 64;
    static readonly KW_CURRENT_TIMESTAMP = 65;
    static readonly KW_CURRENT_USER = 66;
    static readonly KW_DAY = 67;
    static readonly KW_DAYS = 68;
    static readonly KW_DAYOFYEAR = 69;
    static readonly KW_DATA = 70;
    static readonly KW_DATE = 71;
    static readonly KW_DATABASE = 72;
    static readonly KW_DATABASES = 73;
    static readonly KW_DATEADD = 74;
    static readonly KW_DATE_ADD = 75;
    static readonly KW_DATEDIFF = 76;
    static readonly KW_DATE_DIFF = 77;
    static readonly KW_DBPROPERTIES = 78;
    static readonly KW_DEC = 79;
    static readonly KW_DECIMAL = 80;
    static readonly KW_DECLARE = 81;
    static readonly KW_DEFAULT = 82;
    static readonly KW_DEFINED = 83;
    static readonly KW_DELETE = 84;
    static readonly KW_DELIMITED = 85;
    static readonly KW_DESC = 86;
    static readonly KW_DESCRIBE = 87;
    static readonly KW_DFS = 88;
    static readonly KW_DIRECTORIES = 89;
    static readonly KW_DIRECTORY = 90;
    static readonly KW_DISTINCT = 91;
    static readonly KW_DISTRIBUTE = 92;
    static readonly KW_DIV = 93;
    static readonly KW_DOUBLE = 94;
    static readonly KW_DROP = 95;
    static readonly KW_ELSE = 96;
    static readonly KW_END = 97;
    static readonly KW_ESCAPE = 98;
    static readonly KW_ESCAPED = 99;
    static readonly KW_EXCEPT = 100;
    static readonly KW_EXCHANGE = 101;
    static readonly KW_EXCLUDE = 102;
    static readonly KW_EXISTS = 103;
    static readonly KW_EXPLAIN = 104;
    static readonly KW_EXPORT = 105;
    static readonly KW_EXTENDED = 106;
    static readonly KW_EXTERNAL = 107;
    static readonly KW_EXTRACT = 108;
    static readonly KW_FALSE = 109;
    static readonly KW_FETCH = 110;
    static readonly KW_FIELDS = 111;
    static readonly KW_FILTER = 112;
    static readonly KW_FILEFORMAT = 113;
    static readonly KW_FIRST = 114;
    static readonly KW_FLOAT = 115;
    static readonly KW_FOLLOWING = 116;
    static readonly KW_FOR = 117;
    static readonly KW_FOREIGN = 118;
    static readonly KW_FORMAT = 119;
    static readonly KW_FORMATTED = 120;
    static readonly KW_FROM = 121;
    static readonly KW_FULL = 122;
    static readonly KW_FUNCTION = 123;
    static readonly KW_FUNCTIONS = 124;
    static readonly KW_GENERATED = 125;
    static readonly KW_GLOBAL = 126;
    static readonly KW_GRANT = 127;
    static readonly KW_GROUP = 128;
    static readonly KW_GROUPING = 129;
    static readonly KW_HAVING = 130;
    static readonly KW_BINARY_HEX = 131;
    static readonly KW_HOUR = 132;
    static readonly KW_HOURS = 133;
    static readonly KW_IDENTIFIER = 134;
    static readonly KW_IF = 135;
    static readonly KW_IGNORE = 136;
    static readonly KW_IMPORT = 137;
    static readonly KW_IN = 138;
    static readonly KW_INCLUDE = 139;
    static readonly KW_INDEX = 140;
    static readonly KW_INDEXES = 141;
    static readonly KW_INNER = 142;
    static readonly KW_INPATH = 143;
    static readonly KW_INPUTFORMAT = 144;
    static readonly KW_INSERT = 145;
    static readonly KW_INTERSECT = 146;
    static readonly KW_INTERVAL = 147;
    static readonly KW_INT = 148;
    static readonly KW_INTEGER = 149;
    static readonly KW_INTO = 150;
    static readonly KW_IS = 151;
    static readonly KW_ITEMS = 152;
    static readonly KW_JOIN = 153;
    static readonly KW_KEYS = 154;
    static readonly KW_LAST = 155;
    static readonly KW_LATERAL = 156;
    static readonly KW_LAZY = 157;
    static readonly KW_LEADING = 158;
    static readonly KW_LEFT = 159;
    static readonly KW_LIKE = 160;
    static readonly KW_ILIKE = 161;
    static readonly KW_LIMIT = 162;
    static readonly KW_LINES = 163;
    static readonly KW_LIST = 164;
    static readonly KW_LOAD = 165;
    static readonly KW_LOCAL = 166;
    static readonly KW_LOCATION = 167;
    static readonly KW_LOCK = 168;
    static readonly KW_LOCKS = 169;
    static readonly KW_LOGICAL = 170;
    static readonly KW_LONG = 171;
    static readonly KW_MACRO = 172;
    static readonly KW_MAP = 173;
    static readonly KW_MATCHED = 174;
    static readonly KW_MERGE = 175;
    static readonly KW_MICROSECOND = 176;
    static readonly KW_MICROSECONDS = 177;
    static readonly KW_MILLISECOND = 178;
    static readonly KW_MILLISECONDS = 179;
    static readonly KW_MINUTE = 180;
    static readonly KW_MINUTES = 181;
    static readonly KW_MONTH = 182;
    static readonly KW_MONTHS = 183;
    static readonly KW_MSCK = 184;
    static readonly KW_NAME = 185;
    static readonly KW_NAMESPACE = 186;
    static readonly KW_NAMESPACES = 187;
    static readonly KW_NANOSECOND = 188;
    static readonly KW_NANOSECONDS = 189;
    static readonly KW_NATURAL = 190;
    static readonly KW_NO = 191;
    static readonly KW_NOT = 192;
    static readonly KW_NULL = 193;
    static readonly KW_NULLS = 194;
    static readonly KW_NUMERIC = 195;
    static readonly KW_OF = 196;
    static readonly KW_OFFSET = 197;
    static readonly KW_ON = 198;
    static readonly KW_ONLY = 199;
    static readonly KW_OPTION = 200;
    static readonly KW_OPTIONS = 201;
    static readonly KW_OR = 202;
    static readonly KW_ORDER = 203;
    static readonly KW_OUT = 204;
    static readonly KW_OUTER = 205;
    static readonly KW_OUTPUTFORMAT = 206;
    static readonly KW_OVER = 207;
    static readonly KW_OVERLAPS = 208;
    static readonly KW_OVERLAY = 209;
    static readonly KW_OVERWRITE = 210;
    static readonly KW_PARTITION = 211;
    static readonly KW_PARTITIONED = 212;
    static readonly KW_PARTITIONS = 213;
    static readonly KW_PERCENTILE_CONT = 214;
    static readonly KW_PERCENTILE_DISC = 215;
    static readonly KW_PERCENTLIT = 216;
    static readonly KW_PIVOT = 217;
    static readonly KW_PLACING = 218;
    static readonly KW_POSITION = 219;
    static readonly KW_PRECEDING = 220;
    static readonly KW_PRIMARY = 221;
    static readonly KW_PRINCIPALS = 222;
    static readonly KW_PROPERTIES = 223;
    static readonly KW_PURGE = 224;
    static readonly KW_QUARTER = 225;
    static readonly KW_QUERY = 226;
    static readonly KW_RANGE = 227;
    static readonly KW_REAL = 228;
    static readonly KW_RECORDREADER = 229;
    static readonly KW_RECORDWRITER = 230;
    static readonly KW_RECOVER = 231;
    static readonly KW_REDUCE = 232;
    static readonly KW_REFERENCES = 233;
    static readonly KW_REFRESH = 234;
    static readonly KW_RENAME = 235;
    static readonly KW_REPAIR = 236;
    static readonly KW_REPEATABLE = 237;
    static readonly KW_REPLACE = 238;
    static readonly KW_RESET = 239;
    static readonly KW_RESPECT = 240;
    static readonly KW_RESTRICT = 241;
    static readonly KW_REVOKE = 242;
    static readonly KW_RIGHT = 243;
    static readonly KW_RLIKE = 244;
    static readonly KW_REGEXP = 245;
    static readonly KW_ROLE = 246;
    static readonly KW_ROLES = 247;
    static readonly KW_ROLLBACK = 248;
    static readonly KW_ROLLUP = 249;
    static readonly KW_ROW = 250;
    static readonly KW_ROWS = 251;
    static readonly KW_SECOND = 252;
    static readonly KW_SECONDS = 253;
    static readonly KW_SCHEMA = 254;
    static readonly KW_SCHEMAS = 255;
    static readonly KW_SELECT = 256;
    static readonly KW_SEMI = 257;
    static readonly KW_SEPARATED = 258;
    static readonly KW_SERDE = 259;
    static readonly KW_SERDEPROPERTIES = 260;
    static readonly KW_SESSION_USER = 261;
    static readonly KW_SET = 262;
    static readonly KW_MINUS = 263;
    static readonly KW_SETS = 264;
    static readonly KW_SHORT = 265;
    static readonly KW_SHOW = 266;
    static readonly KW_SINGLE = 267;
    static readonly KW_SKEWED = 268;
    static readonly KW_SMALLINT = 269;
    static readonly KW_SOME = 270;
    static readonly KW_SORT = 271;
    static readonly KW_SORTED = 272;
    static readonly KW_SOURCE = 273;
    static readonly KW_START = 274;
    static readonly KW_STATISTICS = 275;
    static readonly KW_STORED = 276;
    static readonly KW_STRATIFY = 277;
    static readonly KW_STRING = 278;
    static readonly KW_STRUCT = 279;
    static readonly KW_SUBSTR = 280;
    static readonly KW_SUBSTRING = 281;
    static readonly KW_SYNC = 282;
    static readonly KW_SYSTEM = 283;
    static readonly KW_SYSTEM_TIME = 284;
    static readonly KW_SYSTEM_VERSION = 285;
    static readonly KW_TABLE = 286;
    static readonly KW_TABLES = 287;
    static readonly KW_TABLESAMPLE = 288;
    static readonly KW_TARGET = 289;
    static readonly KW_TBLPROPERTIES = 290;
    static readonly KW_TEMPORARY = 291;
    static readonly KW_TERMINATED = 292;
    static readonly KW_THEN = 293;
    static readonly KW_TIME = 294;
    static readonly KW_TIMEDIFF = 295;
    static readonly KW_TIMESTAMP = 296;
    static readonly KW_TIMESTAMP_LTZ = 297;
    static readonly KW_TIMESTAMP_NTZ = 298;
    static readonly KW_TIMESTAMPADD = 299;
    static readonly KW_TIMESTAMPDIFF = 300;
    static readonly KW_TINYINT = 301;
    static readonly KW_TO = 302;
    static readonly KW_TOUCH = 303;
    static readonly KW_TRAILING = 304;
    static readonly KW_TRANSACTION = 305;
    static readonly KW_TRANSACTIONS = 306;
    static readonly KW_TRANSFORM = 307;
    static readonly KW_TRIM = 308;
    static readonly KW_TRUE = 309;
    static readonly KW_TRUNCATE = 310;
    static readonly KW_TRY_CAST = 311;
    static readonly KW_TYPE = 312;
    static readonly KW_UNARCHIVE = 313;
    static readonly KW_UNBOUNDED = 314;
    static readonly KW_UNCACHE = 315;
    static readonly KW_UNION = 316;
    static readonly KW_UNIQUE = 317;
    static readonly KW_UNKNOWN = 318;
    static readonly KW_UNLOCK = 319;
    static readonly KW_UNPIVOT = 320;
    static readonly KW_UNSET = 321;
    static readonly KW_UPDATE = 322;
    static readonly KW_USE = 323;
    static readonly KW_USER = 324;
    static readonly KW_USING = 325;
    static readonly KW_VALUES = 326;
    static readonly KW_VARCHAR = 327;
    static readonly KW_VAR = 328;
    static readonly KW_VARIABLE = 329;
    static readonly KW_VERSION = 330;
    static readonly KW_VIEW = 331;
    static readonly KW_VIEWS = 332;
    static readonly KW_VOID = 333;
    static readonly KW_WEEK = 334;
    static readonly KW_WEEKS = 335;
    static readonly KW_WHEN = 336;
    static readonly KW_WHERE = 337;
    static readonly KW_WINDOW = 338;
    static readonly KW_WITH = 339;
    static readonly KW_WITHIN = 340;
    static readonly KW_YEAR = 341;
    static readonly KW_YEARS = 342;
    static readonly KW_ZONE = 343;
    static readonly EQ = 344;
    static readonly NSEQ = 345;
    static readonly NEQ = 346;
    static readonly NEQJ = 347;
    static readonly LT = 348;
    static readonly LTE = 349;
    static readonly GT = 350;
    static readonly GTE = 351;
    static readonly NOT = 352;
    static readonly PLUS = 353;
    static readonly MINUS = 354;
    static readonly ASTERISK = 355;
    static readonly SLASH = 356;
    static readonly PERCENT = 357;
    static readonly TILDE = 358;
    static readonly AMPERSAND = 359;
    static readonly PIPE = 360;
    static readonly CONCAT_PIPE = 361;
    static readonly HAT = 362;
    static readonly COLON = 363;
    static readonly ARROW = 364;
    static readonly FAT_ARROW = 365;
    static readonly HENT_START = 366;
    static readonly HENT_END = 367;
    static readonly QUESTION = 368;
    static readonly STRING_LITERAL = 369;
    static readonly DOUBLEQUOTED_STRING = 370;
    static readonly BIGINT_LITERAL = 371;
    static readonly SMALLINT_LITERAL = 372;
    static readonly TINYINT_LITERAL = 373;
    static readonly INTEGER_VALUE = 374;
    static readonly EXPONENT_VALUE = 375;
    static readonly DECIMAL_VALUE = 376;
    static readonly FLOAT_LITERAL = 377;
    static readonly DOUBLE_LITERAL = 378;
    static readonly BIGDECIMAL_LITERAL = 379;
    static readonly IDENTIFIER = 380;
    static readonly BACKQUOTED_IDENTIFIER = 381;
    static readonly SIMPLE_COMMENT = 382;
    static readonly BRACKETED_COMMENT = 383;
    static readonly WS = 384;
    static readonly UNRECOGNIZED = 385;
    static readonly RULE_program = 0;
    static readonly RULE_singleStatement = 1;
    static readonly RULE_statement = 2;
    static readonly RULE_timezone = 3;
    static readonly RULE_configKey = 4;
    static readonly RULE_configValue = 5;
    static readonly RULE_unsupportedHiveNativeCommands = 6;
    static readonly RULE_createTableHeader = 7;
    static readonly RULE_replaceTableHeader = 8;
    static readonly RULE_bucketSpec = 9;
    static readonly RULE_skewSpec = 10;
    static readonly RULE_locationSpec = 11;
    static readonly RULE_commentSpec = 12;
    static readonly RULE_query = 13;
    static readonly RULE_insertInto = 14;
    static readonly RULE_partitionSpecLocation = 15;
    static readonly RULE_partitionSpec = 16;
    static readonly RULE_partitionVal = 17;
    static readonly RULE_dbSchema = 18;
    static readonly RULE_dbSchemas = 19;
    static readonly RULE_describeFuncName = 20;
    static readonly RULE_describeColName = 21;
    static readonly RULE_ctes = 22;
    static readonly RULE_namedQuery = 23;
    static readonly RULE_tableProvider = 24;
    static readonly RULE_createTableClauses = 25;
    static readonly RULE_propertyList = 26;
    static readonly RULE_property = 27;
    static readonly RULE_propertyKey = 28;
    static readonly RULE_propertyValue = 29;
    static readonly RULE_expressionPropertyList = 30;
    static readonly RULE_expressionProperty = 31;
    static readonly RULE_constantList = 32;
    static readonly RULE_nestedConstantList = 33;
    static readonly RULE_createFileFormat = 34;
    static readonly RULE_fileFormat = 35;
    static readonly RULE_storageHandler = 36;
    static readonly RULE_resource = 37;
    static readonly RULE_dmlStatementNoWith = 38;
    static readonly RULE_dbSchemaName = 39;
    static readonly RULE_dbSchemaNameCreate = 40;
    static readonly RULE_tableNameCreate = 41;
    static readonly RULE_tableName = 42;
    static readonly RULE_viewNameCreate = 43;
    static readonly RULE_viewName = 44;
    static readonly RULE_identifierReference = 45;
    static readonly RULE_queryOrganization = 46;
    static readonly RULE_multiInsertQueryBody = 47;
    static readonly RULE_queryTerm = 48;
    static readonly RULE_queryPrimary = 49;
    static readonly RULE_sortItem = 50;
    static readonly RULE_fromStatement = 51;
    static readonly RULE_fromStatementBody = 52;
    static readonly RULE_querySpecification = 53;
    static readonly RULE_transformClause = 54;
    static readonly RULE_selectClause = 55;
    static readonly RULE_setClause = 56;
    static readonly RULE_matchedClause = 57;
    static readonly RULE_notMatchedClause = 58;
    static readonly RULE_notMatchedBySourceClause = 59;
    static readonly RULE_matchedAction = 60;
    static readonly RULE_notMatchedAction = 61;
    static readonly RULE_notMatchedBySourceAction = 62;
    static readonly RULE_assignmentList = 63;
    static readonly RULE_assignment = 64;
    static readonly RULE_whereClause = 65;
    static readonly RULE_havingClause = 66;
    static readonly RULE_hint = 67;
    static readonly RULE_hintStatement = 68;
    static readonly RULE_fromClause = 69;
    static readonly RULE_functionKind = 70;
    static readonly RULE_temporalClause = 71;
    static readonly RULE_aggregationClause = 72;
    static readonly RULE_groupByClause = 73;
    static readonly RULE_groupingAnalytics = 74;
    static readonly RULE_groupingElement = 75;
    static readonly RULE_groupingSet = 76;
    static readonly RULE_pivotClause = 77;
    static readonly RULE_pivotColumn = 78;
    static readonly RULE_pivotValue = 79;
    static readonly RULE_unpivotClause = 80;
    static readonly RULE_unpivotNullClause = 81;
    static readonly RULE_unpivotOperator = 82;
    static readonly RULE_unpivotSingleValueColumnClause = 83;
    static readonly RULE_unpivotMultiValueColumnClause = 84;
    static readonly RULE_unpivotColumnSet = 85;
    static readonly RULE_unpivotValueColumn = 86;
    static readonly RULE_unpivotNameColumn = 87;
    static readonly RULE_unpivotColumnAndAlias = 88;
    static readonly RULE_unpivotColumn = 89;
    static readonly RULE_unpivotAlias = 90;
    static readonly RULE_ifNotExists = 91;
    static readonly RULE_ifExists = 92;
    static readonly RULE_lateralView = 93;
    static readonly RULE_setQuantifier = 94;
    static readonly RULE_relation = 95;
    static readonly RULE_relationExtension = 96;
    static readonly RULE_joinRelation = 97;
    static readonly RULE_joinType = 98;
    static readonly RULE_joinCriteria = 99;
    static readonly RULE_sample = 100;
    static readonly RULE_sampleMethod = 101;
    static readonly RULE_identifierList = 102;
    static readonly RULE_identifierSeq = 103;
    static readonly RULE_orderedIdentifierList = 104;
    static readonly RULE_orderedIdentifier = 105;
    static readonly RULE_identifierCommentList = 106;
    static readonly RULE_identifierComment = 107;
    static readonly RULE_relationPrimary = 108;
    static readonly RULE_inlineTable = 109;
    static readonly RULE_functionTableSubqueryArgument = 110;
    static readonly RULE_tableArgumentPartitioning = 111;
    static readonly RULE_functionTableNamedArgumentExpression = 112;
    static readonly RULE_functionTableReferenceArgument = 113;
    static readonly RULE_functionTableArgument = 114;
    static readonly RULE_functionTable = 115;
    static readonly RULE_tableAlias = 116;
    static readonly RULE_rowFormat = 117;
    static readonly RULE_multipartIdentifierList = 118;
    static readonly RULE_multipartIdentifier = 119;
    static readonly RULE_multipartIdentifierPropertyList = 120;
    static readonly RULE_multipartIdentifierProperty = 121;
    static readonly RULE_tableIdentifier = 122;
    static readonly RULE_viewIdentifier = 123;
    static readonly RULE_namedExpression = 124;
    static readonly RULE_namedExpressionSeq = 125;
    static readonly RULE_partitionFieldList = 126;
    static readonly RULE_partitionField = 127;
    static readonly RULE_transform = 128;
    static readonly RULE_transformArgument = 129;
    static readonly RULE_expression = 130;
    static readonly RULE_namedArgumentExpression = 131;
    static readonly RULE_functionArgument = 132;
    static readonly RULE_expressionSeq = 133;
    static readonly RULE_booleanExpression = 134;
    static readonly RULE_predicate = 135;
    static readonly RULE_valueExpression = 136;
    static readonly RULE_datetimeUnit = 137;
    static readonly RULE_primaryExpression = 138;
    static readonly RULE_literalType = 139;
    static readonly RULE_constant = 140;
    static readonly RULE_comparisonOperator = 141;
    static readonly RULE_arithmeticOperator = 142;
    static readonly RULE_predicateOperator = 143;
    static readonly RULE_booleanValue = 144;
    static readonly RULE_interval = 145;
    static readonly RULE_errorCapturingMultiUnitsInterval = 146;
    static readonly RULE_multiUnitsInterval = 147;
    static readonly RULE_errorCapturingUnitToUnitInterval = 148;
    static readonly RULE_unitToUnitInterval = 149;
    static readonly RULE_intervalValue = 150;
    static readonly RULE_unitInMultiUnits = 151;
    static readonly RULE_unitInUnitToUnit = 152;
    static readonly RULE_colPosition = 153;
    static readonly RULE_type = 154;
    static readonly RULE_dataType = 155;
    static readonly RULE_qualifiedColTypeWithPositionList = 156;
    static readonly RULE_qualifiedColTypeWithPosition = 157;
    static readonly RULE_colDefinitionDescriptorWithPosition = 158;
    static readonly RULE_defaultExpression = 159;
    static readonly RULE_variableDefaultExpression = 160;
    static readonly RULE_colTypeList = 161;
    static readonly RULE_colType = 162;
    static readonly RULE_createOrReplaceTableColTypeList = 163;
    static readonly RULE_createOrReplaceTableColType = 164;
    static readonly RULE_colDefinitionOption = 165;
    static readonly RULE_generationExpression = 166;
    static readonly RULE_complexColTypeList = 167;
    static readonly RULE_complexColType = 168;
    static readonly RULE_whenClause = 169;
    static readonly RULE_windowClause = 170;
    static readonly RULE_namedWindow = 171;
    static readonly RULE_windowSpec = 172;
    static readonly RULE_windowFrame = 173;
    static readonly RULE_frameBound = 174;
    static readonly RULE_qualifiedNameList = 175;
    static readonly RULE_functionName = 176;
    static readonly RULE_functionNameCreate = 177;
    static readonly RULE_qualifiedName = 178;
    static readonly RULE_errorCapturingIdentifier = 179;
    static readonly RULE_errorCapturingIdentifierExtra = 180;
    static readonly RULE_identifier = 181;
    static readonly RULE_strictIdentifier = 182;
    static readonly RULE_quotedIdentifier = 183;
    static readonly RULE_backQuotedIdentifier = 184;
    static readonly RULE_number = 185;
    static readonly RULE_alterColumnAction = 186;
    static readonly RULE_stringLit = 187;
    static readonly RULE_comment = 188;
    static readonly RULE_version = 189;
    static readonly RULE_ansiNonReserved = 190;
    static readonly RULE_strictNonReserved = 191;
    static readonly RULE_nonReserved = 192;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    /**
     * When false, KW_INTERSECT is given the greater precedence over the other set
     * operations (KW_UNION, KW_EXCEPT and MINUS) as per the SQL standard.
     */
    legacy_setops_precedence_enabled: boolean;
    /**
     * When false, a literal with an exponent would be converted into
     * double type rather than decimal type.
     */
    legacy_exponent_literal_as_decimal_enabled: boolean;
    /**
     * When true, the behavior of keywords follows ANSI SQL standard.
     */
    SQL_standard_keyword_behavior: boolean;
    /**
     * When true, double quoted literals are identifiers rather than STRINGs.
     */
    double_quoted_identifiers: boolean;
    constructor(input: TokenStream);
    program(): ProgramContext;
    singleStatement(): SingleStatementContext;
    statement(): StatementContext;
    timezone(): TimezoneContext;
    configKey(): ConfigKeyContext;
    configValue(): ConfigValueContext;
    unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext;
    createTableHeader(): CreateTableHeaderContext;
    replaceTableHeader(): ReplaceTableHeaderContext;
    bucketSpec(): BucketSpecContext;
    skewSpec(): SkewSpecContext;
    locationSpec(): LocationSpecContext;
    commentSpec(): CommentSpecContext;
    query(): QueryContext;
    insertInto(): InsertIntoContext;
    partitionSpecLocation(): PartitionSpecLocationContext;
    partitionSpec(): PartitionSpecContext;
    partitionVal(): PartitionValContext;
    dbSchema(): DbSchemaContext;
    dbSchemas(): DbSchemasContext;
    describeFuncName(): DescribeFuncNameContext;
    describeColName(): DescribeColNameContext;
    ctes(): CtesContext;
    namedQuery(): NamedQueryContext;
    tableProvider(): TableProviderContext;
    createTableClauses(): CreateTableClausesContext;
    propertyList(): PropertyListContext;
    property(): PropertyContext;
    propertyKey(): PropertyKeyContext;
    propertyValue(): PropertyValueContext;
    expressionPropertyList(): ExpressionPropertyListContext;
    expressionProperty(): ExpressionPropertyContext;
    constantList(): ConstantListContext;
    nestedConstantList(): NestedConstantListContext;
    createFileFormat(): CreateFileFormatContext;
    fileFormat(): FileFormatContext;
    storageHandler(): StorageHandlerContext;
    resource(): ResourceContext;
    dmlStatementNoWith(): DmlStatementNoWithContext;
    dbSchemaName(): DbSchemaNameContext;
    dbSchemaNameCreate(): DbSchemaNameCreateContext;
    tableNameCreate(): TableNameCreateContext;
    tableName(): TableNameContext;
    viewNameCreate(): ViewNameCreateContext;
    viewName(): ViewNameContext;
    identifierReference(): IdentifierReferenceContext;
    queryOrganization(): QueryOrganizationContext;
    multiInsertQueryBody(): MultiInsertQueryBodyContext;
    queryTerm(): QueryTermContext;
    queryTerm(_p: number): QueryTermContext;
    queryPrimary(): QueryPrimaryContext;
    sortItem(): SortItemContext;
    fromStatement(): FromStatementContext;
    fromStatementBody(): FromStatementBodyContext;
    querySpecification(): QuerySpecificationContext;
    transformClause(): TransformClauseContext;
    selectClause(): SelectClauseContext;
    setClause(): SetClauseContext;
    matchedClause(): MatchedClauseContext;
    notMatchedClause(): NotMatchedClauseContext;
    notMatchedBySourceClause(): NotMatchedBySourceClauseContext;
    matchedAction(): MatchedActionContext;
    notMatchedAction(): NotMatchedActionContext;
    notMatchedBySourceAction(): NotMatchedBySourceActionContext;
    assignmentList(): AssignmentListContext;
    assignment(): AssignmentContext;
    whereClause(): WhereClauseContext;
    havingClause(): HavingClauseContext;
    hint(): HintContext;
    hintStatement(): HintStatementContext;
    fromClause(): FromClauseContext;
    functionKind(): FunctionKindContext;
    temporalClause(): TemporalClauseContext;
    aggregationClause(): AggregationClauseContext;
    groupByClause(): GroupByClauseContext;
    groupingAnalytics(): GroupingAnalyticsContext;
    groupingElement(): GroupingElementContext;
    groupingSet(): GroupingSetContext;
    pivotClause(): PivotClauseContext;
    pivotColumn(): PivotColumnContext;
    pivotValue(): PivotValueContext;
    unpivotClause(): UnpivotClauseContext;
    unpivotNullClause(): UnpivotNullClauseContext;
    unpivotOperator(): UnpivotOperatorContext;
    unpivotSingleValueColumnClause(): UnpivotSingleValueColumnClauseContext;
    unpivotMultiValueColumnClause(): UnpivotMultiValueColumnClauseContext;
    unpivotColumnSet(): UnpivotColumnSetContext;
    unpivotValueColumn(): UnpivotValueColumnContext;
    unpivotNameColumn(): UnpivotNameColumnContext;
    unpivotColumnAndAlias(): UnpivotColumnAndAliasContext;
    unpivotColumn(): UnpivotColumnContext;
    unpivotAlias(): UnpivotAliasContext;
    ifNotExists(): IfNotExistsContext;
    ifExists(): IfExistsContext;
    lateralView(): LateralViewContext;
    setQuantifier(): SetQuantifierContext;
    relation(): RelationContext;
    relationExtension(): RelationExtensionContext;
    joinRelation(): JoinRelationContext;
    joinType(): JoinTypeContext;
    joinCriteria(): JoinCriteriaContext;
    sample(): SampleContext;
    sampleMethod(): SampleMethodContext;
    identifierList(): IdentifierListContext;
    identifierSeq(): IdentifierSeqContext;
    orderedIdentifierList(): OrderedIdentifierListContext;
    orderedIdentifier(): OrderedIdentifierContext;
    identifierCommentList(): IdentifierCommentListContext;
    identifierComment(): IdentifierCommentContext;
    relationPrimary(): RelationPrimaryContext;
    inlineTable(): InlineTableContext;
    functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext;
    tableArgumentPartitioning(): TableArgumentPartitioningContext;
    functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext;
    functionTableReferenceArgument(): FunctionTableReferenceArgumentContext;
    functionTableArgument(): FunctionTableArgumentContext;
    functionTable(): FunctionTableContext;
    tableAlias(): TableAliasContext;
    rowFormat(): RowFormatContext;
    multipartIdentifierList(): MultipartIdentifierListContext;
    multipartIdentifier(): MultipartIdentifierContext;
    multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext;
    multipartIdentifierProperty(): MultipartIdentifierPropertyContext;
    tableIdentifier(): TableIdentifierContext;
    viewIdentifier(): ViewIdentifierContext;
    namedExpression(): NamedExpressionContext;
    namedExpressionSeq(): NamedExpressionSeqContext;
    partitionFieldList(): PartitionFieldListContext;
    partitionField(): PartitionFieldContext;
    transform(): TransformContext;
    transformArgument(): TransformArgumentContext;
    expression(): ExpressionContext;
    namedArgumentExpression(): NamedArgumentExpressionContext;
    functionArgument(): FunctionArgumentContext;
    expressionSeq(): ExpressionSeqContext;
    booleanExpression(): BooleanExpressionContext;
    booleanExpression(_p: number): BooleanExpressionContext;
    predicate(): PredicateContext;
    valueExpression(): ValueExpressionContext;
    valueExpression(_p: number): ValueExpressionContext;
    datetimeUnit(): DatetimeUnitContext;
    primaryExpression(): PrimaryExpressionContext;
    primaryExpression(_p: number): PrimaryExpressionContext;
    literalType(): LiteralTypeContext;
    constant(): ConstantContext;
    comparisonOperator(): ComparisonOperatorContext;
    arithmeticOperator(): ArithmeticOperatorContext;
    predicateOperator(): PredicateOperatorContext;
    booleanValue(): BooleanValueContext;
    interval(): IntervalContext;
    errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext;
    multiUnitsInterval(): MultiUnitsIntervalContext;
    errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext;
    unitToUnitInterval(): UnitToUnitIntervalContext;
    intervalValue(): IntervalValueContext;
    unitInMultiUnits(): UnitInMultiUnitsContext;
    unitInUnitToUnit(): UnitInUnitToUnitContext;
    colPosition(): ColPositionContext;
    type(): TypeContext;
    dataType(): DataTypeContext;
    qualifiedColTypeWithPositionList(): QualifiedColTypeWithPositionListContext;
    qualifiedColTypeWithPosition(): QualifiedColTypeWithPositionContext;
    colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext;
    defaultExpression(): DefaultExpressionContext;
    variableDefaultExpression(): VariableDefaultExpressionContext;
    colTypeList(): ColTypeListContext;
    colType(): ColTypeContext;
    createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext;
    createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext;
    colDefinitionOption(): ColDefinitionOptionContext;
    generationExpression(): GenerationExpressionContext;
    complexColTypeList(): ComplexColTypeListContext;
    complexColType(): ComplexColTypeContext;
    whenClause(): WhenClauseContext;
    windowClause(): WindowClauseContext;
    namedWindow(): NamedWindowContext;
    windowSpec(): WindowSpecContext;
    windowFrame(): WindowFrameContext;
    frameBound(): FrameBoundContext;
    qualifiedNameList(): QualifiedNameListContext;
    functionName(): FunctionNameContext;
    functionNameCreate(): FunctionNameCreateContext;
    qualifiedName(): QualifiedNameContext;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext;
    errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext;
    identifier(): IdentifierContext;
    strictIdentifier(): StrictIdentifierContext;
    quotedIdentifier(): QuotedIdentifierContext;
    backQuotedIdentifier(): BackQuotedIdentifierContext;
    number(): NumberContext;
    alterColumnAction(): AlterColumnActionContext;
    stringLit(): StringLitContext;
    comment(): CommentContext;
    version(): VersionContext;
    ansiNonReserved(): AnsiNonReservedContext;
    strictNonReserved(): StrictNonReservedContext;
    nonReserved(): NonReservedContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private queryTerm_sempred;
    private booleanExpression_sempred;
    private valueExpression_sempred;
    private primaryExpression_sempred;
    private identifier_sempred;
    private strictIdentifier_sempred;
    private quotedIdentifier_sempred;
    private number_sempred;
    private stringLit_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    private static readonly _serializedATNSegment4;
    private static readonly _serializedATNSegment5;
    private static readonly _serializedATNSegment6;
    private static readonly _serializedATNSegment7;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class ProgramContext extends ParserRuleContext {
    EOF(): TerminalNode;
    singleStatement(): SingleStatementContext[];
    singleStatement(i: number): SingleStatementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class SingleStatementContext extends ParserRuleContext {
    statement(): StatementContext;
    SEMICOLON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class StatementContext extends ParserRuleContext {
    _pattern: StringLitContext;
    _target: TableNameCreateContext;
    _source: TableNameContext;
    _tableProps: PropertyListContext;
    _table: TableNameContext;
    _column: MultipartIdentifierContext;
    _colName: MultipartIdentifierContext;
    _className: StringLitContext;
    _ns: DbSchemaNameContext;
    _key: PropertyKeyContext;
    _legacy: MultipartIdentifierContext;
    _option: Token;
    _options: PropertyListContext;
    _path: StringLitContext;
    _op: Token;
    _indexType: IdentifierContext;
    query(): QueryContext | undefined;
    dmlStatementNoWith(): DmlStatementNoWithContext | undefined;
    ctes(): CtesContext | undefined;
    KW_USE(): TerminalNode | undefined;
    dbSchemaName(): DbSchemaNameContext | undefined;
    dbSchema(): DbSchemaContext | undefined;
    KW_SET(): TerminalNode | undefined;
    KW_CATALOG(): TerminalNode | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    stringLit(): StringLitContext | undefined;
    KW_CREATE(): TerminalNode | undefined;
    dbSchemaNameCreate(): DbSchemaNameCreateContext | undefined;
    ifNotExists(): IfNotExistsContext | undefined;
    commentSpec(): CommentSpecContext[];
    commentSpec(i: number): CommentSpecContext;
    locationSpec(): LocationSpecContext[];
    locationSpec(i: number): LocationSpecContext;
    KW_WITH(): TerminalNode[];
    KW_WITH(i: number): TerminalNode;
    propertyList(): PropertyListContext[];
    propertyList(i: number): PropertyListContext;
    KW_DBPROPERTIES(): TerminalNode[];
    KW_DBPROPERTIES(i: number): TerminalNode;
    KW_PROPERTIES(): TerminalNode[];
    KW_PROPERTIES(i: number): TerminalNode;
    KW_ALTER(): TerminalNode[];
    KW_ALTER(i: number): TerminalNode;
    KW_DROP(): TerminalNode | undefined;
    ifExists(): IfExistsContext | undefined;
    KW_RESTRICT(): TerminalNode | undefined;
    KW_CASCADE(): TerminalNode | undefined;
    KW_SHOW(): TerminalNode | undefined;
    dbSchemas(): DbSchemasContext | undefined;
    multipartIdentifier(): MultipartIdentifierContext | undefined;
    KW_FROM(): TerminalNode[];
    KW_FROM(i: number): TerminalNode;
    KW_IN(): TerminalNode[];
    KW_IN(i: number): TerminalNode;
    KW_LIKE(): TerminalNode | undefined;
    createTableHeader(): CreateTableHeaderContext | undefined;
    createTableClauses(): CreateTableClausesContext | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext | undefined;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    tableProvider(): TableProviderContext[];
    tableProvider(i: number): TableProviderContext;
    KW_AS(): TerminalNode | undefined;
    KW_TABLE(): TerminalNode | undefined;
    tableNameCreate(): TableNameCreateContext | undefined;
    tableName(): TableNameContext | undefined;
    rowFormat(): RowFormatContext[];
    rowFormat(i: number): RowFormatContext;
    createFileFormat(): CreateFileFormatContext[];
    createFileFormat(i: number): CreateFileFormatContext;
    KW_TBLPROPERTIES(): TerminalNode[];
    KW_TBLPROPERTIES(i: number): TerminalNode;
    replaceTableHeader(): ReplaceTableHeaderContext | undefined;
    KW_ANALYZE(): TerminalNode | undefined;
    KW_COMPUTE(): TerminalNode | undefined;
    KW_STATISTICS(): TerminalNode | undefined;
    partitionSpec(): PartitionSpecContext[];
    partitionSpec(i: number): PartitionSpecContext;
    KW_FOR(): TerminalNode | undefined;
    KW_COLUMNS(): TerminalNode | undefined;
    identifierSeq(): IdentifierSeqContext | undefined;
    KW_ALL(): TerminalNode | undefined;
    KW_TABLES(): TerminalNode | undefined;
    KW_ADD(): TerminalNode | undefined;
    qualifiedColTypeWithPositionList(): QualifiedColTypeWithPositionListContext | undefined;
    KW_COLUMN(): TerminalNode | undefined;
    KW_RENAME(): TerminalNode | undefined;
    KW_TO(): TerminalNode | undefined;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext | undefined;
    multipartIdentifierList(): MultipartIdentifierListContext | undefined;
    KW_VIEW(): TerminalNode | undefined;
    viewName(): ViewNameContext | undefined;
    KW_UNSET(): TerminalNode | undefined;
    KW_CHANGE(): TerminalNode | undefined;
    alterColumnAction(): AlterColumnActionContext | undefined;
    colType(): ColTypeContext | undefined;
    colPosition(): ColPositionContext | undefined;
    KW_REPLACE(): TerminalNode | undefined;
    KW_SERDE(): TerminalNode | undefined;
    KW_SERDEPROPERTIES(): TerminalNode | undefined;
    partitionSpecLocation(): PartitionSpecLocationContext[];
    partitionSpecLocation(i: number): PartitionSpecLocationContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    KW_PURGE(): TerminalNode | undefined;
    KW_RECOVER(): TerminalNode | undefined;
    KW_PARTITIONS(): TerminalNode | undefined;
    viewNameCreate(): ViewNameCreateContext | undefined;
    KW_OR(): TerminalNode | undefined;
    KW_TEMPORARY(): TerminalNode | undefined;
    identifierCommentList(): IdentifierCommentListContext | undefined;
    KW_PARTITIONED(): TerminalNode[];
    KW_PARTITIONED(i: number): TerminalNode;
    KW_ON(): TerminalNode[];
    KW_ON(i: number): TerminalNode;
    identifierList(): IdentifierListContext[];
    identifierList(i: number): IdentifierListContext;
    KW_GLOBAL(): TerminalNode | undefined;
    colTypeList(): ColTypeListContext | undefined;
    KW_OPTIONS(): TerminalNode | undefined;
    KW_FUNCTION(): TerminalNode | undefined;
    functionNameCreate(): FunctionNameCreateContext | undefined;
    KW_USING(): TerminalNode | undefined;
    resource(): ResourceContext[];
    resource(i: number): ResourceContext;
    functionName(): FunctionNameContext | undefined;
    KW_DECLARE(): TerminalNode | undefined;
    KW_VARIABLE(): TerminalNode | undefined;
    dataType(): DataTypeContext | undefined;
    variableDefaultExpression(): VariableDefaultExpressionContext | undefined;
    KW_EXPLAIN(): TerminalNode | undefined;
    statement(): StatementContext | undefined;
    KW_LOGICAL(): TerminalNode | undefined;
    KW_FORMATTED(): TerminalNode | undefined;
    KW_EXTENDED(): TerminalNode | undefined;
    KW_CODEGEN(): TerminalNode | undefined;
    KW_COST(): TerminalNode | undefined;
    propertyKey(): PropertyKeyContext | undefined;
    KW_VIEWS(): TerminalNode | undefined;
    KW_FUNCTIONS(): TerminalNode | undefined;
    functionKind(): FunctionKindContext | undefined;
    KW_CURRENT(): TerminalNode | undefined;
    KW_CATALOGS(): TerminalNode | undefined;
    describeFuncName(): DescribeFuncNameContext | undefined;
    KW_DESC(): TerminalNode | undefined;
    KW_DESCRIBE(): TerminalNode | undefined;
    KW_DATABASE(): TerminalNode | undefined;
    describeColName(): DescribeColNameContext | undefined;
    KW_QUERY(): TerminalNode | undefined;
    KW_COMMENT(): TerminalNode | undefined;
    KW_IS(): TerminalNode | undefined;
    comment(): CommentContext | undefined;
    KW_REFRESH(): TerminalNode | undefined;
    KW_CACHE(): TerminalNode | undefined;
    KW_LAZY(): TerminalNode | undefined;
    KW_UNCACHE(): TerminalNode | undefined;
    KW_CLEAR(): TerminalNode | undefined;
    KW_LOAD(): TerminalNode | undefined;
    KW_DATA(): TerminalNode | undefined;
    KW_INPATH(): TerminalNode | undefined;
    KW_INTO(): TerminalNode | undefined;
    KW_LOCAL(): TerminalNode | undefined;
    KW_OVERWRITE(): TerminalNode | undefined;
    KW_TRUNCATE(): TerminalNode | undefined;
    KW_REPAIR(): TerminalNode | undefined;
    KW_MSCK(): TerminalNode | undefined;
    KW_SYNC(): TerminalNode | undefined;
    KW_LIST(): TerminalNode | undefined;
    KW_ROLE(): TerminalNode | undefined;
    KW_TIME(): TerminalNode | undefined;
    KW_ZONE(): TerminalNode | undefined;
    interval(): IntervalContext | undefined;
    timezone(): TimezoneContext | undefined;
    assignmentList(): AssignmentListContext | undefined;
    KW_VAR(): TerminalNode | undefined;
    EQ(): TerminalNode | undefined;
    configKey(): ConfigKeyContext | undefined;
    configValue(): ConfigValueContext | undefined;
    KW_RESET(): TerminalNode | undefined;
    KW_INDEX(): TerminalNode | undefined;
    multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext | undefined;
    unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TimezoneContext extends ParserRuleContext {
    stringLit(): StringLitContext | undefined;
    KW_LOCAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ConfigKeyContext extends ParserRuleContext {
    quotedIdentifier(): QuotedIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ConfigValueContext extends ParserRuleContext {
    backQuotedIdentifier(): BackQuotedIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnsupportedHiveNativeCommandsContext extends ParserRuleContext {
    _kw1: Token;
    _kw2: Token;
    _kw3: Token;
    _kw4: Token;
    _kw5: Token;
    _kw6: Token;
    KW_CREATE(): TerminalNode | undefined;
    KW_ROLE(): TerminalNode | undefined;
    KW_DROP(): TerminalNode | undefined;
    KW_GRANT(): TerminalNode | undefined;
    KW_REVOKE(): TerminalNode | undefined;
    KW_SHOW(): TerminalNode | undefined;
    KW_PRINCIPALS(): TerminalNode | undefined;
    KW_ROLES(): TerminalNode | undefined;
    KW_CURRENT(): TerminalNode | undefined;
    KW_EXPORT(): TerminalNode | undefined;
    KW_TABLE(): TerminalNode | undefined;
    KW_IMPORT(): TerminalNode | undefined;
    KW_COMPACTIONS(): TerminalNode | undefined;
    KW_TRANSACTIONS(): TerminalNode | undefined;
    KW_INDEXES(): TerminalNode | undefined;
    KW_LOCKS(): TerminalNode | undefined;
    KW_INDEX(): TerminalNode | undefined;
    KW_ALTER(): TerminalNode | undefined;
    KW_LOCK(): TerminalNode | undefined;
    KW_DATABASE(): TerminalNode | undefined;
    KW_UNLOCK(): TerminalNode | undefined;
    KW_TEMPORARY(): TerminalNode | undefined;
    KW_MACRO(): TerminalNode | undefined;
    tableName(): TableNameContext | undefined;
    KW_NOT(): TerminalNode | undefined;
    KW_CLUSTERED(): TerminalNode | undefined;
    KW_BY(): TerminalNode | undefined;
    KW_SORTED(): TerminalNode | undefined;
    KW_SKEWED(): TerminalNode | undefined;
    KW_STORED(): TerminalNode | undefined;
    KW_AS(): TerminalNode | undefined;
    KW_DIRECTORIES(): TerminalNode | undefined;
    KW_SET(): TerminalNode | undefined;
    KW_LOCATION(): TerminalNode | undefined;
    KW_EXCHANGE(): TerminalNode | undefined;
    KW_PARTITION(): TerminalNode | undefined;
    KW_ARCHIVE(): TerminalNode | undefined;
    KW_UNARCHIVE(): TerminalNode | undefined;
    KW_TOUCH(): TerminalNode | undefined;
    KW_COMPACT(): TerminalNode | undefined;
    partitionSpec(): PartitionSpecContext | undefined;
    KW_CONCATENATE(): TerminalNode | undefined;
    KW_FILEFORMAT(): TerminalNode | undefined;
    KW_REPLACE(): TerminalNode | undefined;
    KW_COLUMNS(): TerminalNode | undefined;
    KW_START(): TerminalNode | undefined;
    KW_TRANSACTION(): TerminalNode | undefined;
    KW_COMMIT(): TerminalNode | undefined;
    KW_ROLLBACK(): TerminalNode | undefined;
    KW_DFS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class CreateTableHeaderContext extends ParserRuleContext {
    KW_CREATE(): TerminalNode;
    KW_TABLE(): TerminalNode;
    tableNameCreate(): TableNameCreateContext;
    KW_TEMPORARY(): TerminalNode | undefined;
    KW_EXTERNAL(): TerminalNode | undefined;
    ifNotExists(): IfNotExistsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ReplaceTableHeaderContext extends ParserRuleContext {
    KW_REPLACE(): TerminalNode;
    KW_TABLE(): TerminalNode;
    tableNameCreate(): TableNameCreateContext;
    KW_CREATE(): TerminalNode | undefined;
    KW_OR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class BucketSpecContext extends ParserRuleContext {
    KW_CLUSTERED(): TerminalNode;
    KW_BY(): TerminalNode[];
    KW_BY(i: number): TerminalNode;
    identifierList(): IdentifierListContext;
    KW_INTO(): TerminalNode;
    INTEGER_VALUE(): TerminalNode;
    KW_BUCKETS(): TerminalNode;
    KW_SORTED(): TerminalNode | undefined;
    orderedIdentifierList(): OrderedIdentifierListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class SkewSpecContext extends ParserRuleContext {
    KW_SKEWED(): TerminalNode;
    KW_BY(): TerminalNode;
    identifierList(): IdentifierListContext;
    KW_ON(): TerminalNode;
    constantList(): ConstantListContext | undefined;
    nestedConstantList(): NestedConstantListContext | undefined;
    KW_STORED(): TerminalNode | undefined;
    KW_AS(): TerminalNode | undefined;
    KW_DIRECTORIES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class LocationSpecContext extends ParserRuleContext {
    KW_LOCATION(): TerminalNode;
    stringLit(): StringLitContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class CommentSpecContext extends ParserRuleContext {
    KW_COMMENT(): TerminalNode;
    stringLit(): StringLitContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QueryContext extends ParserRuleContext {
    queryTerm(): QueryTermContext;
    queryOrganization(): QueryOrganizationContext;
    ctes(): CtesContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class InsertIntoContext extends ParserRuleContext {
    _path: StringLitContext;
    _options: PropertyListContext;
    KW_INSERT(): TerminalNode;
    KW_OVERWRITE(): TerminalNode | undefined;
    tableName(): TableNameContext | undefined;
    KW_TABLE(): TerminalNode | undefined;
    partitionSpec(): PartitionSpecContext | undefined;
    identifierList(): IdentifierListContext | undefined;
    KW_BY(): TerminalNode | undefined;
    KW_NAME(): TerminalNode | undefined;
    ifNotExists(): IfNotExistsContext | undefined;
    KW_INTO(): TerminalNode | undefined;
    KW_REPLACE(): TerminalNode | undefined;
    whereClause(): WhereClauseContext | undefined;
    KW_DIRECTORY(): TerminalNode | undefined;
    stringLit(): StringLitContext | undefined;
    KW_LOCAL(): TerminalNode | undefined;
    rowFormat(): RowFormatContext | undefined;
    createFileFormat(): CreateFileFormatContext | undefined;
    tableProvider(): TableProviderContext | undefined;
    KW_OPTIONS(): TerminalNode | undefined;
    propertyList(): PropertyListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PartitionSpecLocationContext extends ParserRuleContext {
    partitionSpec(): PartitionSpecContext;
    locationSpec(): LocationSpecContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PartitionSpecContext extends ParserRuleContext {
    KW_PARTITION(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    partitionVal(): PartitionValContext[];
    partitionVal(i: number): PartitionValContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PartitionValContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    EQ(): TerminalNode | undefined;
    constant(): ConstantContext | undefined;
    KW_DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DbSchemaContext extends ParserRuleContext {
    KW_NAMESPACE(): TerminalNode | undefined;
    KW_DATABASE(): TerminalNode | undefined;
    KW_SCHEMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DbSchemasContext extends ParserRuleContext {
    KW_NAMESPACES(): TerminalNode | undefined;
    KW_DATABASES(): TerminalNode | undefined;
    KW_SCHEMAS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DescribeFuncNameContext extends ParserRuleContext {
    identifierReference(): IdentifierReferenceContext | undefined;
    stringLit(): StringLitContext | undefined;
    comparisonOperator(): ComparisonOperatorContext | undefined;
    arithmeticOperator(): ArithmeticOperatorContext | undefined;
    predicateOperator(): PredicateOperatorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DescribeColNameContext extends ParserRuleContext {
    _identifier: IdentifierContext;
    _nameParts: IdentifierContext[];
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class CtesContext extends ParserRuleContext {
    KW_WITH(): TerminalNode;
    namedQuery(): NamedQueryContext[];
    namedQuery(i: number): NamedQueryContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NamedQueryContext extends ParserRuleContext {
    _name: ErrorCapturingIdentifierContext;
    _columnAliases: IdentifierListContext;
    LEFT_PAREN(): TerminalNode;
    query(): QueryContext;
    RIGHT_PAREN(): TerminalNode;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext;
    KW_AS(): TerminalNode | undefined;
    identifierList(): IdentifierListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TableProviderContext extends ParserRuleContext {
    KW_USING(): TerminalNode;
    multipartIdentifier(): MultipartIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class CreateTableClausesContext extends ParserRuleContext {
    _options: ExpressionPropertyListContext;
    _partitioning: PartitionFieldListContext;
    _tableProps: PropertyListContext;
    skewSpec(): SkewSpecContext[];
    skewSpec(i: number): SkewSpecContext;
    bucketSpec(): BucketSpecContext[];
    bucketSpec(i: number): BucketSpecContext;
    rowFormat(): RowFormatContext[];
    rowFormat(i: number): RowFormatContext;
    createFileFormat(): CreateFileFormatContext[];
    createFileFormat(i: number): CreateFileFormatContext;
    locationSpec(): LocationSpecContext[];
    locationSpec(i: number): LocationSpecContext;
    commentSpec(): CommentSpecContext[];
    commentSpec(i: number): CommentSpecContext;
    KW_OPTIONS(): TerminalNode[];
    KW_OPTIONS(i: number): TerminalNode;
    KW_PARTITIONED(): TerminalNode[];
    KW_PARTITIONED(i: number): TerminalNode;
    KW_BY(): TerminalNode[];
    KW_BY(i: number): TerminalNode;
    KW_TBLPROPERTIES(): TerminalNode[];
    KW_TBLPROPERTIES(i: number): TerminalNode;
    expressionPropertyList(): ExpressionPropertyListContext[];
    expressionPropertyList(i: number): ExpressionPropertyListContext;
    partitionFieldList(): PartitionFieldListContext[];
    partitionFieldList(i: number): PartitionFieldListContext;
    propertyList(): PropertyListContext[];
    propertyList(i: number): PropertyListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PropertyListContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    property(): PropertyContext[];
    property(i: number): PropertyContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PropertyContext extends ParserRuleContext {
    _key: PropertyKeyContext;
    _value: PropertyValueContext;
    propertyKey(): PropertyKeyContext;
    propertyValue(): PropertyValueContext | undefined;
    EQ(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PropertyKeyContext extends ParserRuleContext {
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    stringLit(): StringLitContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PropertyValueContext extends ParserRuleContext {
    INTEGER_VALUE(): TerminalNode | undefined;
    DECIMAL_VALUE(): TerminalNode | undefined;
    booleanValue(): BooleanValueContext | undefined;
    stringLit(): StringLitContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ExpressionPropertyListContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    expressionProperty(): ExpressionPropertyContext[];
    expressionProperty(i: number): ExpressionPropertyContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ExpressionPropertyContext extends ParserRuleContext {
    _key: PropertyKeyContext;
    _value: ExpressionContext;
    propertyKey(): PropertyKeyContext;
    expression(): ExpressionContext | undefined;
    EQ(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ConstantListContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    constant(): ConstantContext[];
    constant(i: number): ConstantContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NestedConstantListContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    constantList(): ConstantListContext[];
    constantList(i: number): ConstantListContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class CreateFileFormatContext extends ParserRuleContext {
    KW_STORED(): TerminalNode;
    KW_AS(): TerminalNode | undefined;
    fileFormat(): FileFormatContext | undefined;
    KW_BY(): TerminalNode | undefined;
    storageHandler(): StorageHandlerContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FileFormatContext extends ParserRuleContext {
    _inFmt: StringLitContext;
    _outFmt: StringLitContext;
    KW_INPUTFORMAT(): TerminalNode | undefined;
    KW_OUTPUTFORMAT(): TerminalNode | undefined;
    stringLit(): StringLitContext[];
    stringLit(i: number): StringLitContext;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class StorageHandlerContext extends ParserRuleContext {
    stringLit(): StringLitContext;
    KW_WITH(): TerminalNode | undefined;
    KW_SERDEPROPERTIES(): TerminalNode | undefined;
    propertyList(): PropertyListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ResourceContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    stringLit(): StringLitContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DmlStatementNoWithContext extends ParserRuleContext {
    _target: TableNameContext;
    _targetAlias: TableAliasContext;
    _source: IdentifierReferenceContext;
    _sourceQuery: QueryContext;
    _sourceAlias: TableAliasContext;
    _mergeCondition: BooleanExpressionContext;
    insertInto(): InsertIntoContext | undefined;
    query(): QueryContext | undefined;
    fromClause(): FromClauseContext | undefined;
    multiInsertQueryBody(): MultiInsertQueryBodyContext[];
    multiInsertQueryBody(i: number): MultiInsertQueryBodyContext;
    KW_DELETE(): TerminalNode | undefined;
    KW_FROM(): TerminalNode | undefined;
    tableName(): TableNameContext | undefined;
    tableAlias(): TableAliasContext[];
    tableAlias(i: number): TableAliasContext;
    whereClause(): WhereClauseContext | undefined;
    KW_UPDATE(): TerminalNode | undefined;
    setClause(): SetClauseContext | undefined;
    KW_MERGE(): TerminalNode | undefined;
    KW_INTO(): TerminalNode | undefined;
    KW_USING(): TerminalNode | undefined;
    KW_ON(): TerminalNode | undefined;
    booleanExpression(): BooleanExpressionContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    identifierReference(): IdentifierReferenceContext | undefined;
    matchedClause(): MatchedClauseContext[];
    matchedClause(i: number): MatchedClauseContext;
    notMatchedClause(): NotMatchedClauseContext[];
    notMatchedClause(i: number): NotMatchedClauseContext;
    notMatchedBySourceClause(): NotMatchedBySourceClauseContext[];
    notMatchedBySourceClause(i: number): NotMatchedBySourceClauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DbSchemaNameContext extends ParserRuleContext {
    identifierReference(): IdentifierReferenceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DbSchemaNameCreateContext extends ParserRuleContext {
    identifierReference(): IdentifierReferenceContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TableNameCreateContext extends ParserRuleContext {
    tableIdentifier(): TableIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TableNameContext extends ParserRuleContext {
    tableIdentifier(): TableIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ViewNameCreateContext extends ParserRuleContext {
    viewIdentifier(): ViewIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ViewNameContext extends ParserRuleContext {
    viewIdentifier(): ViewIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IdentifierReferenceContext extends ParserRuleContext {
    KW_IDENTIFIER(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    multipartIdentifier(): MultipartIdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QueryOrganizationContext extends ParserRuleContext {
    _sortItem: SortItemContext;
    _order: SortItemContext[];
    _expression: ExpressionContext;
    _clusterBy: ExpressionContext[];
    _distributeBy: ExpressionContext[];
    _sort: SortItemContext[];
    _limit: ExpressionContext;
    _offset: ExpressionContext;
    KW_ORDER(): TerminalNode | undefined;
    KW_BY(): TerminalNode[];
    KW_BY(i: number): TerminalNode;
    KW_CLUSTER(): TerminalNode | undefined;
    KW_DISTRIBUTE(): TerminalNode | undefined;
    KW_SORT(): TerminalNode | undefined;
    windowClause(): WindowClauseContext | undefined;
    KW_LIMIT(): TerminalNode | undefined;
    KW_OFFSET(): TerminalNode | undefined;
    sortItem(): SortItemContext[];
    sortItem(i: number): SortItemContext;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    KW_ALL(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class MultiInsertQueryBodyContext extends ParserRuleContext {
    insertInto(): InsertIntoContext;
    fromStatementBody(): FromStatementBodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QueryTermContext extends ParserRuleContext {
    _left: QueryTermContext;
    _operator: Token;
    _right: QueryTermContext;
    queryPrimary(): QueryPrimaryContext | undefined;
    queryTerm(): QueryTermContext[];
    queryTerm(i: number): QueryTermContext;
    KW_INTERSECT(): TerminalNode | undefined;
    KW_UNION(): TerminalNode | undefined;
    KW_EXCEPT(): TerminalNode | undefined;
    KW_MINUS(): TerminalNode | undefined;
    setQuantifier(): SetQuantifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QueryPrimaryContext extends ParserRuleContext {
    querySpecification(): QuerySpecificationContext | undefined;
    fromStatement(): FromStatementContext | undefined;
    KW_TABLE(): TerminalNode | undefined;
    tableName(): TableNameContext | undefined;
    inlineTable(): InlineTableContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    query(): QueryContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class SortItemContext extends ParserRuleContext {
    _ordering: Token;
    _nullOrder: Token;
    expression(): ExpressionContext;
    KW_NULLS(): TerminalNode | undefined;
    KW_ASC(): TerminalNode | undefined;
    KW_DESC(): TerminalNode | undefined;
    KW_LAST(): TerminalNode | undefined;
    KW_FIRST(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FromStatementContext extends ParserRuleContext {
    fromClause(): FromClauseContext;
    fromStatementBody(): FromStatementBodyContext[];
    fromStatementBody(i: number): FromStatementBodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FromStatementBodyContext extends ParserRuleContext {
    transformClause(): TransformClauseContext | undefined;
    queryOrganization(): QueryOrganizationContext;
    whereClause(): WhereClauseContext | undefined;
    selectClause(): SelectClauseContext | undefined;
    lateralView(): LateralViewContext[];
    lateralView(i: number): LateralViewContext;
    aggregationClause(): AggregationClauseContext | undefined;
    havingClause(): HavingClauseContext | undefined;
    windowClause(): WindowClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QuerySpecificationContext extends ParserRuleContext {
    transformClause(): TransformClauseContext | undefined;
    fromClause(): FromClauseContext | undefined;
    lateralView(): LateralViewContext[];
    lateralView(i: number): LateralViewContext;
    whereClause(): WhereClauseContext | undefined;
    aggregationClause(): AggregationClauseContext | undefined;
    havingClause(): HavingClauseContext | undefined;
    windowClause(): WindowClauseContext | undefined;
    selectClause(): SelectClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TransformClauseContext extends ParserRuleContext {
    _kind: Token;
    _inRowFormat: RowFormatContext;
    _recordWriter: StringLitContext;
    _script: StringLitContext;
    _outRowFormat: RowFormatContext;
    _recordReader: StringLitContext;
    KW_USING(): TerminalNode;
    stringLit(): StringLitContext[];
    stringLit(i: number): StringLitContext;
    KW_SELECT(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    expressionSeq(): ExpressionSeqContext | undefined;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    KW_TRANSFORM(): TerminalNode | undefined;
    KW_MAP(): TerminalNode | undefined;
    KW_REDUCE(): TerminalNode | undefined;
    KW_RECORDWRITER(): TerminalNode | undefined;
    KW_AS(): TerminalNode | undefined;
    KW_RECORDREADER(): TerminalNode | undefined;
    rowFormat(): RowFormatContext[];
    rowFormat(i: number): RowFormatContext;
    setQuantifier(): SetQuantifierContext | undefined;
    identifierSeq(): IdentifierSeqContext | undefined;
    colTypeList(): ColTypeListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class SelectClauseContext extends ParserRuleContext {
    _hint: HintContext;
    _hints: HintContext[];
    KW_SELECT(): TerminalNode;
    namedExpressionSeq(): NamedExpressionSeqContext;
    setQuantifier(): SetQuantifierContext | undefined;
    hint(): HintContext[];
    hint(i: number): HintContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class SetClauseContext extends ParserRuleContext {
    KW_SET(): TerminalNode;
    assignmentList(): AssignmentListContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class MatchedClauseContext extends ParserRuleContext {
    _matchedCond: BooleanExpressionContext;
    KW_WHEN(): TerminalNode;
    KW_MATCHED(): TerminalNode;
    KW_THEN(): TerminalNode;
    matchedAction(): MatchedActionContext;
    KW_AND(): TerminalNode | undefined;
    booleanExpression(): BooleanExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NotMatchedClauseContext extends ParserRuleContext {
    _notMatchedCond: BooleanExpressionContext;
    KW_WHEN(): TerminalNode;
    KW_NOT(): TerminalNode;
    KW_MATCHED(): TerminalNode;
    KW_THEN(): TerminalNode;
    notMatchedAction(): NotMatchedActionContext;
    KW_BY(): TerminalNode | undefined;
    KW_TARGET(): TerminalNode | undefined;
    KW_AND(): TerminalNode | undefined;
    booleanExpression(): BooleanExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NotMatchedBySourceClauseContext extends ParserRuleContext {
    _notMatchedBySourceCond: BooleanExpressionContext;
    KW_WHEN(): TerminalNode;
    KW_NOT(): TerminalNode;
    KW_MATCHED(): TerminalNode;
    KW_BY(): TerminalNode;
    KW_SOURCE(): TerminalNode;
    KW_THEN(): TerminalNode;
    notMatchedBySourceAction(): NotMatchedBySourceActionContext;
    KW_AND(): TerminalNode | undefined;
    booleanExpression(): BooleanExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class MatchedActionContext extends ParserRuleContext {
    KW_DELETE(): TerminalNode | undefined;
    KW_UPDATE(): TerminalNode | undefined;
    KW_SET(): TerminalNode | undefined;
    ASTERISK(): TerminalNode | undefined;
    assignmentList(): AssignmentListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NotMatchedActionContext extends ParserRuleContext {
    KW_INSERT(): TerminalNode;
    ASTERISK(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    multipartIdentifierList(): MultipartIdentifierListContext | undefined;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    KW_VALUES(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NotMatchedBySourceActionContext extends ParserRuleContext {
    KW_DELETE(): TerminalNode | undefined;
    KW_UPDATE(): TerminalNode | undefined;
    KW_SET(): TerminalNode | undefined;
    assignmentList(): AssignmentListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class AssignmentListContext extends ParserRuleContext {
    assignment(): AssignmentContext[];
    assignment(i: number): AssignmentContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class AssignmentContext extends ParserRuleContext {
    _key: MultipartIdentifierContext;
    _value: ExpressionContext;
    EQ(): TerminalNode;
    multipartIdentifier(): MultipartIdentifierContext;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class WhereClauseContext extends ParserRuleContext {
    KW_WHERE(): TerminalNode;
    booleanExpression(): BooleanExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class HavingClauseContext extends ParserRuleContext {
    KW_HAVING(): TerminalNode;
    booleanExpression(): BooleanExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class HintContext extends ParserRuleContext {
    _hintStatement: HintStatementContext;
    _hintStatements: HintStatementContext[];
    HENT_START(): TerminalNode;
    HENT_END(): TerminalNode;
    hintStatement(): HintStatementContext[];
    hintStatement(i: number): HintStatementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class HintStatementContext extends ParserRuleContext {
    _hintName: IdentifierContext;
    _primaryExpression: PrimaryExpressionContext;
    _parameters: PrimaryExpressionContext[];
    identifier(): IdentifierContext;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    primaryExpression(): PrimaryExpressionContext[];
    primaryExpression(i: number): PrimaryExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FromClauseContext extends ParserRuleContext {
    KW_FROM(): TerminalNode;
    relation(): RelationContext[];
    relation(i: number): RelationContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    lateralView(): LateralViewContext[];
    lateralView(i: number): LateralViewContext;
    pivotClause(): PivotClauseContext | undefined;
    unpivotClause(): UnpivotClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionKindContext extends ParserRuleContext {
    KW_USER(): TerminalNode | undefined;
    KW_SYSTEM(): TerminalNode | undefined;
    KW_ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TemporalClauseContext extends ParserRuleContext {
    _timestamp: ValueExpressionContext;
    KW_AS(): TerminalNode;
    KW_OF(): TerminalNode;
    version(): VersionContext | undefined;
    KW_SYSTEM_VERSION(): TerminalNode | undefined;
    KW_VERSION(): TerminalNode | undefined;
    KW_FOR(): TerminalNode | undefined;
    KW_SYSTEM_TIME(): TerminalNode | undefined;
    KW_TIMESTAMP(): TerminalNode | undefined;
    valueExpression(): ValueExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class AggregationClauseContext extends ParserRuleContext {
    _groupByClause: GroupByClauseContext;
    _groupingExpressionsWithGroupingAnalytics: GroupByClauseContext[];
    _expression: ExpressionContext;
    _groupingExpressions: ExpressionContext[];
    _kind: Token;
    KW_GROUP(): TerminalNode;
    KW_BY(): TerminalNode;
    groupByClause(): GroupByClauseContext[];
    groupByClause(i: number): GroupByClauseContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    KW_WITH(): TerminalNode | undefined;
    KW_SETS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    groupingSet(): GroupingSetContext[];
    groupingSet(i: number): GroupingSetContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    KW_ROLLUP(): TerminalNode | undefined;
    KW_CUBE(): TerminalNode | undefined;
    KW_GROUPING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class GroupByClauseContext extends ParserRuleContext {
    groupingAnalytics(): GroupingAnalyticsContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class GroupingAnalyticsContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    groupingSet(): GroupingSetContext[];
    groupingSet(i: number): GroupingSetContext;
    RIGHT_PAREN(): TerminalNode;
    KW_ROLLUP(): TerminalNode | undefined;
    KW_CUBE(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    KW_GROUPING(): TerminalNode | undefined;
    KW_SETS(): TerminalNode | undefined;
    groupingElement(): GroupingElementContext[];
    groupingElement(i: number): GroupingElementContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class GroupingElementContext extends ParserRuleContext {
    groupingAnalytics(): GroupingAnalyticsContext | undefined;
    groupingSet(): GroupingSetContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class GroupingSetContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PivotClauseContext extends ParserRuleContext {
    _aggregates: NamedExpressionSeqContext;
    _pivotValue: PivotValueContext;
    _pivotValues: PivotValueContext[];
    KW_PIVOT(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    KW_FOR(): TerminalNode;
    pivotColumn(): PivotColumnContext;
    KW_IN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    namedExpressionSeq(): NamedExpressionSeqContext;
    pivotValue(): PivotValueContext[];
    pivotValue(i: number): PivotValueContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PivotColumnContext extends ParserRuleContext {
    _identifier: IdentifierContext;
    _identifiers: IdentifierContext[];
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PivotValueContext extends ParserRuleContext {
    expression(): ExpressionContext;
    identifier(): IdentifierContext | undefined;
    KW_AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotClauseContext extends ParserRuleContext {
    _nullOperator: UnpivotNullClauseContext;
    _operator: UnpivotOperatorContext;
    KW_UNPIVOT(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    unpivotOperator(): UnpivotOperatorContext;
    identifier(): IdentifierContext | undefined;
    unpivotNullClause(): UnpivotNullClauseContext | undefined;
    KW_AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotNullClauseContext extends ParserRuleContext {
    KW_NULLS(): TerminalNode;
    KW_INCLUDE(): TerminalNode | undefined;
    KW_EXCLUDE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotOperatorContext extends ParserRuleContext {
    unpivotSingleValueColumnClause(): UnpivotSingleValueColumnClauseContext | undefined;
    unpivotMultiValueColumnClause(): UnpivotMultiValueColumnClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotSingleValueColumnClauseContext extends ParserRuleContext {
    _unpivotColumnAndAlias: UnpivotColumnAndAliasContext;
    _unpivotColumns: UnpivotColumnAndAliasContext[];
    unpivotValueColumn(): UnpivotValueColumnContext;
    KW_FOR(): TerminalNode;
    unpivotNameColumn(): UnpivotNameColumnContext;
    KW_IN(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    unpivotColumnAndAlias(): UnpivotColumnAndAliasContext[];
    unpivotColumnAndAlias(i: number): UnpivotColumnAndAliasContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotMultiValueColumnClauseContext extends ParserRuleContext {
    _unpivotValueColumn: UnpivotValueColumnContext;
    _unpivotValueColumns: UnpivotValueColumnContext[];
    _unpivotColumnSet: UnpivotColumnSetContext;
    _unpivotColumnSets: UnpivotColumnSetContext[];
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    KW_FOR(): TerminalNode;
    unpivotNameColumn(): UnpivotNameColumnContext;
    KW_IN(): TerminalNode;
    unpivotValueColumn(): UnpivotValueColumnContext[];
    unpivotValueColumn(i: number): UnpivotValueColumnContext;
    unpivotColumnSet(): UnpivotColumnSetContext[];
    unpivotColumnSet(i: number): UnpivotColumnSetContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotColumnSetContext extends ParserRuleContext {
    _unpivotColumn: UnpivotColumnContext;
    _unpivotColumns: UnpivotColumnContext[];
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    unpivotColumn(): UnpivotColumnContext[];
    unpivotColumn(i: number): UnpivotColumnContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    unpivotAlias(): UnpivotAliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotValueColumnContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotNameColumnContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotColumnAndAliasContext extends ParserRuleContext {
    unpivotColumn(): UnpivotColumnContext;
    unpivotAlias(): UnpivotAliasContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotColumnContext extends ParserRuleContext {
    multipartIdentifier(): MultipartIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnpivotAliasContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    KW_AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IfNotExistsContext extends ParserRuleContext {
    KW_IF(): TerminalNode;
    KW_NOT(): TerminalNode;
    KW_EXISTS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IfExistsContext extends ParserRuleContext {
    KW_IF(): TerminalNode;
    KW_EXISTS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class LateralViewContext extends ParserRuleContext {
    _identifier: IdentifierContext;
    _colName: IdentifierContext[];
    KW_LATERAL(): TerminalNode;
    KW_VIEW(): TerminalNode;
    viewName(): ViewNameContext;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    tableAlias(): TableAliasContext;
    KW_OUTER(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    KW_AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class SetQuantifierContext extends ParserRuleContext {
    KW_DISTINCT(): TerminalNode | undefined;
    KW_ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class RelationContext extends ParserRuleContext {
    relationPrimary(): RelationPrimaryContext | undefined;
    KW_LATERAL(): TerminalNode | undefined;
    relationExtension(): RelationExtensionContext[];
    relationExtension(i: number): RelationExtensionContext;
    tableName(): TableNameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class RelationExtensionContext extends ParserRuleContext {
    joinRelation(): JoinRelationContext | undefined;
    pivotClause(): PivotClauseContext | undefined;
    unpivotClause(): UnpivotClauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class JoinRelationContext extends ParserRuleContext {
    _right: RelationPrimaryContext;
    KW_JOIN(): TerminalNode;
    relationPrimary(): RelationPrimaryContext;
    joinType(): JoinTypeContext | undefined;
    KW_LATERAL(): TerminalNode | undefined;
    joinCriteria(): JoinCriteriaContext | undefined;
    KW_NATURAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class JoinTypeContext extends ParserRuleContext {
    KW_INNER(): TerminalNode | undefined;
    KW_CROSS(): TerminalNode | undefined;
    KW_LEFT(): TerminalNode | undefined;
    KW_OUTER(): TerminalNode | undefined;
    KW_SEMI(): TerminalNode | undefined;
    KW_RIGHT(): TerminalNode | undefined;
    KW_FULL(): TerminalNode | undefined;
    KW_ANTI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class JoinCriteriaContext extends ParserRuleContext {
    KW_ON(): TerminalNode | undefined;
    booleanExpression(): BooleanExpressionContext | undefined;
    KW_USING(): TerminalNode | undefined;
    identifierList(): IdentifierListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class SampleContext extends ParserRuleContext {
    _seed: Token;
    KW_TABLESAMPLE(): TerminalNode;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    sampleMethod(): SampleMethodContext | undefined;
    KW_REPEATABLE(): TerminalNode | undefined;
    INTEGER_VALUE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class SampleMethodContext extends ParserRuleContext {
    _negativeSign: Token;
    _percentage: Token;
    _sampleType: Token;
    _numerator: Token;
    _denominator: Token;
    _bytes: ExpressionContext;
    KW_PERCENTLIT(): TerminalNode | undefined;
    INTEGER_VALUE(): TerminalNode[];
    INTEGER_VALUE(i: number): TerminalNode;
    DECIMAL_VALUE(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    KW_ROWS(): TerminalNode | undefined;
    KW_OUT(): TerminalNode | undefined;
    KW_OF(): TerminalNode | undefined;
    KW_BUCKET(): TerminalNode | undefined;
    KW_ON(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    qualifiedName(): QualifiedNameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IdentifierListContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    identifierSeq(): IdentifierSeqContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IdentifierSeqContext extends ParserRuleContext {
    _errorCapturingIdentifier: ErrorCapturingIdentifierContext;
    _ident: ErrorCapturingIdentifierContext[];
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class OrderedIdentifierListContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    orderedIdentifier(): OrderedIdentifierContext[];
    orderedIdentifier(i: number): OrderedIdentifierContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class OrderedIdentifierContext extends ParserRuleContext {
    _ident: ErrorCapturingIdentifierContext;
    _ordering: Token;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext;
    KW_ASC(): TerminalNode | undefined;
    KW_DESC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IdentifierCommentListContext extends ParserRuleContext {
    LEFT_PAREN(): TerminalNode;
    identifierComment(): IdentifierCommentContext[];
    identifierComment(i: number): IdentifierCommentContext;
    RIGHT_PAREN(): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IdentifierCommentContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    commentSpec(): CommentSpecContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class RelationPrimaryContext extends ParserRuleContext {
    identifierReference(): IdentifierReferenceContext | undefined;
    tableAlias(): TableAliasContext | undefined;
    temporalClause(): TemporalClauseContext | undefined;
    sample(): SampleContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    query(): QueryContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    relation(): RelationContext | undefined;
    inlineTable(): InlineTableContext | undefined;
    functionTable(): FunctionTableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class InlineTableContext extends ParserRuleContext {
    KW_VALUES(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    tableAlias(): TableAliasContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionTableSubqueryArgumentContext extends ParserRuleContext {
    KW_TABLE(): TerminalNode;
    tableName(): TableNameContext | undefined;
    tableArgumentPartitioning(): TableArgumentPartitioningContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    query(): QueryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TableArgumentPartitioningContext extends ParserRuleContext {
    _expression: ExpressionContext;
    _partition: ExpressionContext[];
    KW_BY(): TerminalNode[];
    KW_BY(i: number): TerminalNode;
    KW_WITH(): TerminalNode | undefined;
    KW_SINGLE(): TerminalNode | undefined;
    KW_PARTITION(): TerminalNode | undefined;
    KW_ORDER(): TerminalNode | undefined;
    KW_SORT(): TerminalNode | undefined;
    KW_DISTRIBUTE(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    sortItem(): SortItemContext[];
    sortItem(i: number): SortItemContext;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionTableNamedArgumentExpressionContext extends ParserRuleContext {
    _key: IdentifierContext;
    _table: FunctionTableSubqueryArgumentContext;
    FAT_ARROW(): TerminalNode;
    identifier(): IdentifierContext;
    functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionTableReferenceArgumentContext extends ParserRuleContext {
    functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext | undefined;
    functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionTableArgumentContext extends ParserRuleContext {
    functionTableReferenceArgument(): FunctionTableReferenceArgumentContext | undefined;
    functionArgument(): FunctionArgumentContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionTableContext extends ParserRuleContext {
    functionName(): FunctionNameContext;
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    tableAlias(): TableAliasContext;
    functionTableArgument(): FunctionTableArgumentContext[];
    functionTableArgument(i: number): FunctionTableArgumentContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TableAliasContext extends ParserRuleContext {
    strictIdentifier(): StrictIdentifierContext | undefined;
    KW_AS(): TerminalNode | undefined;
    identifierList(): IdentifierListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class RowFormatContext extends ParserRuleContext {
    _name: StringLitContext;
    _props: PropertyListContext;
    _fieldsTerminatedBy: StringLitContext;
    _escapedBy: StringLitContext;
    _collectionItemsTerminatedBy: StringLitContext;
    _keysTerminatedBy: StringLitContext;
    _linesSeparatedBy: StringLitContext;
    _nullDefinedAs: StringLitContext;
    KW_ROW(): TerminalNode;
    KW_FORMAT(): TerminalNode;
    KW_SERDE(): TerminalNode | undefined;
    stringLit(): StringLitContext[];
    stringLit(i: number): StringLitContext;
    KW_WITH(): TerminalNode | undefined;
    KW_SERDEPROPERTIES(): TerminalNode | undefined;
    propertyList(): PropertyListContext | undefined;
    KW_DELIMITED(): TerminalNode | undefined;
    KW_FIELDS(): TerminalNode | undefined;
    KW_TERMINATED(): TerminalNode[];
    KW_TERMINATED(i: number): TerminalNode;
    KW_BY(): TerminalNode[];
    KW_BY(i: number): TerminalNode;
    KW_COLLECTION(): TerminalNode | undefined;
    KW_ITEMS(): TerminalNode | undefined;
    KW_MAP(): TerminalNode | undefined;
    KW_KEYS(): TerminalNode | undefined;
    KW_LINES(): TerminalNode | undefined;
    KW_NULL(): TerminalNode | undefined;
    KW_DEFINED(): TerminalNode | undefined;
    KW_AS(): TerminalNode | undefined;
    KW_ESCAPED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class MultipartIdentifierListContext extends ParserRuleContext {
    multipartIdentifier(): MultipartIdentifierContext[];
    multipartIdentifier(i: number): MultipartIdentifierContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class MultipartIdentifierContext extends ParserRuleContext {
    _errorCapturingIdentifier: ErrorCapturingIdentifierContext;
    _parts: ErrorCapturingIdentifierContext[];
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class MultipartIdentifierPropertyListContext extends ParserRuleContext {
    multipartIdentifierProperty(): MultipartIdentifierPropertyContext[];
    multipartIdentifierProperty(i: number): MultipartIdentifierPropertyContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class MultipartIdentifierPropertyContext extends ParserRuleContext {
    _options: PropertyListContext;
    multipartIdentifier(): MultipartIdentifierContext;
    KW_OPTIONS(): TerminalNode | undefined;
    propertyList(): PropertyListContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TableIdentifierContext extends ParserRuleContext {
    _db: ErrorCapturingIdentifierContext;
    _table: ErrorCapturingIdentifierContext;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ViewIdentifierContext extends ParserRuleContext {
    _db: ErrorCapturingIdentifierContext;
    _view: ErrorCapturingIdentifierContext;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NamedExpressionContext extends ParserRuleContext {
    _name: ErrorCapturingIdentifierContext;
    expression(): ExpressionContext;
    identifierList(): IdentifierListContext | undefined;
    KW_AS(): TerminalNode | undefined;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NamedExpressionSeqContext extends ParserRuleContext {
    namedExpression(): NamedExpressionContext[];
    namedExpression(i: number): NamedExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PartitionFieldListContext extends ParserRuleContext {
    _partitionField: PartitionFieldContext;
    _fields: PartitionFieldContext[];
    LEFT_PAREN(): TerminalNode;
    RIGHT_PAREN(): TerminalNode;
    partitionField(): PartitionFieldContext[];
    partitionField(i: number): PartitionFieldContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PartitionFieldContext extends ParserRuleContext {
    transform(): TransformContext | undefined;
    colType(): ColTypeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TransformContext extends ParserRuleContext {
    _transformName: IdentifierContext;
    qualifiedName(): QualifiedNameContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    transformArgument(): TransformArgumentContext[];
    transformArgument(i: number): TransformArgumentContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TransformArgumentContext extends ParserRuleContext {
    qualifiedName(): QualifiedNameContext | undefined;
    constant(): ConstantContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ExpressionContext extends ParserRuleContext {
    booleanExpression(): BooleanExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NamedArgumentExpressionContext extends ParserRuleContext {
    _key: IdentifierContext;
    _value: ExpressionContext;
    FAT_ARROW(): TerminalNode;
    identifier(): IdentifierContext;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionArgumentContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    namedArgumentExpression(): NamedArgumentExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ExpressionSeqContext extends ParserRuleContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class BooleanExpressionContext extends ParserRuleContext {
    _left: BooleanExpressionContext;
    _operator: Token;
    _right: BooleanExpressionContext;
    booleanExpression(): BooleanExpressionContext[];
    booleanExpression(i: number): BooleanExpressionContext;
    KW_NOT(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    KW_EXISTS(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    query(): QueryContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    valueExpression(): ValueExpressionContext | undefined;
    predicate(): PredicateContext | undefined;
    KW_AND(): TerminalNode | undefined;
    KW_OR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PredicateContext extends ParserRuleContext {
    _kind: Token;
    _lower: ValueExpressionContext;
    _upper: ValueExpressionContext;
    _pattern: ValueExpressionContext;
    _quantifier: Token;
    _escapeChar: StringLitContext;
    _right: ValueExpressionContext;
    KW_AND(): TerminalNode | undefined;
    KW_BETWEEN(): TerminalNode | undefined;
    valueExpression(): ValueExpressionContext[];
    valueExpression(i: number): ValueExpressionContext;
    KW_NOT(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    RIGHT_PAREN(): TerminalNode | undefined;
    KW_IN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    query(): QueryContext | undefined;
    KW_RLIKE(): TerminalNode | undefined;
    KW_REGEXP(): TerminalNode | undefined;
    KW_LIKE(): TerminalNode | undefined;
    KW_ILIKE(): TerminalNode | undefined;
    KW_ANY(): TerminalNode | undefined;
    KW_SOME(): TerminalNode | undefined;
    KW_ALL(): TerminalNode | undefined;
    KW_ESCAPE(): TerminalNode | undefined;
    stringLit(): StringLitContext | undefined;
    KW_IS(): TerminalNode | undefined;
    KW_NULL(): TerminalNode | undefined;
    KW_TRUE(): TerminalNode | undefined;
    KW_FALSE(): TerminalNode | undefined;
    KW_UNKNOWN(): TerminalNode | undefined;
    KW_FROM(): TerminalNode | undefined;
    KW_DISTINCT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ValueExpressionContext extends ParserRuleContext {
    _left: ValueExpressionContext;
    _operator: Token;
    _right: ValueExpressionContext;
    primaryExpression(): PrimaryExpressionContext | undefined;
    valueExpression(): ValueExpressionContext[];
    valueExpression(i: number): ValueExpressionContext;
    MINUS(): TerminalNode | undefined;
    PLUS(): TerminalNode | undefined;
    TILDE(): TerminalNode | undefined;
    ASTERISK(): TerminalNode | undefined;
    SLASH(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    KW_DIV(): TerminalNode | undefined;
    CONCAT_PIPE(): TerminalNode | undefined;
    AMPERSAND(): TerminalNode | undefined;
    HAT(): TerminalNode | undefined;
    PIPE(): TerminalNode | undefined;
    comparisonOperator(): ComparisonOperatorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DatetimeUnitContext extends ParserRuleContext {
    KW_YEAR(): TerminalNode | undefined;
    KW_QUARTER(): TerminalNode | undefined;
    KW_MONTH(): TerminalNode | undefined;
    KW_WEEK(): TerminalNode | undefined;
    KW_DAY(): TerminalNode | undefined;
    KW_DAYOFYEAR(): TerminalNode | undefined;
    KW_HOUR(): TerminalNode | undefined;
    KW_MINUTE(): TerminalNode | undefined;
    KW_SECOND(): TerminalNode | undefined;
    KW_MILLISECOND(): TerminalNode | undefined;
    KW_MICROSECOND(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PrimaryExpressionContext extends ParserRuleContext {
    _value: PrimaryExpressionContext;
    _base: PrimaryExpressionContext;
    _name: Token;
    _unit: DatetimeUnitContext;
    _invalidUnit: StringLitContext;
    _unitsAmount: ValueExpressionContext;
    _timestamp: ValueExpressionContext;
    _startTimestamp: ValueExpressionContext;
    _endTimestamp: ValueExpressionContext;
    _elseExpression: ExpressionContext;
    _substr: ValueExpressionContext;
    _str: ValueExpressionContext;
    _where: BooleanExpressionContext;
    _nullsOption: Token;
    _field: IdentifierContext;
    _source: ValueExpressionContext;
    _pos: ValueExpressionContext;
    _len: ValueExpressionContext;
    _trimOption: Token;
    _trimStr: ValueExpressionContext;
    _srcStr: ValueExpressionContext;
    _input: ValueExpressionContext;
    _replace: ValueExpressionContext;
    _position: ValueExpressionContext;
    _length: ValueExpressionContext;
    _percentage: ValueExpressionContext;
    _index: ValueExpressionContext;
    _fieldName: IdentifierContext;
    KW_CURRENT_DATE(): TerminalNode | undefined;
    KW_CURRENT_TIMESTAMP(): TerminalNode | undefined;
    KW_CURRENT_USER(): TerminalNode | undefined;
    KW_USER(): TerminalNode | undefined;
    KW_SESSION_USER(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode[];
    LEFT_PAREN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode[];
    RIGHT_PAREN(i: number): TerminalNode;
    valueExpression(): ValueExpressionContext[];
    valueExpression(i: number): ValueExpressionContext;
    KW_TIMESTAMPADD(): TerminalNode | undefined;
    KW_DATEADD(): TerminalNode | undefined;
    KW_DATE_ADD(): TerminalNode | undefined;
    datetimeUnit(): DatetimeUnitContext | undefined;
    stringLit(): StringLitContext | undefined;
    KW_TIMESTAMPDIFF(): TerminalNode | undefined;
    KW_DATEDIFF(): TerminalNode | undefined;
    KW_DATE_DIFF(): TerminalNode | undefined;
    KW_TIMEDIFF(): TerminalNode | undefined;
    KW_CASE(): TerminalNode | undefined;
    KW_END(): TerminalNode | undefined;
    whenClause(): WhenClauseContext[];
    whenClause(i: number): WhenClauseContext;
    KW_ELSE(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    KW_AS(): TerminalNode | undefined;
    dataType(): DataTypeContext | undefined;
    KW_CAST(): TerminalNode | undefined;
    KW_TRY_CAST(): TerminalNode | undefined;
    KW_STRUCT(): TerminalNode | undefined;
    namedExpression(): NamedExpressionContext[];
    namedExpression(i: number): NamedExpressionContext;
    KW_FIRST(): TerminalNode | undefined;
    KW_IGNORE(): TerminalNode | undefined;
    KW_NULLS(): TerminalNode | undefined;
    KW_ANY_VALUE(): TerminalNode | undefined;
    KW_LAST(): TerminalNode | undefined;
    KW_POSITION(): TerminalNode | undefined;
    KW_IN(): TerminalNode | undefined;
    constant(): ConstantContext | undefined;
    ASTERISK(): TerminalNode | undefined;
    qualifiedName(): QualifiedNameContext | undefined;
    DOT(): TerminalNode | undefined;
    query(): QueryContext | undefined;
    KW_IDENTIFIER(): TerminalNode | undefined;
    functionName(): FunctionNameContext | undefined;
    functionArgument(): FunctionArgumentContext[];
    functionArgument(i: number): FunctionArgumentContext;
    KW_FILTER(): TerminalNode | undefined;
    KW_WHERE(): TerminalNode | undefined;
    KW_OVER(): TerminalNode | undefined;
    windowSpec(): WindowSpecContext | undefined;
    booleanExpression(): BooleanExpressionContext | undefined;
    KW_RESPECT(): TerminalNode | undefined;
    setQuantifier(): SetQuantifierContext | undefined;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    ARROW(): TerminalNode | undefined;
    LEFT_BRACKET(): TerminalNode | undefined;
    RIGHT_BRACKET(): TerminalNode | undefined;
    primaryExpression(): PrimaryExpressionContext | undefined;
    KW_EXTRACT(): TerminalNode | undefined;
    KW_FROM(): TerminalNode | undefined;
    KW_SUBSTR(): TerminalNode | undefined;
    KW_SUBSTRING(): TerminalNode | undefined;
    KW_FOR(): TerminalNode | undefined;
    KW_TRIM(): TerminalNode | undefined;
    KW_BOTH(): TerminalNode | undefined;
    KW_LEADING(): TerminalNode | undefined;
    KW_TRAILING(): TerminalNode | undefined;
    KW_OVERLAY(): TerminalNode | undefined;
    KW_PLACING(): TerminalNode | undefined;
    KW_WITHIN(): TerminalNode | undefined;
    KW_GROUP(): TerminalNode | undefined;
    KW_ORDER(): TerminalNode | undefined;
    KW_BY(): TerminalNode | undefined;
    sortItem(): SortItemContext | undefined;
    KW_PERCENTILE_CONT(): TerminalNode | undefined;
    KW_PERCENTILE_DISC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class LiteralTypeContext extends ParserRuleContext {
    _unsupportedType: IdentifierContext;
    KW_DATE(): TerminalNode | undefined;
    KW_TIMESTAMP(): TerminalNode | undefined;
    KW_TIMESTAMP_LTZ(): TerminalNode | undefined;
    KW_TIMESTAMP_NTZ(): TerminalNode | undefined;
    KW_INTERVAL(): TerminalNode | undefined;
    KW_BINARY_HEX(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ConstantContext extends ParserRuleContext {
    KW_NULL(): TerminalNode | undefined;
    QUESTION(): TerminalNode | undefined;
    COLON(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    interval(): IntervalContext | undefined;
    literalType(): LiteralTypeContext | undefined;
    stringLit(): StringLitContext[];
    stringLit(i: number): StringLitContext;
    number(): NumberContext | undefined;
    booleanValue(): BooleanValueContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ComparisonOperatorContext extends ParserRuleContext {
    EQ(): TerminalNode | undefined;
    NEQ(): TerminalNode | undefined;
    NEQJ(): TerminalNode | undefined;
    LT(): TerminalNode | undefined;
    LTE(): TerminalNode | undefined;
    GT(): TerminalNode | undefined;
    GTE(): TerminalNode | undefined;
    NSEQ(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ArithmeticOperatorContext extends ParserRuleContext {
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    ASTERISK(): TerminalNode | undefined;
    SLASH(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    KW_DIV(): TerminalNode | undefined;
    TILDE(): TerminalNode | undefined;
    AMPERSAND(): TerminalNode | undefined;
    PIPE(): TerminalNode | undefined;
    CONCAT_PIPE(): TerminalNode | undefined;
    HAT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class PredicateOperatorContext extends ParserRuleContext {
    KW_OR(): TerminalNode | undefined;
    KW_AND(): TerminalNode | undefined;
    KW_IN(): TerminalNode | undefined;
    KW_NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class BooleanValueContext extends ParserRuleContext {
    KW_TRUE(): TerminalNode | undefined;
    KW_FALSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IntervalContext extends ParserRuleContext {
    KW_INTERVAL(): TerminalNode;
    errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext | undefined;
    errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext {
    _body: MultiUnitsIntervalContext;
    multiUnitsInterval(): MultiUnitsIntervalContext;
    unitToUnitInterval(): UnitToUnitIntervalContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class MultiUnitsIntervalContext extends ParserRuleContext {
    _unitInMultiUnits: UnitInMultiUnitsContext;
    _unit: UnitInMultiUnitsContext[];
    intervalValue(): IntervalValueContext[];
    intervalValue(i: number): IntervalValueContext;
    unitInMultiUnits(): UnitInMultiUnitsContext[];
    unitInMultiUnits(i: number): UnitInMultiUnitsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext {
    _body: UnitToUnitIntervalContext;
    _error1: MultiUnitsIntervalContext;
    _error2: UnitToUnitIntervalContext;
    unitToUnitInterval(): UnitToUnitIntervalContext[];
    unitToUnitInterval(i: number): UnitToUnitIntervalContext;
    multiUnitsInterval(): MultiUnitsIntervalContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnitToUnitIntervalContext extends ParserRuleContext {
    _value: IntervalValueContext;
    unitInUnitToUnit(): UnitInUnitToUnitContext[];
    unitInUnitToUnit(i: number): UnitInUnitToUnitContext;
    KW_TO(): TerminalNode;
    intervalValue(): IntervalValueContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IntervalValueContext extends ParserRuleContext {
    INTEGER_VALUE(): TerminalNode | undefined;
    DECIMAL_VALUE(): TerminalNode | undefined;
    stringLit(): StringLitContext | undefined;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnitInMultiUnitsContext extends ParserRuleContext {
    KW_NANOSECOND(): TerminalNode | undefined;
    KW_NANOSECONDS(): TerminalNode | undefined;
    KW_MICROSECOND(): TerminalNode | undefined;
    KW_MICROSECONDS(): TerminalNode | undefined;
    KW_MILLISECOND(): TerminalNode | undefined;
    KW_MILLISECONDS(): TerminalNode | undefined;
    KW_SECOND(): TerminalNode | undefined;
    KW_SECONDS(): TerminalNode | undefined;
    KW_MINUTE(): TerminalNode | undefined;
    KW_MINUTES(): TerminalNode | undefined;
    KW_HOUR(): TerminalNode | undefined;
    KW_HOURS(): TerminalNode | undefined;
    KW_DAY(): TerminalNode | undefined;
    KW_DAYS(): TerminalNode | undefined;
    KW_WEEK(): TerminalNode | undefined;
    KW_WEEKS(): TerminalNode | undefined;
    KW_MONTH(): TerminalNode | undefined;
    KW_MONTHS(): TerminalNode | undefined;
    KW_YEAR(): TerminalNode | undefined;
    KW_YEARS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class UnitInUnitToUnitContext extends ParserRuleContext {
    KW_SECOND(): TerminalNode | undefined;
    KW_MINUTE(): TerminalNode | undefined;
    KW_HOUR(): TerminalNode | undefined;
    KW_DAY(): TerminalNode | undefined;
    KW_MONTH(): TerminalNode | undefined;
    KW_YEAR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ColPositionContext extends ParserRuleContext {
    _position: Token;
    _afterCol: ErrorCapturingIdentifierContext;
    KW_FIRST(): TerminalNode | undefined;
    KW_AFTER(): TerminalNode | undefined;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class TypeContext extends ParserRuleContext {
    _unsupportedType: IdentifierContext;
    KW_BOOLEAN(): TerminalNode | undefined;
    KW_TINYINT(): TerminalNode | undefined;
    KW_BYTE(): TerminalNode | undefined;
    KW_SMALLINT(): TerminalNode | undefined;
    KW_SHORT(): TerminalNode | undefined;
    KW_INT(): TerminalNode | undefined;
    KW_INTEGER(): TerminalNode | undefined;
    KW_BIGINT(): TerminalNode | undefined;
    KW_LONG(): TerminalNode | undefined;
    KW_FLOAT(): TerminalNode | undefined;
    KW_REAL(): TerminalNode | undefined;
    KW_DOUBLE(): TerminalNode | undefined;
    KW_DATE(): TerminalNode | undefined;
    KW_TIMESTAMP(): TerminalNode | undefined;
    KW_TIMESTAMP_NTZ(): TerminalNode | undefined;
    KW_TIMESTAMP_LTZ(): TerminalNode | undefined;
    KW_STRING(): TerminalNode | undefined;
    KW_CHARACTER(): TerminalNode | undefined;
    KW_CHAR(): TerminalNode | undefined;
    KW_VARCHAR(): TerminalNode | undefined;
    KW_BINARY(): TerminalNode | undefined;
    KW_DECIMAL(): TerminalNode | undefined;
    KW_DEC(): TerminalNode | undefined;
    KW_NUMERIC(): TerminalNode | undefined;
    KW_VOID(): TerminalNode | undefined;
    KW_INTERVAL(): TerminalNode | undefined;
    KW_ARRAY(): TerminalNode | undefined;
    KW_STRUCT(): TerminalNode | undefined;
    KW_MAP(): TerminalNode | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DataTypeContext extends ParserRuleContext {
    _complex: Token;
    LT(): TerminalNode | undefined;
    dataType(): DataTypeContext[];
    dataType(i: number): DataTypeContext;
    GT(): TerminalNode | undefined;
    KW_ARRAY(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    KW_MAP(): TerminalNode | undefined;
    KW_STRUCT(): TerminalNode | undefined;
    NEQ(): TerminalNode | undefined;
    complexColTypeList(): ComplexColTypeListContext | undefined;
    KW_INTERVAL(): TerminalNode | undefined;
    KW_YEAR(): TerminalNode | undefined;
    KW_MONTH(): TerminalNode[];
    KW_MONTH(i: number): TerminalNode;
    KW_TO(): TerminalNode | undefined;
    KW_DAY(): TerminalNode | undefined;
    KW_HOUR(): TerminalNode[];
    KW_HOUR(i: number): TerminalNode;
    KW_MINUTE(): TerminalNode[];
    KW_MINUTE(i: number): TerminalNode;
    KW_SECOND(): TerminalNode[];
    KW_SECOND(i: number): TerminalNode;
    type(): TypeContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    INTEGER_VALUE(): TerminalNode[];
    INTEGER_VALUE(i: number): TerminalNode;
    RIGHT_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QualifiedColTypeWithPositionListContext extends ParserRuleContext {
    qualifiedColTypeWithPosition(): QualifiedColTypeWithPositionContext[];
    qualifiedColTypeWithPosition(i: number): QualifiedColTypeWithPositionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QualifiedColTypeWithPositionContext extends ParserRuleContext {
    _name: MultipartIdentifierContext;
    dataType(): DataTypeContext;
    multipartIdentifier(): MultipartIdentifierContext;
    colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ColDefinitionDescriptorWithPositionContext extends ParserRuleContext {
    KW_NOT(): TerminalNode | undefined;
    KW_NULL(): TerminalNode | undefined;
    defaultExpression(): DefaultExpressionContext | undefined;
    commentSpec(): CommentSpecContext | undefined;
    colPosition(): ColPositionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class DefaultExpressionContext extends ParserRuleContext {
    KW_DEFAULT(): TerminalNode;
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class VariableDefaultExpressionContext extends ParserRuleContext {
    expression(): ExpressionContext;
    KW_DEFAULT(): TerminalNode | undefined;
    EQ(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ColTypeListContext extends ParserRuleContext {
    colType(): ColTypeContext[];
    colType(i: number): ColTypeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ColTypeContext extends ParserRuleContext {
    _colName: ErrorCapturingIdentifierContext;
    dataType(): DataTypeContext;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext;
    KW_NOT(): TerminalNode | undefined;
    KW_NULL(): TerminalNode | undefined;
    commentSpec(): CommentSpecContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class CreateOrReplaceTableColTypeListContext extends ParserRuleContext {
    createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext[];
    createOrReplaceTableColType(i: number): CreateOrReplaceTableColTypeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class CreateOrReplaceTableColTypeContext extends ParserRuleContext {
    _colName: ErrorCapturingIdentifierContext;
    dataType(): DataTypeContext;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext;
    colDefinitionOption(): ColDefinitionOptionContext[];
    colDefinitionOption(i: number): ColDefinitionOptionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ColDefinitionOptionContext extends ParserRuleContext {
    KW_NOT(): TerminalNode | undefined;
    KW_NULL(): TerminalNode | undefined;
    defaultExpression(): DefaultExpressionContext | undefined;
    generationExpression(): GenerationExpressionContext | undefined;
    commentSpec(): CommentSpecContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class GenerationExpressionContext extends ParserRuleContext {
    KW_GENERATED(): TerminalNode;
    KW_ALWAYS(): TerminalNode;
    KW_AS(): TerminalNode;
    LEFT_PAREN(): TerminalNode;
    expression(): ExpressionContext;
    RIGHT_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ComplexColTypeListContext extends ParserRuleContext {
    complexColType(): ComplexColTypeContext[];
    complexColType(i: number): ComplexColTypeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ComplexColTypeContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    dataType(): DataTypeContext;
    COLON(): TerminalNode | undefined;
    KW_NOT(): TerminalNode | undefined;
    KW_NULL(): TerminalNode | undefined;
    commentSpec(): CommentSpecContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class WhenClauseContext extends ParserRuleContext {
    _condition: ExpressionContext;
    _result: ExpressionContext;
    KW_WHEN(): TerminalNode;
    KW_THEN(): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class WindowClauseContext extends ParserRuleContext {
    KW_WINDOW(): TerminalNode;
    namedWindow(): NamedWindowContext[];
    namedWindow(i: number): NamedWindowContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NamedWindowContext extends ParserRuleContext {
    _name: ErrorCapturingIdentifierContext;
    KW_AS(): TerminalNode;
    windowSpec(): WindowSpecContext;
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class WindowSpecContext extends ParserRuleContext {
    _name: ErrorCapturingIdentifierContext;
    _expression: ExpressionContext;
    _partition: ExpressionContext[];
    errorCapturingIdentifier(): ErrorCapturingIdentifierContext | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    KW_CLUSTER(): TerminalNode | undefined;
    KW_BY(): TerminalNode[];
    KW_BY(i: number): TerminalNode;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    windowFrame(): WindowFrameContext | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    sortItem(): SortItemContext[];
    sortItem(i: number): SortItemContext;
    KW_PARTITION(): TerminalNode | undefined;
    KW_DISTRIBUTE(): TerminalNode | undefined;
    KW_ORDER(): TerminalNode | undefined;
    KW_SORT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class WindowFrameContext extends ParserRuleContext {
    _frameType: Token;
    _start_: FrameBoundContext;
    _end: FrameBoundContext;
    KW_RANGE(): TerminalNode | undefined;
    frameBound(): FrameBoundContext[];
    frameBound(i: number): FrameBoundContext;
    KW_ROWS(): TerminalNode | undefined;
    KW_BETWEEN(): TerminalNode | undefined;
    KW_AND(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FrameBoundContext extends ParserRuleContext {
    _boundType: Token;
    KW_UNBOUNDED(): TerminalNode | undefined;
    KW_PRECEDING(): TerminalNode | undefined;
    KW_FOLLOWING(): TerminalNode | undefined;
    KW_ROW(): TerminalNode | undefined;
    KW_CURRENT(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QualifiedNameListContext extends ParserRuleContext {
    qualifiedName(): QualifiedNameContext[];
    qualifiedName(i: number): QualifiedNameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionNameContext extends ParserRuleContext {
    KW_IDENTIFIER(): TerminalNode | undefined;
    LEFT_PAREN(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    RIGHT_PAREN(): TerminalNode | undefined;
    qualifiedName(): QualifiedNameContext | undefined;
    KW_FILTER(): TerminalNode | undefined;
    KW_LEFT(): TerminalNode | undefined;
    KW_RIGHT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class FunctionNameCreateContext extends ParserRuleContext {
    qualifiedName(): QualifiedNameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QualifiedNameContext extends ParserRuleContext {
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ErrorCapturingIdentifierContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
    MINUS(): TerminalNode[];
    MINUS(i: number): TerminalNode;
    identifier(): IdentifierContext[];
    identifier(i: number): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class IdentifierContext extends ParserRuleContext {
    strictIdentifier(): StrictIdentifierContext | undefined;
    strictNonReserved(): StrictNonReservedContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class StrictIdentifierContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode | undefined;
    quotedIdentifier(): QuotedIdentifierContext | undefined;
    ansiNonReserved(): AnsiNonReservedContext | undefined;
    nonReserved(): NonReservedContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class QuotedIdentifierContext extends ParserRuleContext {
    BACKQUOTED_IDENTIFIER(): TerminalNode | undefined;
    DOUBLEQUOTED_STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class BackQuotedIdentifierContext extends ParserRuleContext {
    BACKQUOTED_IDENTIFIER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NumberContext extends ParserRuleContext {
    EXPONENT_VALUE(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    DECIMAL_VALUE(): TerminalNode | undefined;
    INTEGER_VALUE(): TerminalNode | undefined;
    BIGINT_LITERAL(): TerminalNode | undefined;
    SMALLINT_LITERAL(): TerminalNode | undefined;
    TINYINT_LITERAL(): TerminalNode | undefined;
    DOUBLE_LITERAL(): TerminalNode | undefined;
    FLOAT_LITERAL(): TerminalNode | undefined;
    BIGDECIMAL_LITERAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class AlterColumnActionContext extends ParserRuleContext {
    _setOrDrop: Token;
    _dropDefault: Token;
    KW_TYPE(): TerminalNode | undefined;
    dataType(): DataTypeContext | undefined;
    commentSpec(): CommentSpecContext | undefined;
    colPosition(): ColPositionContext | undefined;
    KW_NOT(): TerminalNode | undefined;
    KW_NULL(): TerminalNode | undefined;
    KW_SET(): TerminalNode | undefined;
    KW_DROP(): TerminalNode | undefined;
    defaultExpression(): DefaultExpressionContext | undefined;
    KW_DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class StringLitContext extends ParserRuleContext {
    STRING_LITERAL(): TerminalNode | undefined;
    DOUBLEQUOTED_STRING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class CommentContext extends ParserRuleContext {
    stringLit(): StringLitContext | undefined;
    KW_NULL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class VersionContext extends ParserRuleContext {
    INTEGER_VALUE(): TerminalNode | undefined;
    stringLit(): StringLitContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class AnsiNonReservedContext extends ParserRuleContext {
    KW_ADD(): TerminalNode | undefined;
    KW_AFTER(): TerminalNode | undefined;
    KW_ALTER(): TerminalNode | undefined;
    KW_ALWAYS(): TerminalNode | undefined;
    KW_ANALYZE(): TerminalNode | undefined;
    KW_ANTI(): TerminalNode | undefined;
    KW_ANY_VALUE(): TerminalNode | undefined;
    KW_ARCHIVE(): TerminalNode | undefined;
    KW_ARRAY(): TerminalNode | undefined;
    KW_ASC(): TerminalNode | undefined;
    KW_AT(): TerminalNode | undefined;
    KW_BETWEEN(): TerminalNode | undefined;
    KW_BIGINT(): TerminalNode | undefined;
    KW_BINARY(): TerminalNode | undefined;
    KW_BINARY_HEX(): TerminalNode | undefined;
    KW_BOOLEAN(): TerminalNode | undefined;
    KW_BUCKET(): TerminalNode | undefined;
    KW_BUCKETS(): TerminalNode | undefined;
    KW_BY(): TerminalNode | undefined;
    KW_BYTE(): TerminalNode | undefined;
    KW_CACHE(): TerminalNode | undefined;
    KW_CASCADE(): TerminalNode | undefined;
    KW_CATALOG(): TerminalNode | undefined;
    KW_CATALOGS(): TerminalNode | undefined;
    KW_CHANGE(): TerminalNode | undefined;
    KW_CHAR(): TerminalNode | undefined;
    KW_CHARACTER(): TerminalNode | undefined;
    KW_CLEAR(): TerminalNode | undefined;
    KW_CLUSTER(): TerminalNode | undefined;
    KW_CLUSTERED(): TerminalNode | undefined;
    KW_CODEGEN(): TerminalNode | undefined;
    KW_COLLECTION(): TerminalNode | undefined;
    KW_COLUMNS(): TerminalNode | undefined;
    KW_COMMENT(): TerminalNode | undefined;
    KW_COMMIT(): TerminalNode | undefined;
    KW_COMPACT(): TerminalNode | undefined;
    KW_COMPACTIONS(): TerminalNode | undefined;
    KW_COMPUTE(): TerminalNode | undefined;
    KW_CONCATENATE(): TerminalNode | undefined;
    KW_COST(): TerminalNode | undefined;
    KW_CUBE(): TerminalNode | undefined;
    KW_CURRENT(): TerminalNode | undefined;
    KW_DATA(): TerminalNode | undefined;
    KW_DATABASE(): TerminalNode | undefined;
    KW_DATABASES(): TerminalNode | undefined;
    KW_DATE(): TerminalNode | undefined;
    KW_DATEADD(): TerminalNode | undefined;
    KW_DATE_ADD(): TerminalNode | undefined;
    KW_DATEDIFF(): TerminalNode | undefined;
    KW_DATE_DIFF(): TerminalNode | undefined;
    KW_DAY(): TerminalNode | undefined;
    KW_DAYS(): TerminalNode | undefined;
    KW_DAYOFYEAR(): TerminalNode | undefined;
    KW_DBPROPERTIES(): TerminalNode | undefined;
    KW_DEC(): TerminalNode | undefined;
    KW_DECIMAL(): TerminalNode | undefined;
    KW_DECLARE(): TerminalNode | undefined;
    KW_DEFAULT(): TerminalNode | undefined;
    KW_DEFINED(): TerminalNode | undefined;
    KW_DELETE(): TerminalNode | undefined;
    KW_DELIMITED(): TerminalNode | undefined;
    KW_DESC(): TerminalNode | undefined;
    KW_DESCRIBE(): TerminalNode | undefined;
    KW_DFS(): TerminalNode | undefined;
    KW_DIRECTORIES(): TerminalNode | undefined;
    KW_DIRECTORY(): TerminalNode | undefined;
    KW_DISTRIBUTE(): TerminalNode | undefined;
    KW_DIV(): TerminalNode | undefined;
    KW_DOUBLE(): TerminalNode | undefined;
    KW_DROP(): TerminalNode | undefined;
    KW_ESCAPED(): TerminalNode | undefined;
    KW_EXCHANGE(): TerminalNode | undefined;
    KW_EXCLUDE(): TerminalNode | undefined;
    KW_EXISTS(): TerminalNode | undefined;
    KW_EXPLAIN(): TerminalNode | undefined;
    KW_EXPORT(): TerminalNode | undefined;
    KW_EXTENDED(): TerminalNode | undefined;
    KW_EXTERNAL(): TerminalNode | undefined;
    KW_EXTRACT(): TerminalNode | undefined;
    KW_FIELDS(): TerminalNode | undefined;
    KW_FILEFORMAT(): TerminalNode | undefined;
    KW_FIRST(): TerminalNode | undefined;
    KW_FLOAT(): TerminalNode | undefined;
    KW_FOLLOWING(): TerminalNode | undefined;
    KW_FORMAT(): TerminalNode | undefined;
    KW_FORMATTED(): TerminalNode | undefined;
    KW_FUNCTION(): TerminalNode | undefined;
    KW_FUNCTIONS(): TerminalNode | undefined;
    KW_GENERATED(): TerminalNode | undefined;
    KW_GLOBAL(): TerminalNode | undefined;
    KW_GROUPING(): TerminalNode | undefined;
    KW_HOUR(): TerminalNode | undefined;
    KW_HOURS(): TerminalNode | undefined;
    KW_IDENTIFIER(): TerminalNode | undefined;
    KW_IF(): TerminalNode | undefined;
    KW_IGNORE(): TerminalNode | undefined;
    KW_IMPORT(): TerminalNode | undefined;
    KW_INCLUDE(): TerminalNode | undefined;
    KW_INDEX(): TerminalNode | undefined;
    KW_INDEXES(): TerminalNode | undefined;
    KW_INPATH(): TerminalNode | undefined;
    KW_INPUTFORMAT(): TerminalNode | undefined;
    KW_INSERT(): TerminalNode | undefined;
    KW_INT(): TerminalNode | undefined;
    KW_INTEGER(): TerminalNode | undefined;
    KW_INTERVAL(): TerminalNode | undefined;
    KW_ITEMS(): TerminalNode | undefined;
    KW_KEYS(): TerminalNode | undefined;
    KW_LAST(): TerminalNode | undefined;
    KW_LAZY(): TerminalNode | undefined;
    KW_LIKE(): TerminalNode | undefined;
    KW_ILIKE(): TerminalNode | undefined;
    KW_LIMIT(): TerminalNode | undefined;
    KW_LINES(): TerminalNode | undefined;
    KW_LIST(): TerminalNode | undefined;
    KW_LOAD(): TerminalNode | undefined;
    KW_LOCAL(): TerminalNode | undefined;
    KW_LOCATION(): TerminalNode | undefined;
    KW_LOCK(): TerminalNode | undefined;
    KW_LOCKS(): TerminalNode | undefined;
    KW_LOGICAL(): TerminalNode | undefined;
    KW_LONG(): TerminalNode | undefined;
    KW_MACRO(): TerminalNode | undefined;
    KW_MAP(): TerminalNode | undefined;
    KW_MATCHED(): TerminalNode | undefined;
    KW_MERGE(): TerminalNode | undefined;
    KW_MICROSECOND(): TerminalNode | undefined;
    KW_MICROSECONDS(): TerminalNode | undefined;
    KW_MILLISECOND(): TerminalNode | undefined;
    KW_MILLISECONDS(): TerminalNode | undefined;
    KW_MINUTE(): TerminalNode | undefined;
    KW_MINUTES(): TerminalNode | undefined;
    KW_MONTH(): TerminalNode | undefined;
    KW_MONTHS(): TerminalNode | undefined;
    KW_MSCK(): TerminalNode | undefined;
    KW_NAME(): TerminalNode | undefined;
    KW_NAMESPACE(): TerminalNode | undefined;
    KW_NAMESPACES(): TerminalNode | undefined;
    KW_NANOSECOND(): TerminalNode | undefined;
    KW_NANOSECONDS(): TerminalNode | undefined;
    KW_NO(): TerminalNode | undefined;
    KW_NULLS(): TerminalNode | undefined;
    KW_NUMERIC(): TerminalNode | undefined;
    KW_OF(): TerminalNode | undefined;
    KW_OPTION(): TerminalNode | undefined;
    KW_OPTIONS(): TerminalNode | undefined;
    KW_OUT(): TerminalNode | undefined;
    KW_OUTPUTFORMAT(): TerminalNode | undefined;
    KW_OVER(): TerminalNode | undefined;
    KW_OVERLAY(): TerminalNode | undefined;
    KW_OVERWRITE(): TerminalNode | undefined;
    KW_PARTITION(): TerminalNode | undefined;
    KW_PARTITIONED(): TerminalNode | undefined;
    KW_PARTITIONS(): TerminalNode | undefined;
    KW_PERCENTLIT(): TerminalNode | undefined;
    KW_PIVOT(): TerminalNode | undefined;
    KW_PLACING(): TerminalNode | undefined;
    KW_POSITION(): TerminalNode | undefined;
    KW_PRECEDING(): TerminalNode | undefined;
    KW_PRINCIPALS(): TerminalNode | undefined;
    KW_PROPERTIES(): TerminalNode | undefined;
    KW_PURGE(): TerminalNode | undefined;
    KW_QUARTER(): TerminalNode | undefined;
    KW_QUERY(): TerminalNode | undefined;
    KW_RANGE(): TerminalNode | undefined;
    KW_REAL(): TerminalNode | undefined;
    KW_RECORDREADER(): TerminalNode | undefined;
    KW_RECORDWRITER(): TerminalNode | undefined;
    KW_RECOVER(): TerminalNode | undefined;
    KW_REDUCE(): TerminalNode | undefined;
    KW_REFRESH(): TerminalNode | undefined;
    KW_RENAME(): TerminalNode | undefined;
    KW_REPAIR(): TerminalNode | undefined;
    KW_REPEATABLE(): TerminalNode | undefined;
    KW_REPLACE(): TerminalNode | undefined;
    KW_RESET(): TerminalNode | undefined;
    KW_RESPECT(): TerminalNode | undefined;
    KW_RESTRICT(): TerminalNode | undefined;
    KW_REVOKE(): TerminalNode | undefined;
    KW_RLIKE(): TerminalNode | undefined;
    KW_REGEXP(): TerminalNode | undefined;
    KW_ROLE(): TerminalNode | undefined;
    KW_ROLES(): TerminalNode | undefined;
    KW_ROLLBACK(): TerminalNode | undefined;
    KW_ROLLUP(): TerminalNode | undefined;
    KW_ROW(): TerminalNode | undefined;
    KW_ROWS(): TerminalNode | undefined;
    KW_SCHEMA(): TerminalNode | undefined;
    KW_SCHEMAS(): TerminalNode | undefined;
    KW_SECOND(): TerminalNode | undefined;
    KW_SECONDS(): TerminalNode | undefined;
    KW_SEMI(): TerminalNode | undefined;
    KW_SEPARATED(): TerminalNode | undefined;
    KW_SERDE(): TerminalNode | undefined;
    KW_SERDEPROPERTIES(): TerminalNode | undefined;
    KW_SET(): TerminalNode | undefined;
    KW_MINUS(): TerminalNode | undefined;
    KW_SETS(): TerminalNode | undefined;
    KW_SHORT(): TerminalNode | undefined;
    KW_SHOW(): TerminalNode | undefined;
    KW_SINGLE(): TerminalNode | undefined;
    KW_SKEWED(): TerminalNode | undefined;
    KW_SMALLINT(): TerminalNode | undefined;
    KW_SORT(): TerminalNode | undefined;
    KW_SORTED(): TerminalNode | undefined;
    KW_SOURCE(): TerminalNode | undefined;
    KW_START(): TerminalNode | undefined;
    KW_STATISTICS(): TerminalNode | undefined;
    KW_STORED(): TerminalNode | undefined;
    KW_STRATIFY(): TerminalNode | undefined;
    KW_STRING(): TerminalNode | undefined;
    KW_STRUCT(): TerminalNode | undefined;
    KW_SUBSTR(): TerminalNode | undefined;
    KW_SUBSTRING(): TerminalNode | undefined;
    KW_SYNC(): TerminalNode | undefined;
    KW_SYSTEM(): TerminalNode | undefined;
    KW_SYSTEM_TIME(): TerminalNode | undefined;
    KW_SYSTEM_VERSION(): TerminalNode | undefined;
    KW_TABLES(): TerminalNode | undefined;
    KW_TABLESAMPLE(): TerminalNode | undefined;
    KW_TARGET(): TerminalNode | undefined;
    KW_TBLPROPERTIES(): TerminalNode | undefined;
    KW_TEMPORARY(): TerminalNode | undefined;
    KW_TERMINATED(): TerminalNode | undefined;
    KW_TIMEDIFF(): TerminalNode | undefined;
    KW_TIMESTAMP(): TerminalNode | undefined;
    KW_TIMESTAMP_LTZ(): TerminalNode | undefined;
    KW_TIMESTAMP_NTZ(): TerminalNode | undefined;
    KW_TIMESTAMPADD(): TerminalNode | undefined;
    KW_TIMESTAMPDIFF(): TerminalNode | undefined;
    KW_TINYINT(): TerminalNode | undefined;
    KW_TOUCH(): TerminalNode | undefined;
    KW_TRANSACTION(): TerminalNode | undefined;
    KW_TRANSACTIONS(): TerminalNode | undefined;
    KW_TRANSFORM(): TerminalNode | undefined;
    KW_TRIM(): TerminalNode | undefined;
    KW_TRUE(): TerminalNode | undefined;
    KW_TRUNCATE(): TerminalNode | undefined;
    KW_TRY_CAST(): TerminalNode | undefined;
    KW_TYPE(): TerminalNode | undefined;
    KW_UNARCHIVE(): TerminalNode | undefined;
    KW_UNBOUNDED(): TerminalNode | undefined;
    KW_UNCACHE(): TerminalNode | undefined;
    KW_UNLOCK(): TerminalNode | undefined;
    KW_UNPIVOT(): TerminalNode | undefined;
    KW_UNSET(): TerminalNode | undefined;
    KW_UPDATE(): TerminalNode | undefined;
    KW_USE(): TerminalNode | undefined;
    KW_VALUES(): TerminalNode | undefined;
    KW_VARCHAR(): TerminalNode | undefined;
    KW_VAR(): TerminalNode | undefined;
    KW_VARIABLE(): TerminalNode | undefined;
    KW_VERSION(): TerminalNode | undefined;
    KW_VIEW(): TerminalNode | undefined;
    KW_VIEWS(): TerminalNode | undefined;
    KW_VOID(): TerminalNode | undefined;
    KW_WEEK(): TerminalNode | undefined;
    KW_WEEKS(): TerminalNode | undefined;
    KW_WINDOW(): TerminalNode | undefined;
    KW_YEAR(): TerminalNode | undefined;
    KW_YEARS(): TerminalNode | undefined;
    KW_ZONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class StrictNonReservedContext extends ParserRuleContext {
    KW_ANTI(): TerminalNode | undefined;
    KW_CROSS(): TerminalNode | undefined;
    KW_EXCEPT(): TerminalNode | undefined;
    KW_FULL(): TerminalNode | undefined;
    KW_INNER(): TerminalNode | undefined;
    KW_INTERSECT(): TerminalNode | undefined;
    KW_JOIN(): TerminalNode | undefined;
    KW_LATERAL(): TerminalNode | undefined;
    KW_LEFT(): TerminalNode | undefined;
    KW_NATURAL(): TerminalNode | undefined;
    KW_ON(): TerminalNode | undefined;
    KW_RIGHT(): TerminalNode | undefined;
    KW_SEMI(): TerminalNode | undefined;
    KW_MINUS(): TerminalNode | undefined;
    KW_UNION(): TerminalNode | undefined;
    KW_USING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
export declare class NonReservedContext extends ParserRuleContext {
    KW_ADD(): TerminalNode | undefined;
    KW_AFTER(): TerminalNode | undefined;
    KW_ALL(): TerminalNode | undefined;
    KW_ALTER(): TerminalNode | undefined;
    KW_ALWAYS(): TerminalNode | undefined;
    KW_ANALYZE(): TerminalNode | undefined;
    KW_AND(): TerminalNode | undefined;
    KW_ANY(): TerminalNode | undefined;
    KW_ANY_VALUE(): TerminalNode | undefined;
    KW_ARCHIVE(): TerminalNode | undefined;
    KW_ARRAY(): TerminalNode | undefined;
    KW_AS(): TerminalNode | undefined;
    KW_ASC(): TerminalNode | undefined;
    KW_AT(): TerminalNode | undefined;
    KW_AUTHORIZATION(): TerminalNode | undefined;
    KW_BETWEEN(): TerminalNode | undefined;
    KW_BIGINT(): TerminalNode | undefined;
    KW_BINARY(): TerminalNode | undefined;
    KW_BINARY_HEX(): TerminalNode | undefined;
    KW_BOOLEAN(): TerminalNode | undefined;
    KW_BOTH(): TerminalNode | undefined;
    KW_BUCKET(): TerminalNode | undefined;
    KW_BUCKETS(): TerminalNode | undefined;
    KW_BY(): TerminalNode | undefined;
    KW_BYTE(): TerminalNode | undefined;
    KW_CACHE(): TerminalNode | undefined;
    KW_CASCADE(): TerminalNode | undefined;
    KW_CASE(): TerminalNode | undefined;
    KW_CAST(): TerminalNode | undefined;
    KW_CATALOG(): TerminalNode | undefined;
    KW_CATALOGS(): TerminalNode | undefined;
    KW_CHANGE(): TerminalNode | undefined;
    KW_CHAR(): TerminalNode | undefined;
    KW_CHARACTER(): TerminalNode | undefined;
    KW_CHECK(): TerminalNode | undefined;
    KW_CLEAR(): TerminalNode | undefined;
    KW_CLUSTER(): TerminalNode | undefined;
    KW_CLUSTERED(): TerminalNode | undefined;
    KW_CODEGEN(): TerminalNode | undefined;
    KW_COLLATE(): TerminalNode | undefined;
    KW_COLLECTION(): TerminalNode | undefined;
    KW_COLUMN(): TerminalNode | undefined;
    KW_COLUMNS(): TerminalNode | undefined;
    KW_COMMENT(): TerminalNode | undefined;
    KW_COMMIT(): TerminalNode | undefined;
    KW_COMPACT(): TerminalNode | undefined;
    KW_COMPACTIONS(): TerminalNode | undefined;
    KW_COMPUTE(): TerminalNode | undefined;
    KW_CONCATENATE(): TerminalNode | undefined;
    KW_CONSTRAINT(): TerminalNode | undefined;
    KW_COST(): TerminalNode | undefined;
    KW_CREATE(): TerminalNode | undefined;
    KW_CUBE(): TerminalNode | undefined;
    KW_CURRENT(): TerminalNode | undefined;
    KW_CURRENT_DATE(): TerminalNode | undefined;
    KW_CURRENT_TIME(): TerminalNode | undefined;
    KW_CURRENT_TIMESTAMP(): TerminalNode | undefined;
    KW_CURRENT_USER(): TerminalNode | undefined;
    KW_DATA(): TerminalNode | undefined;
    KW_DATABASE(): TerminalNode | undefined;
    KW_DATABASES(): TerminalNode | undefined;
    KW_DATE(): TerminalNode | undefined;
    KW_DATEADD(): TerminalNode | undefined;
    KW_DATE_ADD(): TerminalNode | undefined;
    KW_DATEDIFF(): TerminalNode | undefined;
    KW_DATE_DIFF(): TerminalNode | undefined;
    KW_DAY(): TerminalNode | undefined;
    KW_DAYS(): TerminalNode | undefined;
    KW_DAYOFYEAR(): TerminalNode | undefined;
    KW_DBPROPERTIES(): TerminalNode | undefined;
    KW_DEC(): TerminalNode | undefined;
    KW_DECIMAL(): TerminalNode | undefined;
    KW_DECLARE(): TerminalNode | undefined;
    KW_DEFAULT(): TerminalNode | undefined;
    KW_DEFINED(): TerminalNode | undefined;
    KW_DELETE(): TerminalNode | undefined;
    KW_DELIMITED(): TerminalNode | undefined;
    KW_DESC(): TerminalNode | undefined;
    KW_DESCRIBE(): TerminalNode | undefined;
    KW_DFS(): TerminalNode | undefined;
    KW_DIRECTORIES(): TerminalNode | undefined;
    KW_DIRECTORY(): TerminalNode | undefined;
    KW_DISTINCT(): TerminalNode | undefined;
    KW_DISTRIBUTE(): TerminalNode | undefined;
    KW_DIV(): TerminalNode | undefined;
    KW_DOUBLE(): TerminalNode | undefined;
    KW_DROP(): TerminalNode | undefined;
    KW_ELSE(): TerminalNode | undefined;
    KW_END(): TerminalNode | undefined;
    KW_ESCAPE(): TerminalNode | undefined;
    KW_ESCAPED(): TerminalNode | undefined;
    KW_EXCHANGE(): TerminalNode | undefined;
    KW_EXCLUDE(): TerminalNode | undefined;
    KW_EXISTS(): TerminalNode | undefined;
    KW_EXPLAIN(): TerminalNode | undefined;
    KW_EXPORT(): TerminalNode | undefined;
    KW_EXTENDED(): TerminalNode | undefined;
    KW_EXTERNAL(): TerminalNode | undefined;
    KW_EXTRACT(): TerminalNode | undefined;
    KW_FALSE(): TerminalNode | undefined;
    KW_FETCH(): TerminalNode | undefined;
    KW_FILTER(): TerminalNode | undefined;
    KW_FIELDS(): TerminalNode | undefined;
    KW_FILEFORMAT(): TerminalNode | undefined;
    KW_FIRST(): TerminalNode | undefined;
    KW_FLOAT(): TerminalNode | undefined;
    KW_FOLLOWING(): TerminalNode | undefined;
    KW_FOR(): TerminalNode | undefined;
    KW_FOREIGN(): TerminalNode | undefined;
    KW_FORMAT(): TerminalNode | undefined;
    KW_FORMATTED(): TerminalNode | undefined;
    KW_FROM(): TerminalNode | undefined;
    KW_FUNCTION(): TerminalNode | undefined;
    KW_FUNCTIONS(): TerminalNode | undefined;
    KW_GENERATED(): TerminalNode | undefined;
    KW_GLOBAL(): TerminalNode | undefined;
    KW_GRANT(): TerminalNode | undefined;
    KW_GROUP(): TerminalNode | undefined;
    KW_GROUPING(): TerminalNode | undefined;
    KW_HAVING(): TerminalNode | undefined;
    KW_HOUR(): TerminalNode | undefined;
    KW_HOURS(): TerminalNode | undefined;
    KW_IDENTIFIER(): TerminalNode | undefined;
    KW_IF(): TerminalNode | undefined;
    KW_IGNORE(): TerminalNode | undefined;
    KW_IMPORT(): TerminalNode | undefined;
    KW_IN(): TerminalNode | undefined;
    KW_INCLUDE(): TerminalNode | undefined;
    KW_INDEX(): TerminalNode | undefined;
    KW_INDEXES(): TerminalNode | undefined;
    KW_INPATH(): TerminalNode | undefined;
    KW_INPUTFORMAT(): TerminalNode | undefined;
    KW_INSERT(): TerminalNode | undefined;
    KW_INT(): TerminalNode | undefined;
    KW_INTEGER(): TerminalNode | undefined;
    KW_INTERVAL(): TerminalNode | undefined;
    KW_INTO(): TerminalNode | undefined;
    KW_IS(): TerminalNode | undefined;
    KW_ITEMS(): TerminalNode | undefined;
    KW_KEYS(): TerminalNode | undefined;
    KW_LAST(): TerminalNode | undefined;
    KW_LAZY(): TerminalNode | undefined;
    KW_LEADING(): TerminalNode | undefined;
    KW_LIKE(): TerminalNode | undefined;
    KW_LONG(): TerminalNode | undefined;
    KW_ILIKE(): TerminalNode | undefined;
    KW_LIMIT(): TerminalNode | undefined;
    KW_LINES(): TerminalNode | undefined;
    KW_LIST(): TerminalNode | undefined;
    KW_LOAD(): TerminalNode | undefined;
    KW_LOCAL(): TerminalNode | undefined;
    KW_LOCATION(): TerminalNode | undefined;
    KW_LOCK(): TerminalNode | undefined;
    KW_LOCKS(): TerminalNode | undefined;
    KW_LOGICAL(): TerminalNode | undefined;
    KW_MACRO(): TerminalNode | undefined;
    KW_MAP(): TerminalNode | undefined;
    KW_MATCHED(): TerminalNode | undefined;
    KW_MERGE(): TerminalNode | undefined;
    KW_MICROSECOND(): TerminalNode | undefined;
    KW_MICROSECONDS(): TerminalNode | undefined;
    KW_MILLISECOND(): TerminalNode | undefined;
    KW_MILLISECONDS(): TerminalNode | undefined;
    KW_MINUTE(): TerminalNode | undefined;
    KW_MINUTES(): TerminalNode | undefined;
    KW_MONTH(): TerminalNode | undefined;
    KW_MONTHS(): TerminalNode | undefined;
    KW_MSCK(): TerminalNode | undefined;
    KW_NAME(): TerminalNode | undefined;
    KW_NAMESPACE(): TerminalNode | undefined;
    KW_NAMESPACES(): TerminalNode | undefined;
    KW_NANOSECOND(): TerminalNode | undefined;
    KW_NANOSECONDS(): TerminalNode | undefined;
    KW_NO(): TerminalNode | undefined;
    KW_NOT(): TerminalNode | undefined;
    KW_NULL(): TerminalNode | undefined;
    KW_NULLS(): TerminalNode | undefined;
    KW_NUMERIC(): TerminalNode | undefined;
    KW_OF(): TerminalNode | undefined;
    KW_OFFSET(): TerminalNode | undefined;
    KW_ONLY(): TerminalNode | undefined;
    KW_OPTION(): TerminalNode | undefined;
    KW_OPTIONS(): TerminalNode | undefined;
    KW_OR(): TerminalNode | undefined;
    KW_ORDER(): TerminalNode | undefined;
    KW_OUT(): TerminalNode | undefined;
    KW_OUTER(): TerminalNode | undefined;
    KW_OUTPUTFORMAT(): TerminalNode | undefined;
    KW_OVER(): TerminalNode | undefined;
    KW_OVERLAPS(): TerminalNode | undefined;
    KW_OVERLAY(): TerminalNode | undefined;
    KW_OVERWRITE(): TerminalNode | undefined;
    KW_PARTITION(): TerminalNode | undefined;
    KW_PARTITIONED(): TerminalNode | undefined;
    KW_PARTITIONS(): TerminalNode | undefined;
    KW_PERCENTILE_CONT(): TerminalNode | undefined;
    KW_PERCENTILE_DISC(): TerminalNode | undefined;
    KW_PERCENTLIT(): TerminalNode | undefined;
    KW_PIVOT(): TerminalNode | undefined;
    KW_PLACING(): TerminalNode | undefined;
    KW_POSITION(): TerminalNode | undefined;
    KW_PRECEDING(): TerminalNode | undefined;
    KW_PRIMARY(): TerminalNode | undefined;
    KW_PRINCIPALS(): TerminalNode | undefined;
    KW_PROPERTIES(): TerminalNode | undefined;
    KW_PURGE(): TerminalNode | undefined;
    KW_QUARTER(): TerminalNode | undefined;
    KW_QUERY(): TerminalNode | undefined;
    KW_RANGE(): TerminalNode | undefined;
    KW_REAL(): TerminalNode | undefined;
    KW_RECORDREADER(): TerminalNode | undefined;
    KW_RECORDWRITER(): TerminalNode | undefined;
    KW_RECOVER(): TerminalNode | undefined;
    KW_REDUCE(): TerminalNode | undefined;
    KW_REFERENCES(): TerminalNode | undefined;
    KW_REFRESH(): TerminalNode | undefined;
    KW_RENAME(): TerminalNode | undefined;
    KW_REPAIR(): TerminalNode | undefined;
    KW_REPEATABLE(): TerminalNode | undefined;
    KW_REPLACE(): TerminalNode | undefined;
    KW_RESET(): TerminalNode | undefined;
    KW_RESPECT(): TerminalNode | undefined;
    KW_RESTRICT(): TerminalNode | undefined;
    KW_REVOKE(): TerminalNode | undefined;
    KW_RLIKE(): TerminalNode | undefined;
    KW_REGEXP(): TerminalNode | undefined;
    KW_ROLE(): TerminalNode | undefined;
    KW_ROLES(): TerminalNode | undefined;
    KW_ROLLBACK(): TerminalNode | undefined;
    KW_ROLLUP(): TerminalNode | undefined;
    KW_ROW(): TerminalNode | undefined;
    KW_ROWS(): TerminalNode | undefined;
    KW_SCHEMA(): TerminalNode | undefined;
    KW_SCHEMAS(): TerminalNode | undefined;
    KW_SECOND(): TerminalNode | undefined;
    KW_SECONDS(): TerminalNode | undefined;
    KW_SELECT(): TerminalNode | undefined;
    KW_SEPARATED(): TerminalNode | undefined;
    KW_SERDE(): TerminalNode | undefined;
    KW_SERDEPROPERTIES(): TerminalNode | undefined;
    KW_SESSION_USER(): TerminalNode | undefined;
    KW_SET(): TerminalNode | undefined;
    KW_SETS(): TerminalNode | undefined;
    KW_SHORT(): TerminalNode | undefined;
    KW_SHOW(): TerminalNode | undefined;
    KW_SINGLE(): TerminalNode | undefined;
    KW_SKEWED(): TerminalNode | undefined;
    KW_SMALLINT(): TerminalNode | undefined;
    KW_SOME(): TerminalNode | undefined;
    KW_SORT(): TerminalNode | undefined;
    KW_SORTED(): TerminalNode | undefined;
    KW_SOURCE(): TerminalNode | undefined;
    KW_START(): TerminalNode | undefined;
    KW_STATISTICS(): TerminalNode | undefined;
    KW_STORED(): TerminalNode | undefined;
    KW_STRATIFY(): TerminalNode | undefined;
    KW_STRING(): TerminalNode | undefined;
    KW_STRUCT(): TerminalNode | undefined;
    KW_SUBSTR(): TerminalNode | undefined;
    KW_SUBSTRING(): TerminalNode | undefined;
    KW_SYNC(): TerminalNode | undefined;
    KW_SYSTEM(): TerminalNode | undefined;
    KW_SYSTEM_TIME(): TerminalNode | undefined;
    KW_SYSTEM_VERSION(): TerminalNode | undefined;
    KW_TABLE(): TerminalNode | undefined;
    KW_TABLES(): TerminalNode | undefined;
    KW_TABLESAMPLE(): TerminalNode | undefined;
    KW_TARGET(): TerminalNode | undefined;
    KW_TBLPROPERTIES(): TerminalNode | undefined;
    KW_TEMPORARY(): TerminalNode | undefined;
    KW_TERMINATED(): TerminalNode | undefined;
    KW_THEN(): TerminalNode | undefined;
    KW_TIME(): TerminalNode | undefined;
    KW_TIMEDIFF(): TerminalNode | undefined;
    KW_TIMESTAMP(): TerminalNode | undefined;
    KW_TIMESTAMP_LTZ(): TerminalNode | undefined;
    KW_TIMESTAMP_NTZ(): TerminalNode | undefined;
    KW_TIMESTAMPADD(): TerminalNode | undefined;
    KW_TIMESTAMPDIFF(): TerminalNode | undefined;
    KW_TINYINT(): TerminalNode | undefined;
    KW_TO(): TerminalNode | undefined;
    KW_TOUCH(): TerminalNode | undefined;
    KW_TRAILING(): TerminalNode | undefined;
    KW_TRANSACTION(): TerminalNode | undefined;
    KW_TRANSACTIONS(): TerminalNode | undefined;
    KW_TRANSFORM(): TerminalNode | undefined;
    KW_TRIM(): TerminalNode | undefined;
    KW_TRUE(): TerminalNode | undefined;
    KW_TRUNCATE(): TerminalNode | undefined;
    KW_TRY_CAST(): TerminalNode | undefined;
    KW_TYPE(): TerminalNode | undefined;
    KW_UNARCHIVE(): TerminalNode | undefined;
    KW_UNBOUNDED(): TerminalNode | undefined;
    KW_UNCACHE(): TerminalNode | undefined;
    KW_UNIQUE(): TerminalNode | undefined;
    KW_UNKNOWN(): TerminalNode | undefined;
    KW_UNLOCK(): TerminalNode | undefined;
    KW_UNPIVOT(): TerminalNode | undefined;
    KW_UNSET(): TerminalNode | undefined;
    KW_UPDATE(): TerminalNode | undefined;
    KW_USE(): TerminalNode | undefined;
    KW_USER(): TerminalNode | undefined;
    KW_VALUES(): TerminalNode | undefined;
    KW_VARCHAR(): TerminalNode | undefined;
    KW_VAR(): TerminalNode | undefined;
    KW_VARIABLE(): TerminalNode | undefined;
    KW_VERSION(): TerminalNode | undefined;
    KW_VIEW(): TerminalNode | undefined;
    KW_VIEWS(): TerminalNode | undefined;
    KW_VOID(): TerminalNode | undefined;
    KW_WEEK(): TerminalNode | undefined;
    KW_WEEKS(): TerminalNode | undefined;
    KW_WHEN(): TerminalNode | undefined;
    KW_WHERE(): TerminalNode | undefined;
    KW_WINDOW(): TerminalNode | undefined;
    KW_WITH(): TerminalNode | undefined;
    KW_WITHIN(): TerminalNode | undefined;
    KW_YEAR(): TerminalNode | undefined;
    KW_YEARS(): TerminalNode | undefined;
    KW_ZONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: SparkSqlParserListener): void;
    exitRule(listener: SparkSqlParserListener): void;
    accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result;
}
