import PostgreSQLParserBase from "./PostgreSQLParserBase";
import { ATN } from "antlr4ts/atn/ATN";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { RuleContext } from "antlr4ts/RuleContext";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { PostgreSQLParserListener } from "./PostgreSQLParserListener";
import { PostgreSQLParserVisitor } from "./PostgreSQLParserVisitor";
export declare class PostgreSQLParser extends PostgreSQLParserBase {
    static readonly Dollar = 1;
    static readonly OPEN_PAREN = 2;
    static readonly CLOSE_PAREN = 3;
    static readonly OPEN_BRACKET = 4;
    static readonly CLOSE_BRACKET = 5;
    static readonly COMMA = 6;
    static readonly SEMI = 7;
    static readonly COLON = 8;
    static readonly STAR = 9;
    static readonly EQUAL = 10;
    static readonly DOT = 11;
    static readonly PLUS = 12;
    static readonly MINUS = 13;
    static readonly SLASH = 14;
    static readonly CARET = 15;
    static readonly LT = 16;
    static readonly GT = 17;
    static readonly LESS_LESS = 18;
    static readonly GREATER_GREATER = 19;
    static readonly COLON_EQUALS = 20;
    static readonly LESS_EQUALS = 21;
    static readonly EQUALS_GREATER = 22;
    static readonly GREATER_EQUALS = 23;
    static readonly DOT_DOT = 24;
    static readonly NOT_EQUALS = 25;
    static readonly TYPECAST = 26;
    static readonly PERCENT = 27;
    static readonly PARAM = 28;
    static readonly Operator = 29;
    static readonly ALL = 30;
    static readonly ANALYSE = 31;
    static readonly ANALYZE = 32;
    static readonly AND = 33;
    static readonly ANY = 34;
    static readonly ARRAY = 35;
    static readonly AS = 36;
    static readonly ASC = 37;
    static readonly ASYMMETRIC = 38;
    static readonly BOTH = 39;
    static readonly CASE = 40;
    static readonly CAST = 41;
    static readonly CHECK = 42;
    static readonly COLLATE = 43;
    static readonly COLUMN = 44;
    static readonly CONSTRAINT = 45;
    static readonly CREATE = 46;
    static readonly CURRENT_CATALOG = 47;
    static readonly CURRENT_DATE = 48;
    static readonly CURRENT_ROLE = 49;
    static readonly CURRENT_TIME = 50;
    static readonly CURRENT_TIMESTAMP = 51;
    static readonly CURRENT_USER = 52;
    static readonly DEFAULT = 53;
    static readonly DEFERRABLE = 54;
    static readonly DESC = 55;
    static readonly DISTINCT = 56;
    static readonly DO = 57;
    static readonly ELSE = 58;
    static readonly EXCEPT = 59;
    static readonly FALSE_P = 60;
    static readonly FETCH = 61;
    static readonly FOR = 62;
    static readonly FOREIGN = 63;
    static readonly FROM = 64;
    static readonly GRANT = 65;
    static readonly GROUP_P = 66;
    static readonly HAVING = 67;
    static readonly IN_P = 68;
    static readonly INITIALLY = 69;
    static readonly INTERSECT = 70;
    static readonly INTO = 71;
    static readonly LATERAL_P = 72;
    static readonly LEADING = 73;
    static readonly LIMIT = 74;
    static readonly LOCALTIME = 75;
    static readonly LOCALTIMESTAMP = 76;
    static readonly NOT = 77;
    static readonly NULL_P = 78;
    static readonly OFFSET = 79;
    static readonly ON = 80;
    static readonly ONLY = 81;
    static readonly OR = 82;
    static readonly ORDER = 83;
    static readonly PLACING = 84;
    static readonly PRIMARY = 85;
    static readonly REFERENCES = 86;
    static readonly RETURNING = 87;
    static readonly SELECT = 88;
    static readonly SESSION_USER = 89;
    static readonly SOME = 90;
    static readonly SYMMETRIC = 91;
    static readonly TABLE = 92;
    static readonly THEN = 93;
    static readonly TO = 94;
    static readonly TRAILING = 95;
    static readonly TRUE_P = 96;
    static readonly UNION = 97;
    static readonly UNIQUE = 98;
    static readonly USER = 99;
    static readonly USING = 100;
    static readonly VARIADIC = 101;
    static readonly WHEN = 102;
    static readonly WHERE = 103;
    static readonly WINDOW = 104;
    static readonly WITH = 105;
    static readonly AUTHORIZATION = 106;
    static readonly BINARY = 107;
    static readonly COLLATION = 108;
    static readonly CONCURRENTLY = 109;
    static readonly CROSS = 110;
    static readonly CURRENT_SCHEMA = 111;
    static readonly FREEZE = 112;
    static readonly FULL = 113;
    static readonly ILIKE = 114;
    static readonly INNER_P = 115;
    static readonly IS = 116;
    static readonly ISNULL = 117;
    static readonly JOIN = 118;
    static readonly LEFT = 119;
    static readonly LIKE = 120;
    static readonly NATURAL = 121;
    static readonly NOTNULL = 122;
    static readonly OUTER_P = 123;
    static readonly OVER = 124;
    static readonly OVERLAPS = 125;
    static readonly RIGHT = 126;
    static readonly SIMILAR = 127;
    static readonly VERBOSE = 128;
    static readonly ABORT_P = 129;
    static readonly ABSOLUTE_P = 130;
    static readonly ACCESS = 131;
    static readonly ACTION = 132;
    static readonly ADD_P = 133;
    static readonly ADMIN = 134;
    static readonly AFTER = 135;
    static readonly AGGREGATE = 136;
    static readonly ALSO = 137;
    static readonly ALTER = 138;
    static readonly ALWAYS = 139;
    static readonly ASSERTION = 140;
    static readonly ASSIGNMENT = 141;
    static readonly AT = 142;
    static readonly ATTRIBUTE = 143;
    static readonly BACKWARD = 144;
    static readonly BEFORE = 145;
    static readonly BEGIN_P = 146;
    static readonly BY = 147;
    static readonly CACHE = 148;
    static readonly CALLED = 149;
    static readonly CASCADE = 150;
    static readonly CASCADED = 151;
    static readonly CATALOG = 152;
    static readonly CHAIN = 153;
    static readonly CHARACTERISTICS = 154;
    static readonly CHECKPOINT = 155;
    static readonly CLASS = 156;
    static readonly CLOSE = 157;
    static readonly CLUSTER = 158;
    static readonly COMMENT = 159;
    static readonly COMMENTS = 160;
    static readonly COMMIT = 161;
    static readonly COMMITTED = 162;
    static readonly CONFIGURATION = 163;
    static readonly CONNECTION = 164;
    static readonly CONSTRAINTS = 165;
    static readonly CONTENT_P = 166;
    static readonly CONTINUE_P = 167;
    static readonly CONVERSION_P = 168;
    static readonly COPY = 169;
    static readonly COST = 170;
    static readonly CSV = 171;
    static readonly CURSOR = 172;
    static readonly CYCLE = 173;
    static readonly DATA_P = 174;
    static readonly DATABASE = 175;
    static readonly DAY_P = 176;
    static readonly DEALLOCATE = 177;
    static readonly DECLARE = 178;
    static readonly DEFAULTS = 179;
    static readonly DEFERRED = 180;
    static readonly DEFINER = 181;
    static readonly DELETE_P = 182;
    static readonly DELIMITER = 183;
    static readonly DELIMITERS = 184;
    static readonly DICTIONARY = 185;
    static readonly DISABLE_P = 186;
    static readonly DISCARD = 187;
    static readonly DOCUMENT_P = 188;
    static readonly DOMAIN_P = 189;
    static readonly DOUBLE_P = 190;
    static readonly DROP = 191;
    static readonly EACH = 192;
    static readonly ENABLE_P = 193;
    static readonly ENCODING = 194;
    static readonly ENCRYPTED = 195;
    static readonly ENUM_P = 196;
    static readonly ESCAPE = 197;
    static readonly EVENT = 198;
    static readonly EXCLUDE = 199;
    static readonly EXCLUDING = 200;
    static readonly EXCLUSIVE = 201;
    static readonly EXECUTE = 202;
    static readonly EXPLAIN = 203;
    static readonly EXTENSION = 204;
    static readonly EXTERNAL = 205;
    static readonly FAMILY = 206;
    static readonly FIRST_P = 207;
    static readonly FOLLOWING = 208;
    static readonly FORCE = 209;
    static readonly FORWARD = 210;
    static readonly FUNCTION = 211;
    static readonly FUNCTIONS = 212;
    static readonly GLOBAL = 213;
    static readonly GRANTED = 214;
    static readonly HANDLER = 215;
    static readonly HEADER_P = 216;
    static readonly HOLD = 217;
    static readonly HOUR_P = 218;
    static readonly IDENTITY_P = 219;
    static readonly IF_P = 220;
    static readonly IMMEDIATE = 221;
    static readonly IMMUTABLE = 222;
    static readonly IMPLICIT_P = 223;
    static readonly INCLUDING = 224;
    static readonly INCREMENT = 225;
    static readonly INDEX = 226;
    static readonly INDEXES = 227;
    static readonly INHERIT = 228;
    static readonly INHERITS = 229;
    static readonly INLINE_P = 230;
    static readonly INSENSITIVE = 231;
    static readonly INSERT = 232;
    static readonly INSTEAD = 233;
    static readonly INVOKER = 234;
    static readonly ISOLATION = 235;
    static readonly KEY = 236;
    static readonly LABEL = 237;
    static readonly LANGUAGE = 238;
    static readonly LARGE_P = 239;
    static readonly LAST_P = 240;
    static readonly LEAKPROOF = 241;
    static readonly LEVEL = 242;
    static readonly LISTEN = 243;
    static readonly LOAD = 244;
    static readonly LOCAL = 245;
    static readonly LOCATION = 246;
    static readonly LOCK_P = 247;
    static readonly MAPPING = 248;
    static readonly MATCH = 249;
    static readonly MATERIALIZED = 250;
    static readonly MAXVALUE = 251;
    static readonly MINUTE_P = 252;
    static readonly MINVALUE = 253;
    static readonly MODE = 254;
    static readonly MONTH_P = 255;
    static readonly MOVE = 256;
    static readonly NAME_P = 257;
    static readonly NAMES = 258;
    static readonly NEXT = 259;
    static readonly NO = 260;
    static readonly NOTHING = 261;
    static readonly NOTIFY = 262;
    static readonly NOWAIT = 263;
    static readonly NULLS_P = 264;
    static readonly OBJECT_P = 265;
    static readonly OF = 266;
    static readonly OFF = 267;
    static readonly OIDS = 268;
    static readonly OPERATOR = 269;
    static readonly OPTION = 270;
    static readonly OPTIONS = 271;
    static readonly OWNED = 272;
    static readonly OWNER = 273;
    static readonly PARSER = 274;
    static readonly PARTIAL = 275;
    static readonly PARTITION = 276;
    static readonly PASSING = 277;
    static readonly PASSWORD = 278;
    static readonly PLANS = 279;
    static readonly PRECEDING = 280;
    static readonly PREPARE = 281;
    static readonly PREPARED = 282;
    static readonly PRESERVE = 283;
    static readonly PRIOR = 284;
    static readonly PRIVILEGES = 285;
    static readonly PROCEDURAL = 286;
    static readonly PROCEDURE = 287;
    static readonly PROGRAM = 288;
    static readonly QUOTE = 289;
    static readonly RANGE = 290;
    static readonly READ = 291;
    static readonly REASSIGN = 292;
    static readonly RECHECK = 293;
    static readonly RECURSIVE = 294;
    static readonly REF = 295;
    static readonly REFRESH = 296;
    static readonly REINDEX = 297;
    static readonly RELATIVE_P = 298;
    static readonly RELEASE = 299;
    static readonly RENAME = 300;
    static readonly REPEATABLE = 301;
    static readonly REPLACE = 302;
    static readonly REPLICA = 303;
    static readonly RESET = 304;
    static readonly RESTART = 305;
    static readonly RESTRICT = 306;
    static readonly RETURNS = 307;
    static readonly REVOKE = 308;
    static readonly ROLE = 309;
    static readonly ROLLBACK = 310;
    static readonly ROWS = 311;
    static readonly RULE = 312;
    static readonly SAVEPOINT = 313;
    static readonly SCHEMA = 314;
    static readonly SCROLL = 315;
    static readonly SEARCH = 316;
    static readonly SECOND_P = 317;
    static readonly SECURITY = 318;
    static readonly SEQUENCE = 319;
    static readonly SEQUENCES = 320;
    static readonly SERIALIZABLE = 321;
    static readonly SERVER = 322;
    static readonly SESSION = 323;
    static readonly SET = 324;
    static readonly SHARE = 325;
    static readonly SHOW = 326;
    static readonly SIMPLE = 327;
    static readonly SNAPSHOT = 328;
    static readonly STABLE = 329;
    static readonly STANDALONE_P = 330;
    static readonly START = 331;
    static readonly STATEMENT = 332;
    static readonly STATISTICS = 333;
    static readonly STDIN = 334;
    static readonly STDOUT = 335;
    static readonly STORAGE = 336;
    static readonly STRICT_P = 337;
    static readonly STRIP_P = 338;
    static readonly SYSID = 339;
    static readonly SYSTEM_P = 340;
    static readonly TABLES = 341;
    static readonly TABLESPACE = 342;
    static readonly TEMP = 343;
    static readonly TEMPLATE = 344;
    static readonly TEMPORARY = 345;
    static readonly TEXT_P = 346;
    static readonly TRANSACTION = 347;
    static readonly TRIGGER = 348;
    static readonly TRUNCATE = 349;
    static readonly TRUSTED = 350;
    static readonly TYPE_P = 351;
    static readonly TYPES_P = 352;
    static readonly UNBOUNDED = 353;
    static readonly UNCOMMITTED = 354;
    static readonly UNENCRYPTED = 355;
    static readonly UNKNOWN = 356;
    static readonly UNLISTEN = 357;
    static readonly UNLOGGED = 358;
    static readonly UNTIL = 359;
    static readonly UPDATE = 360;
    static readonly VACUUM = 361;
    static readonly VALID = 362;
    static readonly VALIDATE = 363;
    static readonly VALIDATOR = 364;
    static readonly VARYING = 365;
    static readonly VERSION_P = 366;
    static readonly VIEW = 367;
    static readonly VOLATILE = 368;
    static readonly WHITESPACE_P = 369;
    static readonly WITHOUT = 370;
    static readonly WORK = 371;
    static readonly WRAPPER = 372;
    static readonly WRITE = 373;
    static readonly XML_P = 374;
    static readonly YEAR_P = 375;
    static readonly YES_P = 376;
    static readonly ZONE = 377;
    static readonly BETWEEN = 378;
    static readonly BIGINT = 379;
    static readonly BIT = 380;
    static readonly BOOLEAN_P = 381;
    static readonly CHAR_P = 382;
    static readonly CHARACTER = 383;
    static readonly COALESCE = 384;
    static readonly DEC = 385;
    static readonly DECIMAL_P = 386;
    static readonly EXISTS = 387;
    static readonly EXTRACT = 388;
    static readonly FLOAT_P = 389;
    static readonly GREATEST = 390;
    static readonly INOUT = 391;
    static readonly INT_P = 392;
    static readonly INTEGER = 393;
    static readonly INTERVAL = 394;
    static readonly LEAST = 395;
    static readonly NATIONAL = 396;
    static readonly NCHAR = 397;
    static readonly NONE = 398;
    static readonly NULLIF = 399;
    static readonly NUMERIC = 400;
    static readonly OVERLAY = 401;
    static readonly POSITION = 402;
    static readonly PRECISION = 403;
    static readonly REAL = 404;
    static readonly ROW = 405;
    static readonly SETOF = 406;
    static readonly SMALLINT = 407;
    static readonly SUBSTRING = 408;
    static readonly TIME = 409;
    static readonly TIMESTAMP = 410;
    static readonly TREAT = 411;
    static readonly TRIM = 412;
    static readonly VALUES = 413;
    static readonly VARCHAR = 414;
    static readonly XMLATTRIBUTES = 415;
    static readonly XMLCONCAT = 416;
    static readonly XMLELEMENT = 417;
    static readonly XMLEXISTS = 418;
    static readonly XMLFOREST = 419;
    static readonly XMLPARSE = 420;
    static readonly XMLPI = 421;
    static readonly XMLROOT = 422;
    static readonly XMLSERIALIZE = 423;
    static readonly CALL = 424;
    static readonly CURRENT_P = 425;
    static readonly ATTACH = 426;
    static readonly DETACH = 427;
    static readonly EXPRESSION = 428;
    static readonly GENERATED = 429;
    static readonly LOGGED = 430;
    static readonly STORED = 431;
    static readonly INCLUDE = 432;
    static readonly ROUTINE = 433;
    static readonly TRANSFORM = 434;
    static readonly IMPORT_P = 435;
    static readonly POLICY = 436;
    static readonly METHOD = 437;
    static readonly REFERENCING = 438;
    static readonly NEW = 439;
    static readonly OLD = 440;
    static readonly VALUE_P = 441;
    static readonly SUBSCRIPTION = 442;
    static readonly PUBLICATION = 443;
    static readonly OUT_P = 444;
    static readonly END_P = 445;
    static readonly ROUTINES = 446;
    static readonly SCHEMAS = 447;
    static readonly PROCEDURES = 448;
    static readonly INPUT_P = 449;
    static readonly SUPPORT = 450;
    static readonly PARALLEL = 451;
    static readonly SQL_P = 452;
    static readonly DEPENDS = 453;
    static readonly OVERRIDING = 454;
    static readonly CONFLICT = 455;
    static readonly SKIP_P = 456;
    static readonly LOCKED = 457;
    static readonly TIES = 458;
    static readonly ROLLUP = 459;
    static readonly CUBE = 460;
    static readonly GROUPING = 461;
    static readonly SETS = 462;
    static readonly TABLESAMPLE = 463;
    static readonly ORDINALITY = 464;
    static readonly XMLTABLE = 465;
    static readonly COLUMNS = 466;
    static readonly XMLNAMESPACES = 467;
    static readonly ROWTYPE = 468;
    static readonly NORMALIZED = 469;
    static readonly WITHIN = 470;
    static readonly FILTER = 471;
    static readonly GROUPS = 472;
    static readonly OTHERS = 473;
    static readonly NFC = 474;
    static readonly NFD = 475;
    static readonly NFKC = 476;
    static readonly NFKD = 477;
    static readonly UESCAPE = 478;
    static readonly VIEWS = 479;
    static readonly NORMALIZE = 480;
    static readonly DUMP = 481;
    static readonly PRINT_STRICT_PARAMS = 482;
    static readonly VARIABLE_CONFLICT = 483;
    static readonly ERROR = 484;
    static readonly USE_VARIABLE = 485;
    static readonly USE_COLUMN = 486;
    static readonly ALIAS = 487;
    static readonly CONSTANT = 488;
    static readonly PERFORM = 489;
    static readonly GET = 490;
    static readonly DIAGNOSTICS = 491;
    static readonly STACKED = 492;
    static readonly ELSIF = 493;
    static readonly WHILE = 494;
    static readonly REVERSE = 495;
    static readonly FOREACH = 496;
    static readonly SLICE = 497;
    static readonly EXIT = 498;
    static readonly RETURN = 499;
    static readonly QUERY = 500;
    static readonly RAISE = 501;
    static readonly SQLSTATE = 502;
    static readonly DEBUG = 503;
    static readonly LOG = 504;
    static readonly INFO = 505;
    static readonly NOTICE = 506;
    static readonly WARNING = 507;
    static readonly EXCEPTION = 508;
    static readonly ASSERT = 509;
    static readonly LOOP = 510;
    static readonly OPEN = 511;
    static readonly Identifier = 512;
    static readonly QuotedIdentifier = 513;
    static readonly UnterminatedQuotedIdentifier = 514;
    static readonly InvalidQuotedIdentifier = 515;
    static readonly InvalidUnterminatedQuotedIdentifier = 516;
    static readonly UnicodeQuotedIdentifier = 517;
    static readonly UnterminatedUnicodeQuotedIdentifier = 518;
    static readonly InvalidUnicodeQuotedIdentifier = 519;
    static readonly InvalidUnterminatedUnicodeQuotedIdentifier = 520;
    static readonly StringConstant = 521;
    static readonly UnterminatedStringConstant = 522;
    static readonly UnicodeEscapeStringConstant = 523;
    static readonly UnterminatedUnicodeEscapeStringConstant = 524;
    static readonly BeginDollarStringConstant = 525;
    static readonly BinaryStringConstant = 526;
    static readonly UnterminatedBinaryStringConstant = 527;
    static readonly InvalidBinaryStringConstant = 528;
    static readonly InvalidUnterminatedBinaryStringConstant = 529;
    static readonly HexadecimalStringConstant = 530;
    static readonly UnterminatedHexadecimalStringConstant = 531;
    static readonly InvalidHexadecimalStringConstant = 532;
    static readonly InvalidUnterminatedHexadecimalStringConstant = 533;
    static readonly Integral = 534;
    static readonly NumericFail = 535;
    static readonly Numeric = 536;
    static readonly PLSQLVARIABLENAME = 537;
    static readonly PLSQLIDENTIFIER = 538;
    static readonly Whitespace = 539;
    static readonly Newline = 540;
    static readonly LineComment = 541;
    static readonly BlockComment = 542;
    static readonly UnterminatedBlockComment = 543;
    static readonly MetaCommand = 544;
    static readonly EndMetaCommand = 545;
    static readonly ErrorCharacter = 546;
    static readonly EscapeStringConstant = 547;
    static readonly UnterminatedEscapeStringConstant = 548;
    static readonly InvalidEscapeStringConstant = 549;
    static readonly InvalidUnterminatedEscapeStringConstant = 550;
    static readonly DollarText = 551;
    static readonly EndDollarStringConstant = 552;
    static readonly AfterEscapeStringConstantWithNewlineMode_Continued = 553;
    static readonly RULE_program = 0;
    static readonly RULE_plsqlroot = 1;
    static readonly RULE_stmtmulti = 2;
    static readonly RULE_stmt = 3;
    static readonly RULE_plsqlconsolecommand = 4;
    static readonly RULE_callstmt = 5;
    static readonly RULE_createrolestmt = 6;
    static readonly RULE_opt_with = 7;
    static readonly RULE_optrolelist = 8;
    static readonly RULE_alteroptrolelist = 9;
    static readonly RULE_alteroptroleelem = 10;
    static readonly RULE_createoptroleelem = 11;
    static readonly RULE_createuserstmt = 12;
    static readonly RULE_alterrolestmt = 13;
    static readonly RULE_opt_in_database = 14;
    static readonly RULE_alterrolesetstmt = 15;
    static readonly RULE_droprolestmt = 16;
    static readonly RULE_creategroupstmt = 17;
    static readonly RULE_altergroupstmt = 18;
    static readonly RULE_add_drop = 19;
    static readonly RULE_createschemastmt = 20;
    static readonly RULE_optschemaname = 21;
    static readonly RULE_optschemaeltlist = 22;
    static readonly RULE_schema_stmt = 23;
    static readonly RULE_variablesetstmt = 24;
    static readonly RULE_set_rest = 25;
    static readonly RULE_generic_set = 26;
    static readonly RULE_set_rest_more = 27;
    static readonly RULE_var_name = 28;
    static readonly RULE_var_list = 29;
    static readonly RULE_var_value = 30;
    static readonly RULE_iso_level = 31;
    static readonly RULE_opt_boolean_or_string = 32;
    static readonly RULE_zone_value = 33;
    static readonly RULE_opt_encoding = 34;
    static readonly RULE_nonreservedword_or_sconst = 35;
    static readonly RULE_variableresetstmt = 36;
    static readonly RULE_reset_rest = 37;
    static readonly RULE_generic_reset = 38;
    static readonly RULE_setresetclause = 39;
    static readonly RULE_functionsetresetclause = 40;
    static readonly RULE_variableshowstmt = 41;
    static readonly RULE_constraintssetstmt = 42;
    static readonly RULE_constraints_set_list = 43;
    static readonly RULE_constraints_set_mode = 44;
    static readonly RULE_checkpointstmt = 45;
    static readonly RULE_discardstmt = 46;
    static readonly RULE_altertablestmt = 47;
    static readonly RULE_alter_table_cmds = 48;
    static readonly RULE_partition_cmd = 49;
    static readonly RULE_index_partition_cmd = 50;
    static readonly RULE_alter_table_cmd = 51;
    static readonly RULE_alter_column_default = 52;
    static readonly RULE_opt_drop_behavior = 53;
    static readonly RULE_opt_collate_clause = 54;
    static readonly RULE_alter_using = 55;
    static readonly RULE_replica_identity = 56;
    static readonly RULE_reloptions = 57;
    static readonly RULE_opt_reloptions = 58;
    static readonly RULE_reloption_list = 59;
    static readonly RULE_reloption_elem = 60;
    static readonly RULE_alter_identity_column_option_list = 61;
    static readonly RULE_alter_identity_column_option = 62;
    static readonly RULE_partitionboundspec = 63;
    static readonly RULE_hash_partbound_elem = 64;
    static readonly RULE_hash_partbound = 65;
    static readonly RULE_altercompositetypestmt = 66;
    static readonly RULE_alter_type_cmds = 67;
    static readonly RULE_alter_type_cmd = 68;
    static readonly RULE_closeportalstmt = 69;
    static readonly RULE_copystmt = 70;
    static readonly RULE_copy_from = 71;
    static readonly RULE_opt_program = 72;
    static readonly RULE_copy_file_name = 73;
    static readonly RULE_copy_options = 74;
    static readonly RULE_copy_opt_list = 75;
    static readonly RULE_copy_opt_item = 76;
    static readonly RULE_opt_binary = 77;
    static readonly RULE_copy_delimiter = 78;
    static readonly RULE_opt_using = 79;
    static readonly RULE_copy_generic_opt_list = 80;
    static readonly RULE_copy_generic_opt_elem = 81;
    static readonly RULE_copy_generic_opt_arg = 82;
    static readonly RULE_copy_generic_opt_arg_list = 83;
    static readonly RULE_copy_generic_opt_arg_list_item = 84;
    static readonly RULE_createstmt = 85;
    static readonly RULE_opttemp = 86;
    static readonly RULE_opttableelementlist = 87;
    static readonly RULE_opttypedtableelementlist = 88;
    static readonly RULE_tableelementlist = 89;
    static readonly RULE_typedtableelementlist = 90;
    static readonly RULE_tableelement = 91;
    static readonly RULE_typedtableelement = 92;
    static readonly RULE_columnDef = 93;
    static readonly RULE_columnOptions = 94;
    static readonly RULE_colquallist = 95;
    static readonly RULE_colconstraint = 96;
    static readonly RULE_colconstraintelem = 97;
    static readonly RULE_generated_when = 98;
    static readonly RULE_constraintattr = 99;
    static readonly RULE_tablelikeclause = 100;
    static readonly RULE_tablelikeoptionlist = 101;
    static readonly RULE_tablelikeoption = 102;
    static readonly RULE_tableconstraint = 103;
    static readonly RULE_constraintelem = 104;
    static readonly RULE_opt_no_inherit = 105;
    static readonly RULE_opt_column_list = 106;
    static readonly RULE_columnlist = 107;
    static readonly RULE_columnElem = 108;
    static readonly RULE_opt_c_include = 109;
    static readonly RULE_key_match = 110;
    static readonly RULE_exclusionconstraintlist = 111;
    static readonly RULE_exclusionconstraintelem = 112;
    static readonly RULE_exclusionwhereclause = 113;
    static readonly RULE_key_actions = 114;
    static readonly RULE_key_update = 115;
    static readonly RULE_key_delete = 116;
    static readonly RULE_key_action = 117;
    static readonly RULE_optinherit = 118;
    static readonly RULE_optpartitionspec = 119;
    static readonly RULE_partitionspec = 120;
    static readonly RULE_part_params = 121;
    static readonly RULE_part_elem = 122;
    static readonly RULE_table_access_method_clause = 123;
    static readonly RULE_optwith = 124;
    static readonly RULE_oncommitoption = 125;
    static readonly RULE_opttablespace = 126;
    static readonly RULE_optconstablespace = 127;
    static readonly RULE_existingindex = 128;
    static readonly RULE_createstatsstmt = 129;
    static readonly RULE_alterstatsstmt = 130;
    static readonly RULE_createasstmt = 131;
    static readonly RULE_create_as_target = 132;
    static readonly RULE_opt_with_data = 133;
    static readonly RULE_creatematviewstmt = 134;
    static readonly RULE_create_mv_target = 135;
    static readonly RULE_optnolog = 136;
    static readonly RULE_refreshmatviewstmt = 137;
    static readonly RULE_createseqstmt = 138;
    static readonly RULE_alterseqstmt = 139;
    static readonly RULE_optseqoptlist = 140;
    static readonly RULE_optparenthesizedseqoptlist = 141;
    static readonly RULE_seqoptlist = 142;
    static readonly RULE_seqoptelem = 143;
    static readonly RULE_opt_by = 144;
    static readonly RULE_numericonly = 145;
    static readonly RULE_numericonly_list = 146;
    static readonly RULE_createplangstmt = 147;
    static readonly RULE_opt_trusted = 148;
    static readonly RULE_handler_name = 149;
    static readonly RULE_opt_inline_handler = 150;
    static readonly RULE_validator_clause = 151;
    static readonly RULE_opt_validator = 152;
    static readonly RULE_opt_procedural = 153;
    static readonly RULE_createtablespacestmt = 154;
    static readonly RULE_opttablespaceowner = 155;
    static readonly RULE_droptablespacestmt = 156;
    static readonly RULE_createextensionstmt = 157;
    static readonly RULE_create_extension_opt_list = 158;
    static readonly RULE_create_extension_opt_item = 159;
    static readonly RULE_alterextensionstmt = 160;
    static readonly RULE_alter_extension_opt_list = 161;
    static readonly RULE_alter_extension_opt_item = 162;
    static readonly RULE_alterextensioncontentsstmt = 163;
    static readonly RULE_createfdwstmt = 164;
    static readonly RULE_fdw_option = 165;
    static readonly RULE_fdw_options = 166;
    static readonly RULE_opt_fdw_options = 167;
    static readonly RULE_alterfdwstmt = 168;
    static readonly RULE_create_generic_options = 169;
    static readonly RULE_generic_option_list = 170;
    static readonly RULE_alter_generic_options = 171;
    static readonly RULE_alter_generic_option_list = 172;
    static readonly RULE_alter_generic_option_elem = 173;
    static readonly RULE_generic_option_elem = 174;
    static readonly RULE_generic_option_name = 175;
    static readonly RULE_generic_option_arg = 176;
    static readonly RULE_createforeignserverstmt = 177;
    static readonly RULE_opt_type = 178;
    static readonly RULE_foreign_server_version = 179;
    static readonly RULE_opt_foreign_server_version = 180;
    static readonly RULE_alterforeignserverstmt = 181;
    static readonly RULE_createforeigntablestmt = 182;
    static readonly RULE_importforeignschemastmt = 183;
    static readonly RULE_import_qualification_type = 184;
    static readonly RULE_import_qualification = 185;
    static readonly RULE_createusermappingstmt = 186;
    static readonly RULE_auth_ident = 187;
    static readonly RULE_dropusermappingstmt = 188;
    static readonly RULE_alterusermappingstmt = 189;
    static readonly RULE_createpolicystmt = 190;
    static readonly RULE_alterpolicystmt = 191;
    static readonly RULE_rowsecurityoptionalexpr = 192;
    static readonly RULE_rowsecurityoptionalwithcheck = 193;
    static readonly RULE_rowsecuritydefaulttorole = 194;
    static readonly RULE_rowsecurityoptionaltorole = 195;
    static readonly RULE_rowsecuritydefaultpermissive = 196;
    static readonly RULE_rowsecuritydefaultforcmd = 197;
    static readonly RULE_row_security_cmd = 198;
    static readonly RULE_createamstmt = 199;
    static readonly RULE_am_type = 200;
    static readonly RULE_createtrigstmt = 201;
    static readonly RULE_triggeractiontime = 202;
    static readonly RULE_triggerevents = 203;
    static readonly RULE_triggeroneevent = 204;
    static readonly RULE_triggerreferencing = 205;
    static readonly RULE_triggertransitions = 206;
    static readonly RULE_triggertransition = 207;
    static readonly RULE_transitionoldornew = 208;
    static readonly RULE_transitionrowortable = 209;
    static readonly RULE_transitionrelname = 210;
    static readonly RULE_triggerforspec = 211;
    static readonly RULE_triggerforopteach = 212;
    static readonly RULE_triggerfortype = 213;
    static readonly RULE_triggerwhen = 214;
    static readonly RULE_function_or_procedure = 215;
    static readonly RULE_triggerfuncargs = 216;
    static readonly RULE_triggerfuncarg = 217;
    static readonly RULE_optconstrfromtable = 218;
    static readonly RULE_constraintattributespec = 219;
    static readonly RULE_constraintattributeElem = 220;
    static readonly RULE_createeventtrigstmt = 221;
    static readonly RULE_event_trigger_when_list = 222;
    static readonly RULE_event_trigger_when_item = 223;
    static readonly RULE_event_trigger_value_list = 224;
    static readonly RULE_altereventtrigstmt = 225;
    static readonly RULE_enable_trigger = 226;
    static readonly RULE_createassertionstmt = 227;
    static readonly RULE_definestmt = 228;
    static readonly RULE_definition = 229;
    static readonly RULE_def_list = 230;
    static readonly RULE_def_elem = 231;
    static readonly RULE_def_arg = 232;
    static readonly RULE_old_aggr_definition = 233;
    static readonly RULE_old_aggr_list = 234;
    static readonly RULE_old_aggr_elem = 235;
    static readonly RULE_opt_enum_val_list = 236;
    static readonly RULE_enum_val_list = 237;
    static readonly RULE_alterenumstmt = 238;
    static readonly RULE_opt_if_not_exists = 239;
    static readonly RULE_createopclassstmt = 240;
    static readonly RULE_opclass_item_list = 241;
    static readonly RULE_opclass_item = 242;
    static readonly RULE_opt_default = 243;
    static readonly RULE_opt_opfamily = 244;
    static readonly RULE_opclass_purpose = 245;
    static readonly RULE_opt_recheck = 246;
    static readonly RULE_createopfamilystmt = 247;
    static readonly RULE_alteropfamilystmt = 248;
    static readonly RULE_opclass_drop_list = 249;
    static readonly RULE_opclass_drop = 250;
    static readonly RULE_dropopclassstmt = 251;
    static readonly RULE_dropopfamilystmt = 252;
    static readonly RULE_dropownedstmt = 253;
    static readonly RULE_reassignownedstmt = 254;
    static readonly RULE_dropstmt = 255;
    static readonly RULE_object_type_any_name = 256;
    static readonly RULE_object_type_name = 257;
    static readonly RULE_drop_type_name = 258;
    static readonly RULE_object_type_name_on_any_name = 259;
    static readonly RULE_any_name_list = 260;
    static readonly RULE_any_name = 261;
    static readonly RULE_attrs = 262;
    static readonly RULE_type_name_list = 263;
    static readonly RULE_truncatestmt = 264;
    static readonly RULE_opt_restart_seqs = 265;
    static readonly RULE_commentstmt = 266;
    static readonly RULE_comment_text = 267;
    static readonly RULE_seclabelstmt = 268;
    static readonly RULE_opt_provider = 269;
    static readonly RULE_security_label = 270;
    static readonly RULE_fetchstmt = 271;
    static readonly RULE_fetch_args = 272;
    static readonly RULE_from_in = 273;
    static readonly RULE_opt_from_in = 274;
    static readonly RULE_grantstmt = 275;
    static readonly RULE_revokestmt = 276;
    static readonly RULE_privileges = 277;
    static readonly RULE_privilege_list = 278;
    static readonly RULE_privilege = 279;
    static readonly RULE_privilege_target = 280;
    static readonly RULE_grantee_list = 281;
    static readonly RULE_grantee = 282;
    static readonly RULE_opt_grant_grant_option = 283;
    static readonly RULE_grantrolestmt = 284;
    static readonly RULE_revokerolestmt = 285;
    static readonly RULE_opt_grant_admin_option = 286;
    static readonly RULE_opt_granted_by = 287;
    static readonly RULE_alterdefaultprivilegesstmt = 288;
    static readonly RULE_defacloptionlist = 289;
    static readonly RULE_defacloption = 290;
    static readonly RULE_defaclaction = 291;
    static readonly RULE_defacl_privilege_target = 292;
    static readonly RULE_indexstmt = 293;
    static readonly RULE_opt_unique = 294;
    static readonly RULE_opt_concurrently = 295;
    static readonly RULE_opt_index_name = 296;
    static readonly RULE_access_method_clause = 297;
    static readonly RULE_index_params = 298;
    static readonly RULE_index_elem_options = 299;
    static readonly RULE_index_elem = 300;
    static readonly RULE_opt_include = 301;
    static readonly RULE_index_including_params = 302;
    static readonly RULE_opt_collate = 303;
    static readonly RULE_opt_class = 304;
    static readonly RULE_opt_asc_desc = 305;
    static readonly RULE_opt_nulls_order = 306;
    static readonly RULE_createfunctionstmt = 307;
    static readonly RULE_opt_or_replace = 308;
    static readonly RULE_func_args = 309;
    static readonly RULE_func_args_list = 310;
    static readonly RULE_function_with_argtypes_list = 311;
    static readonly RULE_function_with_argtypes = 312;
    static readonly RULE_func_args_with_defaults = 313;
    static readonly RULE_func_args_with_defaults_list = 314;
    static readonly RULE_func_arg = 315;
    static readonly RULE_arg_class = 316;
    static readonly RULE_param_name = 317;
    static readonly RULE_func_return = 318;
    static readonly RULE_func_type = 319;
    static readonly RULE_func_arg_with_default = 320;
    static readonly RULE_aggr_arg = 321;
    static readonly RULE_aggr_args = 322;
    static readonly RULE_aggr_args_list = 323;
    static readonly RULE_aggregate_with_argtypes = 324;
    static readonly RULE_aggregate_with_argtypes_list = 325;
    static readonly RULE_createfunc_opt_list = 326;
    static readonly RULE_common_func_opt_item = 327;
    static readonly RULE_createfunc_opt_item = 328;
    static readonly RULE_func_as = 329;
    static readonly RULE_transform_type_list = 330;
    static readonly RULE_opt_definition = 331;
    static readonly RULE_table_func_column = 332;
    static readonly RULE_table_func_column_list = 333;
    static readonly RULE_alterfunctionstmt = 334;
    static readonly RULE_alterfunc_opt_list = 335;
    static readonly RULE_opt_restrict = 336;
    static readonly RULE_removefuncstmt = 337;
    static readonly RULE_removeaggrstmt = 338;
    static readonly RULE_removeoperstmt = 339;
    static readonly RULE_oper_argtypes = 340;
    static readonly RULE_any_operator = 341;
    static readonly RULE_operator_with_argtypes_list = 342;
    static readonly RULE_operator_with_argtypes = 343;
    static readonly RULE_dostmt = 344;
    static readonly RULE_dostmt_opt_list = 345;
    static readonly RULE_dostmt_opt_item = 346;
    static readonly RULE_createcaststmt = 347;
    static readonly RULE_cast_context = 348;
    static readonly RULE_dropcaststmt = 349;
    static readonly RULE_opt_if_exists = 350;
    static readonly RULE_createtransformstmt = 351;
    static readonly RULE_transform_element_list = 352;
    static readonly RULE_droptransformstmt = 353;
    static readonly RULE_reindexstmt = 354;
    static readonly RULE_reindex_target_type = 355;
    static readonly RULE_reindex_target_multitable = 356;
    static readonly RULE_reindex_option_list = 357;
    static readonly RULE_reindex_option_elem = 358;
    static readonly RULE_altertblspcstmt = 359;
    static readonly RULE_renamestmt = 360;
    static readonly RULE_opt_column = 361;
    static readonly RULE_opt_set_data = 362;
    static readonly RULE_alterobjectdependsstmt = 363;
    static readonly RULE_opt_no = 364;
    static readonly RULE_alterobjectschemastmt = 365;
    static readonly RULE_alteroperatorstmt = 366;
    static readonly RULE_operator_def_list = 367;
    static readonly RULE_operator_def_elem = 368;
    static readonly RULE_operator_def_arg = 369;
    static readonly RULE_altertypestmt = 370;
    static readonly RULE_alterownerstmt = 371;
    static readonly RULE_createpublicationstmt = 372;
    static readonly RULE_opt_publication_for_tables = 373;
    static readonly RULE_publication_for_tables = 374;
    static readonly RULE_alterpublicationstmt = 375;
    static readonly RULE_createsubscriptionstmt = 376;
    static readonly RULE_publication_name_list = 377;
    static readonly RULE_publication_name_item = 378;
    static readonly RULE_altersubscriptionstmt = 379;
    static readonly RULE_dropsubscriptionstmt = 380;
    static readonly RULE_rulestmt = 381;
    static readonly RULE_ruleactionlist = 382;
    static readonly RULE_ruleactionmulti = 383;
    static readonly RULE_ruleactionstmt = 384;
    static readonly RULE_ruleactionstmtOrEmpty = 385;
    static readonly RULE_event = 386;
    static readonly RULE_opt_instead = 387;
    static readonly RULE_notifystmt = 388;
    static readonly RULE_notify_payload = 389;
    static readonly RULE_listenstmt = 390;
    static readonly RULE_unlistenstmt = 391;
    static readonly RULE_transactionstmt = 392;
    static readonly RULE_opt_transaction = 393;
    static readonly RULE_transaction_mode_item = 394;
    static readonly RULE_transaction_mode_list = 395;
    static readonly RULE_transaction_mode_list_or_empty = 396;
    static readonly RULE_opt_transaction_chain = 397;
    static readonly RULE_viewstmt = 398;
    static readonly RULE_opt_check_option = 399;
    static readonly RULE_loadstmt = 400;
    static readonly RULE_createdbstmt = 401;
    static readonly RULE_createdb_opt_list = 402;
    static readonly RULE_createdb_opt_items = 403;
    static readonly RULE_createdb_opt_item = 404;
    static readonly RULE_createdb_opt_name = 405;
    static readonly RULE_opt_equal = 406;
    static readonly RULE_alterdatabasestmt = 407;
    static readonly RULE_alterdatabasesetstmt = 408;
    static readonly RULE_dropdbstmt = 409;
    static readonly RULE_drop_option_list = 410;
    static readonly RULE_drop_option = 411;
    static readonly RULE_altercollationstmt = 412;
    static readonly RULE_altersystemstmt = 413;
    static readonly RULE_createdomainstmt = 414;
    static readonly RULE_alterdomainstmt = 415;
    static readonly RULE_opt_as = 416;
    static readonly RULE_altertsdictionarystmt = 417;
    static readonly RULE_altertsconfigurationstmt = 418;
    static readonly RULE_any_with = 419;
    static readonly RULE_createconversionstmt = 420;
    static readonly RULE_clusterstmt = 421;
    static readonly RULE_cluster_index_specification = 422;
    static readonly RULE_vacuumstmt = 423;
    static readonly RULE_analyzestmt = 424;
    static readonly RULE_vac_analyze_option_list = 425;
    static readonly RULE_analyze_keyword = 426;
    static readonly RULE_vac_analyze_option_elem = 427;
    static readonly RULE_vac_analyze_option_name = 428;
    static readonly RULE_vac_analyze_option_arg = 429;
    static readonly RULE_opt_analyze = 430;
    static readonly RULE_opt_verbose = 431;
    static readonly RULE_opt_full = 432;
    static readonly RULE_opt_freeze = 433;
    static readonly RULE_opt_name_list = 434;
    static readonly RULE_vacuum_relation = 435;
    static readonly RULE_vacuum_relation_list = 436;
    static readonly RULE_opt_vacuum_relation_list = 437;
    static readonly RULE_explainstmt = 438;
    static readonly RULE_explainablestmt = 439;
    static readonly RULE_explain_option_list = 440;
    static readonly RULE_explain_option_elem = 441;
    static readonly RULE_explain_option_name = 442;
    static readonly RULE_explain_option_arg = 443;
    static readonly RULE_preparestmt = 444;
    static readonly RULE_prep_type_clause = 445;
    static readonly RULE_preparablestmt = 446;
    static readonly RULE_executestmt = 447;
    static readonly RULE_execute_param_clause = 448;
    static readonly RULE_deallocatestmt = 449;
    static readonly RULE_insertstmt = 450;
    static readonly RULE_insert_target = 451;
    static readonly RULE_insert_rest = 452;
    static readonly RULE_override_kind = 453;
    static readonly RULE_insert_column_list = 454;
    static readonly RULE_insert_column_item = 455;
    static readonly RULE_opt_on_conflict = 456;
    static readonly RULE_opt_conf_expr = 457;
    static readonly RULE_returning_clause = 458;
    static readonly RULE_deletestmt = 459;
    static readonly RULE_using_clause = 460;
    static readonly RULE_lockstmt = 461;
    static readonly RULE_opt_lock = 462;
    static readonly RULE_lock_type = 463;
    static readonly RULE_opt_nowait = 464;
    static readonly RULE_opt_nowait_or_skip = 465;
    static readonly RULE_updatestmt = 466;
    static readonly RULE_set_clause_list = 467;
    static readonly RULE_set_clause = 468;
    static readonly RULE_set_target = 469;
    static readonly RULE_set_target_list = 470;
    static readonly RULE_declarecursorstmt = 471;
    static readonly RULE_cursor_name = 472;
    static readonly RULE_cursor_options = 473;
    static readonly RULE_opt_hold = 474;
    static readonly RULE_selectstmt = 475;
    static readonly RULE_select_with_parens = 476;
    static readonly RULE_select_no_parens = 477;
    static readonly RULE_select_clause = 478;
    static readonly RULE_simple_select = 479;
    static readonly RULE_set_operator = 480;
    static readonly RULE_set_operator_with_all_or_distinct = 481;
    static readonly RULE_with_clause = 482;
    static readonly RULE_cte_list = 483;
    static readonly RULE_common_table_expr = 484;
    static readonly RULE_opt_materialized = 485;
    static readonly RULE_opt_with_clause = 486;
    static readonly RULE_into_clause = 487;
    static readonly RULE_opt_strict = 488;
    static readonly RULE_opttempTableName = 489;
    static readonly RULE_opt_table = 490;
    static readonly RULE_all_or_distinct = 491;
    static readonly RULE_distinct_clause = 492;
    static readonly RULE_opt_all_clause = 493;
    static readonly RULE_opt_sort_clause = 494;
    static readonly RULE_sort_clause = 495;
    static readonly RULE_sortby_list = 496;
    static readonly RULE_sortby = 497;
    static readonly RULE_select_limit = 498;
    static readonly RULE_opt_select_limit = 499;
    static readonly RULE_limit_clause = 500;
    static readonly RULE_offset_clause = 501;
    static readonly RULE_select_limit_value = 502;
    static readonly RULE_select_offset_value = 503;
    static readonly RULE_select_fetch_first_value = 504;
    static readonly RULE_i_or_f_const = 505;
    static readonly RULE_row_or_rows = 506;
    static readonly RULE_first_or_next = 507;
    static readonly RULE_group_clause = 508;
    static readonly RULE_group_by_list = 509;
    static readonly RULE_group_by_item = 510;
    static readonly RULE_empty_grouping_set = 511;
    static readonly RULE_rollup_clause = 512;
    static readonly RULE_cube_clause = 513;
    static readonly RULE_grouping_sets_clause = 514;
    static readonly RULE_having_clause = 515;
    static readonly RULE_for_locking_clause = 516;
    static readonly RULE_opt_for_locking_clause = 517;
    static readonly RULE_for_locking_items = 518;
    static readonly RULE_for_locking_item = 519;
    static readonly RULE_for_locking_strength = 520;
    static readonly RULE_locked_rels_list = 521;
    static readonly RULE_values_clause = 522;
    static readonly RULE_from_clause = 523;
    static readonly RULE_from_list = 524;
    static readonly RULE_table_ref = 525;
    static readonly RULE_alias_clause = 526;
    static readonly RULE_opt_alias_clause = 527;
    static readonly RULE_func_alias_clause = 528;
    static readonly RULE_join_type = 529;
    static readonly RULE_join_qual = 530;
    static readonly RULE_relation_expr = 531;
    static readonly RULE_relation_expr_list = 532;
    static readonly RULE_relation_expr_opt_alias = 533;
    static readonly RULE_tablesample_clause = 534;
    static readonly RULE_opt_repeatable_clause = 535;
    static readonly RULE_func_table = 536;
    static readonly RULE_rowsfrom_item = 537;
    static readonly RULE_rowsfrom_list = 538;
    static readonly RULE_opt_col_def_list = 539;
    static readonly RULE_opt_ordinality = 540;
    static readonly RULE_where_clause = 541;
    static readonly RULE_where_or_current_clause = 542;
    static readonly RULE_opttablefuncelementlist = 543;
    static readonly RULE_tablefuncelementlist = 544;
    static readonly RULE_tablefuncelement = 545;
    static readonly RULE_xmltable = 546;
    static readonly RULE_xmltable_column_list = 547;
    static readonly RULE_xmltable_column_el = 548;
    static readonly RULE_xmltable_column_option_list = 549;
    static readonly RULE_xmltable_column_option_el = 550;
    static readonly RULE_xml_namespace_list = 551;
    static readonly RULE_xml_namespace_el = 552;
    static readonly RULE_typename = 553;
    static readonly RULE_opt_array_bounds = 554;
    static readonly RULE_simpletypename = 555;
    static readonly RULE_consttypename = 556;
    static readonly RULE_generictype = 557;
    static readonly RULE_opt_type_modifiers = 558;
    static readonly RULE_numeric = 559;
    static readonly RULE_opt_float = 560;
    static readonly RULE_bit = 561;
    static readonly RULE_constbit = 562;
    static readonly RULE_bitwithlength = 563;
    static readonly RULE_bitwithoutlength = 564;
    static readonly RULE_character = 565;
    static readonly RULE_constcharacter = 566;
    static readonly RULE_character_c = 567;
    static readonly RULE_opt_varying = 568;
    static readonly RULE_constdatetime = 569;
    static readonly RULE_constinterval = 570;
    static readonly RULE_opt_timezone = 571;
    static readonly RULE_opt_interval = 572;
    static readonly RULE_interval_second = 573;
    static readonly RULE_opt_escape = 574;
    static readonly RULE_a_expr = 575;
    static readonly RULE_a_expr_qual = 576;
    static readonly RULE_a_expr_lessless = 577;
    static readonly RULE_a_expr_or = 578;
    static readonly RULE_a_expr_and = 579;
    static readonly RULE_a_expr_in = 580;
    static readonly RULE_a_expr_unary_not = 581;
    static readonly RULE_a_expr_isnull = 582;
    static readonly RULE_a_expr_is_not = 583;
    static readonly RULE_a_expr_compare = 584;
    static readonly RULE_a_expr_like = 585;
    static readonly RULE_a_expr_qual_op = 586;
    static readonly RULE_a_expr_unary_qualop = 587;
    static readonly RULE_a_expr_add = 588;
    static readonly RULE_a_expr_mul = 589;
    static readonly RULE_a_expr_caret = 590;
    static readonly RULE_a_expr_unary_sign = 591;
    static readonly RULE_a_expr_at_time_zone = 592;
    static readonly RULE_a_expr_collate = 593;
    static readonly RULE_a_expr_typecast = 594;
    static readonly RULE_b_expr = 595;
    static readonly RULE_c_expr = 596;
    static readonly RULE_plsqlvariablename = 597;
    static readonly RULE_func_application = 598;
    static readonly RULE_func_expr = 599;
    static readonly RULE_func_expr_windowless = 600;
    static readonly RULE_func_expr_common_subexpr = 601;
    static readonly RULE_xml_root_version = 602;
    static readonly RULE_opt_xml_root_standalone = 603;
    static readonly RULE_xml_attributes = 604;
    static readonly RULE_xml_attribute_list = 605;
    static readonly RULE_xml_attribute_el = 606;
    static readonly RULE_document_or_content = 607;
    static readonly RULE_xml_whitespace_option = 608;
    static readonly RULE_xmlexists_argument = 609;
    static readonly RULE_xml_passing_mech = 610;
    static readonly RULE_within_group_clause = 611;
    static readonly RULE_filter_clause = 612;
    static readonly RULE_window_clause = 613;
    static readonly RULE_window_definition_list = 614;
    static readonly RULE_window_definition = 615;
    static readonly RULE_over_clause = 616;
    static readonly RULE_window_specification = 617;
    static readonly RULE_opt_existing_window_name = 618;
    static readonly RULE_opt_partition_clause = 619;
    static readonly RULE_opt_frame_clause = 620;
    static readonly RULE_frame_extent = 621;
    static readonly RULE_frame_bound = 622;
    static readonly RULE_opt_window_exclusion_clause = 623;
    static readonly RULE_row = 624;
    static readonly RULE_explicit_row = 625;
    static readonly RULE_implicit_row = 626;
    static readonly RULE_sub_type = 627;
    static readonly RULE_all_op = 628;
    static readonly RULE_mathop = 629;
    static readonly RULE_qual_op = 630;
    static readonly RULE_qual_all_op = 631;
    static readonly RULE_subquery_Op = 632;
    static readonly RULE_expr_list = 633;
    static readonly RULE_func_arg_list = 634;
    static readonly RULE_func_arg_expr = 635;
    static readonly RULE_type_list = 636;
    static readonly RULE_array_expr = 637;
    static readonly RULE_array_expr_list = 638;
    static readonly RULE_extract_list = 639;
    static readonly RULE_extract_arg = 640;
    static readonly RULE_unicode_normal_form = 641;
    static readonly RULE_overlay_list = 642;
    static readonly RULE_position_list = 643;
    static readonly RULE_substr_list = 644;
    static readonly RULE_trim_list = 645;
    static readonly RULE_in_expr = 646;
    static readonly RULE_case_expr = 647;
    static readonly RULE_when_clause_list = 648;
    static readonly RULE_when_clause = 649;
    static readonly RULE_case_default = 650;
    static readonly RULE_case_arg = 651;
    static readonly RULE_columnref = 652;
    static readonly RULE_indirection_el = 653;
    static readonly RULE_opt_slice_bound = 654;
    static readonly RULE_indirection = 655;
    static readonly RULE_opt_indirection = 656;
    static readonly RULE_opt_target_list = 657;
    static readonly RULE_target_list = 658;
    static readonly RULE_target_el = 659;
    static readonly RULE_qualified_name_list = 660;
    static readonly RULE_qualified_name = 661;
    static readonly RULE_name_list = 662;
    static readonly RULE_name = 663;
    static readonly RULE_attr_name = 664;
    static readonly RULE_file_name = 665;
    static readonly RULE_func_name = 666;
    static readonly RULE_aexprconst = 667;
    static readonly RULE_xconst = 668;
    static readonly RULE_bconst = 669;
    static readonly RULE_fconst = 670;
    static readonly RULE_iconst = 671;
    static readonly RULE_sconst = 672;
    static readonly RULE_anysconst = 673;
    static readonly RULE_opt_uescape = 674;
    static readonly RULE_signediconst = 675;
    static readonly RULE_roleid = 676;
    static readonly RULE_rolespec = 677;
    static readonly RULE_role_list = 678;
    static readonly RULE_colid = 679;
    static readonly RULE_type_function_name = 680;
    static readonly RULE_nonreservedword = 681;
    static readonly RULE_collabel = 682;
    static readonly RULE_identifier = 683;
    static readonly RULE_plsqlidentifier = 684;
    static readonly RULE_unreserved_keyword = 685;
    static readonly RULE_col_name_keyword = 686;
    static readonly RULE_type_func_name_keyword = 687;
    static readonly RULE_reserved_keyword = 688;
    static readonly RULE_pl_function = 689;
    static readonly RULE_comp_options = 690;
    static readonly RULE_comp_option = 691;
    static readonly RULE_sharp = 692;
    static readonly RULE_option_value = 693;
    static readonly RULE_opt_semi = 694;
    static readonly RULE_pl_block = 695;
    static readonly RULE_decl_sect = 696;
    static readonly RULE_decl_start = 697;
    static readonly RULE_decl_stmts = 698;
    static readonly RULE_label_decl = 699;
    static readonly RULE_decl_stmt = 700;
    static readonly RULE_decl_statement = 701;
    static readonly RULE_opt_scrollable = 702;
    static readonly RULE_decl_cursor_query = 703;
    static readonly RULE_decl_cursor_args = 704;
    static readonly RULE_decl_cursor_arglist = 705;
    static readonly RULE_decl_cursor_arg = 706;
    static readonly RULE_decl_is_for = 707;
    static readonly RULE_decl_aliasitem = 708;
    static readonly RULE_decl_varname = 709;
    static readonly RULE_decl_const = 710;
    static readonly RULE_decl_datatype = 711;
    static readonly RULE_decl_collate = 712;
    static readonly RULE_decl_notnull = 713;
    static readonly RULE_decl_defval = 714;
    static readonly RULE_decl_defkey = 715;
    static readonly RULE_assign_operator = 716;
    static readonly RULE_proc_sect = 717;
    static readonly RULE_proc_stmt = 718;
    static readonly RULE_stmt_perform = 719;
    static readonly RULE_stmt_call = 720;
    static readonly RULE_opt_expr_list = 721;
    static readonly RULE_stmt_assign = 722;
    static readonly RULE_stmt_getdiag = 723;
    static readonly RULE_getdiag_area_opt = 724;
    static readonly RULE_getdiag_list = 725;
    static readonly RULE_getdiag_list_item = 726;
    static readonly RULE_getdiag_item = 727;
    static readonly RULE_getdiag_target = 728;
    static readonly RULE_assign_var = 729;
    static readonly RULE_stmt_if = 730;
    static readonly RULE_stmt_elsifs = 731;
    static readonly RULE_stmt_else = 732;
    static readonly RULE_stmt_case = 733;
    static readonly RULE_opt_expr_until_when = 734;
    static readonly RULE_case_when_list = 735;
    static readonly RULE_case_when = 736;
    static readonly RULE_opt_case_else = 737;
    static readonly RULE_stmt_loop = 738;
    static readonly RULE_stmt_while = 739;
    static readonly RULE_stmt_for = 740;
    static readonly RULE_for_control = 741;
    static readonly RULE_opt_for_using_expression = 742;
    static readonly RULE_opt_cursor_parameters = 743;
    static readonly RULE_opt_reverse = 744;
    static readonly RULE_opt_by_expression = 745;
    static readonly RULE_for_variable = 746;
    static readonly RULE_stmt_foreach_a = 747;
    static readonly RULE_foreach_slice = 748;
    static readonly RULE_stmt_exit = 749;
    static readonly RULE_exit_type = 750;
    static readonly RULE_stmt_return = 751;
    static readonly RULE_opt_return_result = 752;
    static readonly RULE_stmt_raise = 753;
    static readonly RULE_opt_stmt_raise_level = 754;
    static readonly RULE_opt_raise_list = 755;
    static readonly RULE_opt_raise_using = 756;
    static readonly RULE_opt_raise_using_elem = 757;
    static readonly RULE_opt_raise_using_elem_list = 758;
    static readonly RULE_stmt_assert = 759;
    static readonly RULE_opt_stmt_assert_message = 760;
    static readonly RULE_loop_body = 761;
    static readonly RULE_stmt_execsql = 762;
    static readonly RULE_stmt_dynexecute = 763;
    static readonly RULE_opt_execute_using = 764;
    static readonly RULE_opt_execute_using_list = 765;
    static readonly RULE_opt_execute_into = 766;
    static readonly RULE_stmt_open = 767;
    static readonly RULE_opt_open_bound_list_item = 768;
    static readonly RULE_opt_open_bound_list = 769;
    static readonly RULE_opt_open_using = 770;
    static readonly RULE_opt_scroll_option = 771;
    static readonly RULE_opt_scroll_option_no = 772;
    static readonly RULE_stmt_fetch = 773;
    static readonly RULE_into_target = 774;
    static readonly RULE_opt_cursor_from = 775;
    static readonly RULE_opt_fetch_direction = 776;
    static readonly RULE_stmt_move = 777;
    static readonly RULE_stmt_close = 778;
    static readonly RULE_stmt_null = 779;
    static readonly RULE_stmt_commit = 780;
    static readonly RULE_stmt_rollback = 781;
    static readonly RULE_plsql_opt_transaction_chain = 782;
    static readonly RULE_stmt_set = 783;
    static readonly RULE_cursor_variable = 784;
    static readonly RULE_exception_sect = 785;
    static readonly RULE_proc_exceptions = 786;
    static readonly RULE_proc_exception = 787;
    static readonly RULE_proc_conditions = 788;
    static readonly RULE_proc_condition = 789;
    static readonly RULE_opt_block_label = 790;
    static readonly RULE_opt_loop_label = 791;
    static readonly RULE_opt_label = 792;
    static readonly RULE_opt_exitcond = 793;
    static readonly RULE_any_identifier = 794;
    static readonly RULE_plsql_unreserved_keyword = 795;
    static readonly RULE_sql_expression = 796;
    static readonly RULE_expr_until_then = 797;
    static readonly RULE_expr_until_semi = 798;
    static readonly RULE_expr_until_rightbracket = 799;
    static readonly RULE_expr_until_loop = 800;
    static readonly RULE_make_execsql_stmt = 801;
    static readonly RULE_opt_returning_clause_into = 802;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    constructor(input: TokenStream);
    program(): ProgramContext;
    plsqlroot(): PlsqlrootContext;
    stmtmulti(): StmtmultiContext;
    stmt(): StmtContext;
    plsqlconsolecommand(): PlsqlconsolecommandContext;
    callstmt(): CallstmtContext;
    createrolestmt(): CreaterolestmtContext;
    opt_with(): Opt_withContext;
    optrolelist(): OptrolelistContext;
    alteroptrolelist(): AlteroptrolelistContext;
    alteroptroleelem(): AlteroptroleelemContext;
    createoptroleelem(): CreateoptroleelemContext;
    createuserstmt(): CreateuserstmtContext;
    alterrolestmt(): AlterrolestmtContext;
    opt_in_database(): Opt_in_databaseContext;
    alterrolesetstmt(): AlterrolesetstmtContext;
    droprolestmt(): DroprolestmtContext;
    creategroupstmt(): CreategroupstmtContext;
    altergroupstmt(): AltergroupstmtContext;
    add_drop(): Add_dropContext;
    createschemastmt(): CreateschemastmtContext;
    optschemaname(): OptschemanameContext;
    optschemaeltlist(): OptschemaeltlistContext;
    schema_stmt(): Schema_stmtContext;
    variablesetstmt(): VariablesetstmtContext;
    set_rest(): Set_restContext;
    generic_set(): Generic_setContext;
    set_rest_more(): Set_rest_moreContext;
    var_name(): Var_nameContext;
    var_list(): Var_listContext;
    var_value(): Var_valueContext;
    iso_level(): Iso_levelContext;
    opt_boolean_or_string(): Opt_boolean_or_stringContext;
    zone_value(): Zone_valueContext;
    opt_encoding(): Opt_encodingContext;
    nonreservedword_or_sconst(): Nonreservedword_or_sconstContext;
    variableresetstmt(): VariableresetstmtContext;
    reset_rest(): Reset_restContext;
    generic_reset(): Generic_resetContext;
    setresetclause(): SetresetclauseContext;
    functionsetresetclause(): FunctionsetresetclauseContext;
    variableshowstmt(): VariableshowstmtContext;
    constraintssetstmt(): ConstraintssetstmtContext;
    constraints_set_list(): Constraints_set_listContext;
    constraints_set_mode(): Constraints_set_modeContext;
    checkpointstmt(): CheckpointstmtContext;
    discardstmt(): DiscardstmtContext;
    altertablestmt(): AltertablestmtContext;
    alter_table_cmds(): Alter_table_cmdsContext;
    partition_cmd(): Partition_cmdContext;
    index_partition_cmd(): Index_partition_cmdContext;
    alter_table_cmd(): Alter_table_cmdContext;
    alter_column_default(): Alter_column_defaultContext;
    opt_drop_behavior(): Opt_drop_behaviorContext;
    opt_collate_clause(): Opt_collate_clauseContext;
    alter_using(): Alter_usingContext;
    replica_identity(): Replica_identityContext;
    reloptions(): ReloptionsContext;
    opt_reloptions(): Opt_reloptionsContext;
    reloption_list(): Reloption_listContext;
    reloption_elem(): Reloption_elemContext;
    alter_identity_column_option_list(): Alter_identity_column_option_listContext;
    alter_identity_column_option(): Alter_identity_column_optionContext;
    partitionboundspec(): PartitionboundspecContext;
    hash_partbound_elem(): Hash_partbound_elemContext;
    hash_partbound(): Hash_partboundContext;
    altercompositetypestmt(): AltercompositetypestmtContext;
    alter_type_cmds(): Alter_type_cmdsContext;
    alter_type_cmd(): Alter_type_cmdContext;
    closeportalstmt(): CloseportalstmtContext;
    copystmt(): CopystmtContext;
    copy_from(): Copy_fromContext;
    opt_program(): Opt_programContext;
    copy_file_name(): Copy_file_nameContext;
    copy_options(): Copy_optionsContext;
    copy_opt_list(): Copy_opt_listContext;
    copy_opt_item(): Copy_opt_itemContext;
    opt_binary(): Opt_binaryContext;
    copy_delimiter(): Copy_delimiterContext;
    opt_using(): Opt_usingContext;
    copy_generic_opt_list(): Copy_generic_opt_listContext;
    copy_generic_opt_elem(): Copy_generic_opt_elemContext;
    copy_generic_opt_arg(): Copy_generic_opt_argContext;
    copy_generic_opt_arg_list(): Copy_generic_opt_arg_listContext;
    copy_generic_opt_arg_list_item(): Copy_generic_opt_arg_list_itemContext;
    createstmt(): CreatestmtContext;
    opttemp(): OpttempContext;
    opttableelementlist(): OpttableelementlistContext;
    opttypedtableelementlist(): OpttypedtableelementlistContext;
    tableelementlist(): TableelementlistContext;
    typedtableelementlist(): TypedtableelementlistContext;
    tableelement(): TableelementContext;
    typedtableelement(): TypedtableelementContext;
    columnDef(): ColumnDefContext;
    columnOptions(): ColumnOptionsContext;
    colquallist(): ColquallistContext;
    colconstraint(): ColconstraintContext;
    colconstraintelem(): ColconstraintelemContext;
    generated_when(): Generated_whenContext;
    constraintattr(): ConstraintattrContext;
    tablelikeclause(): TablelikeclauseContext;
    tablelikeoptionlist(): TablelikeoptionlistContext;
    tablelikeoption(): TablelikeoptionContext;
    tableconstraint(): TableconstraintContext;
    constraintelem(): ConstraintelemContext;
    opt_no_inherit(): Opt_no_inheritContext;
    opt_column_list(): Opt_column_listContext;
    columnlist(): ColumnlistContext;
    columnElem(): ColumnElemContext;
    opt_c_include(): Opt_c_includeContext;
    key_match(): Key_matchContext;
    exclusionconstraintlist(): ExclusionconstraintlistContext;
    exclusionconstraintelem(): ExclusionconstraintelemContext;
    exclusionwhereclause(): ExclusionwhereclauseContext;
    key_actions(): Key_actionsContext;
    key_update(): Key_updateContext;
    key_delete(): Key_deleteContext;
    key_action(): Key_actionContext;
    optinherit(): OptinheritContext;
    optpartitionspec(): OptpartitionspecContext;
    partitionspec(): PartitionspecContext;
    part_params(): Part_paramsContext;
    part_elem(): Part_elemContext;
    table_access_method_clause(): Table_access_method_clauseContext;
    optwith(): OptwithContext;
    oncommitoption(): OncommitoptionContext;
    opttablespace(): OpttablespaceContext;
    optconstablespace(): OptconstablespaceContext;
    existingindex(): ExistingindexContext;
    createstatsstmt(): CreatestatsstmtContext;
    alterstatsstmt(): AlterstatsstmtContext;
    createasstmt(): CreateasstmtContext;
    create_as_target(): Create_as_targetContext;
    opt_with_data(): Opt_with_dataContext;
    creatematviewstmt(): CreatematviewstmtContext;
    create_mv_target(): Create_mv_targetContext;
    optnolog(): OptnologContext;
    refreshmatviewstmt(): RefreshmatviewstmtContext;
    createseqstmt(): CreateseqstmtContext;
    alterseqstmt(): AlterseqstmtContext;
    optseqoptlist(): OptseqoptlistContext;
    optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext;
    seqoptlist(): SeqoptlistContext;
    seqoptelem(): SeqoptelemContext;
    opt_by(): Opt_byContext;
    numericonly(): NumericonlyContext;
    numericonly_list(): Numericonly_listContext;
    createplangstmt(): CreateplangstmtContext;
    opt_trusted(): Opt_trustedContext;
    handler_name(): Handler_nameContext;
    opt_inline_handler(): Opt_inline_handlerContext;
    validator_clause(): Validator_clauseContext;
    opt_validator(): Opt_validatorContext;
    opt_procedural(): Opt_proceduralContext;
    createtablespacestmt(): CreatetablespacestmtContext;
    opttablespaceowner(): OpttablespaceownerContext;
    droptablespacestmt(): DroptablespacestmtContext;
    createextensionstmt(): CreateextensionstmtContext;
    create_extension_opt_list(): Create_extension_opt_listContext;
    create_extension_opt_item(): Create_extension_opt_itemContext;
    alterextensionstmt(): AlterextensionstmtContext;
    alter_extension_opt_list(): Alter_extension_opt_listContext;
    alter_extension_opt_item(): Alter_extension_opt_itemContext;
    alterextensioncontentsstmt(): AlterextensioncontentsstmtContext;
    createfdwstmt(): CreatefdwstmtContext;
    fdw_option(): Fdw_optionContext;
    fdw_options(): Fdw_optionsContext;
    opt_fdw_options(): Opt_fdw_optionsContext;
    alterfdwstmt(): AlterfdwstmtContext;
    create_generic_options(): Create_generic_optionsContext;
    generic_option_list(): Generic_option_listContext;
    alter_generic_options(): Alter_generic_optionsContext;
    alter_generic_option_list(): Alter_generic_option_listContext;
    alter_generic_option_elem(): Alter_generic_option_elemContext;
    generic_option_elem(): Generic_option_elemContext;
    generic_option_name(): Generic_option_nameContext;
    generic_option_arg(): Generic_option_argContext;
    createforeignserverstmt(): CreateforeignserverstmtContext;
    opt_type(): Opt_typeContext;
    foreign_server_version(): Foreign_server_versionContext;
    opt_foreign_server_version(): Opt_foreign_server_versionContext;
    alterforeignserverstmt(): AlterforeignserverstmtContext;
    createforeigntablestmt(): CreateforeigntablestmtContext;
    importforeignschemastmt(): ImportforeignschemastmtContext;
    import_qualification_type(): Import_qualification_typeContext;
    import_qualification(): Import_qualificationContext;
    createusermappingstmt(): CreateusermappingstmtContext;
    auth_ident(): Auth_identContext;
    dropusermappingstmt(): DropusermappingstmtContext;
    alterusermappingstmt(): AlterusermappingstmtContext;
    createpolicystmt(): CreatepolicystmtContext;
    alterpolicystmt(): AlterpolicystmtContext;
    rowsecurityoptionalexpr(): RowsecurityoptionalexprContext;
    rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext;
    rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext;
    rowsecurityoptionaltorole(): RowsecurityoptionaltoroleContext;
    rowsecuritydefaultpermissive(): RowsecuritydefaultpermissiveContext;
    rowsecuritydefaultforcmd(): RowsecuritydefaultforcmdContext;
    row_security_cmd(): Row_security_cmdContext;
    createamstmt(): CreateamstmtContext;
    am_type(): Am_typeContext;
    createtrigstmt(): CreatetrigstmtContext;
    triggeractiontime(): TriggeractiontimeContext;
    triggerevents(): TriggereventsContext;
    triggeroneevent(): TriggeroneeventContext;
    triggerreferencing(): TriggerreferencingContext;
    triggertransitions(): TriggertransitionsContext;
    triggertransition(): TriggertransitionContext;
    transitionoldornew(): TransitionoldornewContext;
    transitionrowortable(): TransitionrowortableContext;
    transitionrelname(): TransitionrelnameContext;
    triggerforspec(): TriggerforspecContext;
    triggerforopteach(): TriggerforopteachContext;
    triggerfortype(): TriggerfortypeContext;
    triggerwhen(): TriggerwhenContext;
    function_or_procedure(): Function_or_procedureContext;
    triggerfuncargs(): TriggerfuncargsContext;
    triggerfuncarg(): TriggerfuncargContext;
    optconstrfromtable(): OptconstrfromtableContext;
    constraintattributespec(): ConstraintattributespecContext;
    constraintattributeElem(): ConstraintattributeElemContext;
    createeventtrigstmt(): CreateeventtrigstmtContext;
    event_trigger_when_list(): Event_trigger_when_listContext;
    event_trigger_when_item(): Event_trigger_when_itemContext;
    event_trigger_value_list(): Event_trigger_value_listContext;
    altereventtrigstmt(): AltereventtrigstmtContext;
    enable_trigger(): Enable_triggerContext;
    createassertionstmt(): CreateassertionstmtContext;
    definestmt(): DefinestmtContext;
    definition(): DefinitionContext;
    def_list(): Def_listContext;
    def_elem(): Def_elemContext;
    def_arg(): Def_argContext;
    old_aggr_definition(): Old_aggr_definitionContext;
    old_aggr_list(): Old_aggr_listContext;
    old_aggr_elem(): Old_aggr_elemContext;
    opt_enum_val_list(): Opt_enum_val_listContext;
    enum_val_list(): Enum_val_listContext;
    alterenumstmt(): AlterenumstmtContext;
    opt_if_not_exists(): Opt_if_not_existsContext;
    createopclassstmt(): CreateopclassstmtContext;
    opclass_item_list(): Opclass_item_listContext;
    opclass_item(): Opclass_itemContext;
    opt_default(): Opt_defaultContext;
    opt_opfamily(): Opt_opfamilyContext;
    opclass_purpose(): Opclass_purposeContext;
    opt_recheck(): Opt_recheckContext;
    createopfamilystmt(): CreateopfamilystmtContext;
    alteropfamilystmt(): AlteropfamilystmtContext;
    opclass_drop_list(): Opclass_drop_listContext;
    opclass_drop(): Opclass_dropContext;
    dropopclassstmt(): DropopclassstmtContext;
    dropopfamilystmt(): DropopfamilystmtContext;
    dropownedstmt(): DropownedstmtContext;
    reassignownedstmt(): ReassignownedstmtContext;
    dropstmt(): DropstmtContext;
    object_type_any_name(): Object_type_any_nameContext;
    object_type_name(): Object_type_nameContext;
    drop_type_name(): Drop_type_nameContext;
    object_type_name_on_any_name(): Object_type_name_on_any_nameContext;
    any_name_list(): Any_name_listContext;
    any_name(): Any_nameContext;
    attrs(): AttrsContext;
    type_name_list(): Type_name_listContext;
    truncatestmt(): TruncatestmtContext;
    opt_restart_seqs(): Opt_restart_seqsContext;
    commentstmt(): CommentstmtContext;
    comment_text(): Comment_textContext;
    seclabelstmt(): SeclabelstmtContext;
    opt_provider(): Opt_providerContext;
    security_label(): Security_labelContext;
    fetchstmt(): FetchstmtContext;
    fetch_args(): Fetch_argsContext;
    from_in(): From_inContext;
    opt_from_in(): Opt_from_inContext;
    grantstmt(): GrantstmtContext;
    revokestmt(): RevokestmtContext;
    privileges(): PrivilegesContext;
    privilege_list(): Privilege_listContext;
    privilege(): PrivilegeContext;
    privilege_target(): Privilege_targetContext;
    grantee_list(): Grantee_listContext;
    grantee(): GranteeContext;
    opt_grant_grant_option(): Opt_grant_grant_optionContext;
    grantrolestmt(): GrantrolestmtContext;
    revokerolestmt(): RevokerolestmtContext;
    opt_grant_admin_option(): Opt_grant_admin_optionContext;
    opt_granted_by(): Opt_granted_byContext;
    alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext;
    defacloptionlist(): DefacloptionlistContext;
    defacloption(): DefacloptionContext;
    defaclaction(): DefaclactionContext;
    defacl_privilege_target(): Defacl_privilege_targetContext;
    indexstmt(): IndexstmtContext;
    opt_unique(): Opt_uniqueContext;
    opt_concurrently(): Opt_concurrentlyContext;
    opt_index_name(): Opt_index_nameContext;
    access_method_clause(): Access_method_clauseContext;
    index_params(): Index_paramsContext;
    index_elem_options(): Index_elem_optionsContext;
    index_elem(): Index_elemContext;
    opt_include(): Opt_includeContext;
    index_including_params(): Index_including_paramsContext;
    opt_collate(): Opt_collateContext;
    opt_class(): Opt_classContext;
    opt_asc_desc(): Opt_asc_descContext;
    opt_nulls_order(): Opt_nulls_orderContext;
    createfunctionstmt(): CreatefunctionstmtContext;
    opt_or_replace(): Opt_or_replaceContext;
    func_args(): Func_argsContext;
    func_args_list(): Func_args_listContext;
    function_with_argtypes_list(): Function_with_argtypes_listContext;
    function_with_argtypes(): Function_with_argtypesContext;
    func_args_with_defaults(): Func_args_with_defaultsContext;
    func_args_with_defaults_list(): Func_args_with_defaults_listContext;
    func_arg(): Func_argContext;
    arg_class(): Arg_classContext;
    param_name(): Param_nameContext;
    func_return(): Func_returnContext;
    func_type(): Func_typeContext;
    func_arg_with_default(): Func_arg_with_defaultContext;
    aggr_arg(): Aggr_argContext;
    aggr_args(): Aggr_argsContext;
    aggr_args_list(): Aggr_args_listContext;
    aggregate_with_argtypes(): Aggregate_with_argtypesContext;
    aggregate_with_argtypes_list(): Aggregate_with_argtypes_listContext;
    createfunc_opt_list(): Createfunc_opt_listContext;
    common_func_opt_item(): Common_func_opt_itemContext;
    createfunc_opt_item(): Createfunc_opt_itemContext;
    func_as(): Func_asContext;
    transform_type_list(): Transform_type_listContext;
    opt_definition(): Opt_definitionContext;
    table_func_column(): Table_func_columnContext;
    table_func_column_list(): Table_func_column_listContext;
    alterfunctionstmt(): AlterfunctionstmtContext;
    alterfunc_opt_list(): Alterfunc_opt_listContext;
    opt_restrict(): Opt_restrictContext;
    removefuncstmt(): RemovefuncstmtContext;
    removeaggrstmt(): RemoveaggrstmtContext;
    removeoperstmt(): RemoveoperstmtContext;
    oper_argtypes(): Oper_argtypesContext;
    any_operator(): Any_operatorContext;
    operator_with_argtypes_list(): Operator_with_argtypes_listContext;
    operator_with_argtypes(): Operator_with_argtypesContext;
    dostmt(): DostmtContext;
    dostmt_opt_list(): Dostmt_opt_listContext;
    dostmt_opt_item(): Dostmt_opt_itemContext;
    createcaststmt(): CreatecaststmtContext;
    cast_context(): Cast_contextContext;
    dropcaststmt(): DropcaststmtContext;
    opt_if_exists(): Opt_if_existsContext;
    createtransformstmt(): CreatetransformstmtContext;
    transform_element_list(): Transform_element_listContext;
    droptransformstmt(): DroptransformstmtContext;
    reindexstmt(): ReindexstmtContext;
    reindex_target_type(): Reindex_target_typeContext;
    reindex_target_multitable(): Reindex_target_multitableContext;
    reindex_option_list(): Reindex_option_listContext;
    reindex_option_elem(): Reindex_option_elemContext;
    altertblspcstmt(): AltertblspcstmtContext;
    renamestmt(): RenamestmtContext;
    opt_column(): Opt_columnContext;
    opt_set_data(): Opt_set_dataContext;
    alterobjectdependsstmt(): AlterobjectdependsstmtContext;
    opt_no(): Opt_noContext;
    alterobjectschemastmt(): AlterobjectschemastmtContext;
    alteroperatorstmt(): AlteroperatorstmtContext;
    operator_def_list(): Operator_def_listContext;
    operator_def_elem(): Operator_def_elemContext;
    operator_def_arg(): Operator_def_argContext;
    altertypestmt(): AltertypestmtContext;
    alterownerstmt(): AlterownerstmtContext;
    createpublicationstmt(): CreatepublicationstmtContext;
    opt_publication_for_tables(): Opt_publication_for_tablesContext;
    publication_for_tables(): Publication_for_tablesContext;
    alterpublicationstmt(): AlterpublicationstmtContext;
    createsubscriptionstmt(): CreatesubscriptionstmtContext;
    publication_name_list(): Publication_name_listContext;
    publication_name_item(): Publication_name_itemContext;
    altersubscriptionstmt(): AltersubscriptionstmtContext;
    dropsubscriptionstmt(): DropsubscriptionstmtContext;
    rulestmt(): RulestmtContext;
    ruleactionlist(): RuleactionlistContext;
    ruleactionmulti(): RuleactionmultiContext;
    ruleactionstmt(): RuleactionstmtContext;
    ruleactionstmtOrEmpty(): RuleactionstmtOrEmptyContext;
    event(): EventContext;
    opt_instead(): Opt_insteadContext;
    notifystmt(): NotifystmtContext;
    notify_payload(): Notify_payloadContext;
    listenstmt(): ListenstmtContext;
    unlistenstmt(): UnlistenstmtContext;
    transactionstmt(): TransactionstmtContext;
    opt_transaction(): Opt_transactionContext;
    transaction_mode_item(): Transaction_mode_itemContext;
    transaction_mode_list(): Transaction_mode_listContext;
    transaction_mode_list_or_empty(): Transaction_mode_list_or_emptyContext;
    opt_transaction_chain(): Opt_transaction_chainContext;
    viewstmt(): ViewstmtContext;
    opt_check_option(): Opt_check_optionContext;
    loadstmt(): LoadstmtContext;
    createdbstmt(): CreatedbstmtContext;
    createdb_opt_list(): Createdb_opt_listContext;
    createdb_opt_items(): Createdb_opt_itemsContext;
    createdb_opt_item(): Createdb_opt_itemContext;
    createdb_opt_name(): Createdb_opt_nameContext;
    opt_equal(): Opt_equalContext;
    alterdatabasestmt(): AlterdatabasestmtContext;
    alterdatabasesetstmt(): AlterdatabasesetstmtContext;
    dropdbstmt(): DropdbstmtContext;
    drop_option_list(): Drop_option_listContext;
    drop_option(): Drop_optionContext;
    altercollationstmt(): AltercollationstmtContext;
    altersystemstmt(): AltersystemstmtContext;
    createdomainstmt(): CreatedomainstmtContext;
    alterdomainstmt(): AlterdomainstmtContext;
    opt_as(): Opt_asContext;
    altertsdictionarystmt(): AltertsdictionarystmtContext;
    altertsconfigurationstmt(): AltertsconfigurationstmtContext;
    any_with(): Any_withContext;
    createconversionstmt(): CreateconversionstmtContext;
    clusterstmt(): ClusterstmtContext;
    cluster_index_specification(): Cluster_index_specificationContext;
    vacuumstmt(): VacuumstmtContext;
    analyzestmt(): AnalyzestmtContext;
    vac_analyze_option_list(): Vac_analyze_option_listContext;
    analyze_keyword(): Analyze_keywordContext;
    vac_analyze_option_elem(): Vac_analyze_option_elemContext;
    vac_analyze_option_name(): Vac_analyze_option_nameContext;
    vac_analyze_option_arg(): Vac_analyze_option_argContext;
    opt_analyze(): Opt_analyzeContext;
    opt_verbose(): Opt_verboseContext;
    opt_full(): Opt_fullContext;
    opt_freeze(): Opt_freezeContext;
    opt_name_list(): Opt_name_listContext;
    vacuum_relation(): Vacuum_relationContext;
    vacuum_relation_list(): Vacuum_relation_listContext;
    opt_vacuum_relation_list(): Opt_vacuum_relation_listContext;
    explainstmt(): ExplainstmtContext;
    explainablestmt(): ExplainablestmtContext;
    explain_option_list(): Explain_option_listContext;
    explain_option_elem(): Explain_option_elemContext;
    explain_option_name(): Explain_option_nameContext;
    explain_option_arg(): Explain_option_argContext;
    preparestmt(): PreparestmtContext;
    prep_type_clause(): Prep_type_clauseContext;
    preparablestmt(): PreparablestmtContext;
    executestmt(): ExecutestmtContext;
    execute_param_clause(): Execute_param_clauseContext;
    deallocatestmt(): DeallocatestmtContext;
    insertstmt(): InsertstmtContext;
    insert_target(): Insert_targetContext;
    insert_rest(): Insert_restContext;
    override_kind(): Override_kindContext;
    insert_column_list(): Insert_column_listContext;
    insert_column_item(): Insert_column_itemContext;
    opt_on_conflict(): Opt_on_conflictContext;
    opt_conf_expr(): Opt_conf_exprContext;
    returning_clause(): Returning_clauseContext;
    deletestmt(): DeletestmtContext;
    using_clause(): Using_clauseContext;
    lockstmt(): LockstmtContext;
    opt_lock(): Opt_lockContext;
    lock_type(): Lock_typeContext;
    opt_nowait(): Opt_nowaitContext;
    opt_nowait_or_skip(): Opt_nowait_or_skipContext;
    updatestmt(): UpdatestmtContext;
    set_clause_list(): Set_clause_listContext;
    set_clause(): Set_clauseContext;
    set_target(): Set_targetContext;
    set_target_list(): Set_target_listContext;
    declarecursorstmt(): DeclarecursorstmtContext;
    cursor_name(): Cursor_nameContext;
    cursor_options(): Cursor_optionsContext;
    opt_hold(): Opt_holdContext;
    selectstmt(): SelectstmtContext;
    select_with_parens(): Select_with_parensContext;
    select_no_parens(): Select_no_parensContext;
    select_clause(): Select_clauseContext;
    simple_select(): Simple_selectContext;
    set_operator(): Set_operatorContext;
    set_operator_with_all_or_distinct(): Set_operator_with_all_or_distinctContext;
    with_clause(): With_clauseContext;
    cte_list(): Cte_listContext;
    common_table_expr(): Common_table_exprContext;
    opt_materialized(): Opt_materializedContext;
    opt_with_clause(): Opt_with_clauseContext;
    into_clause(): Into_clauseContext;
    opt_strict(): Opt_strictContext;
    opttempTableName(): OpttempTableNameContext;
    opt_table(): Opt_tableContext;
    all_or_distinct(): All_or_distinctContext;
    distinct_clause(): Distinct_clauseContext;
    opt_all_clause(): Opt_all_clauseContext;
    opt_sort_clause(): Opt_sort_clauseContext;
    sort_clause(): Sort_clauseContext;
    sortby_list(): Sortby_listContext;
    sortby(): SortbyContext;
    select_limit(): Select_limitContext;
    opt_select_limit(): Opt_select_limitContext;
    limit_clause(): Limit_clauseContext;
    offset_clause(): Offset_clauseContext;
    select_limit_value(): Select_limit_valueContext;
    select_offset_value(): Select_offset_valueContext;
    select_fetch_first_value(): Select_fetch_first_valueContext;
    i_or_f_const(): I_or_f_constContext;
    row_or_rows(): Row_or_rowsContext;
    first_or_next(): First_or_nextContext;
    group_clause(): Group_clauseContext;
    group_by_list(): Group_by_listContext;
    group_by_item(): Group_by_itemContext;
    empty_grouping_set(): Empty_grouping_setContext;
    rollup_clause(): Rollup_clauseContext;
    cube_clause(): Cube_clauseContext;
    grouping_sets_clause(): Grouping_sets_clauseContext;
    having_clause(): Having_clauseContext;
    for_locking_clause(): For_locking_clauseContext;
    opt_for_locking_clause(): Opt_for_locking_clauseContext;
    for_locking_items(): For_locking_itemsContext;
    for_locking_item(): For_locking_itemContext;
    for_locking_strength(): For_locking_strengthContext;
    locked_rels_list(): Locked_rels_listContext;
    values_clause(): Values_clauseContext;
    from_clause(): From_clauseContext;
    from_list(): From_listContext;
    table_ref(): Table_refContext;
    alias_clause(): Alias_clauseContext;
    opt_alias_clause(): Opt_alias_clauseContext;
    func_alias_clause(): Func_alias_clauseContext;
    join_type(): Join_typeContext;
    join_qual(): Join_qualContext;
    relation_expr(): Relation_exprContext;
    relation_expr_list(): Relation_expr_listContext;
    relation_expr_opt_alias(): Relation_expr_opt_aliasContext;
    tablesample_clause(): Tablesample_clauseContext;
    opt_repeatable_clause(): Opt_repeatable_clauseContext;
    func_table(): Func_tableContext;
    rowsfrom_item(): Rowsfrom_itemContext;
    rowsfrom_list(): Rowsfrom_listContext;
    opt_col_def_list(): Opt_col_def_listContext;
    opt_ordinality(): Opt_ordinalityContext;
    where_clause(): Where_clauseContext;
    where_or_current_clause(): Where_or_current_clauseContext;
    opttablefuncelementlist(): OpttablefuncelementlistContext;
    tablefuncelementlist(): TablefuncelementlistContext;
    tablefuncelement(): TablefuncelementContext;
    xmltable(): XmltableContext;
    xmltable_column_list(): Xmltable_column_listContext;
    xmltable_column_el(): Xmltable_column_elContext;
    xmltable_column_option_list(): Xmltable_column_option_listContext;
    xmltable_column_option_el(): Xmltable_column_option_elContext;
    xml_namespace_list(): Xml_namespace_listContext;
    xml_namespace_el(): Xml_namespace_elContext;
    typename(): TypenameContext;
    opt_array_bounds(): Opt_array_boundsContext;
    simpletypename(): SimpletypenameContext;
    consttypename(): ConsttypenameContext;
    generictype(): GenerictypeContext;
    opt_type_modifiers(): Opt_type_modifiersContext;
    numeric(): NumericContext;
    opt_float(): Opt_floatContext;
    bit(): BitContext;
    constbit(): ConstbitContext;
    bitwithlength(): BitwithlengthContext;
    bitwithoutlength(): BitwithoutlengthContext;
    character(): CharacterContext;
    constcharacter(): ConstcharacterContext;
    character_c(): Character_cContext;
    opt_varying(): Opt_varyingContext;
    constdatetime(): ConstdatetimeContext;
    constinterval(): ConstintervalContext;
    opt_timezone(): Opt_timezoneContext;
    opt_interval(): Opt_intervalContext;
    interval_second(): Interval_secondContext;
    opt_escape(): Opt_escapeContext;
    a_expr(): A_exprContext;
    a_expr_qual(): A_expr_qualContext;
    a_expr_lessless(): A_expr_lesslessContext;
    a_expr_or(): A_expr_orContext;
    a_expr_and(): A_expr_andContext;
    a_expr_in(): A_expr_inContext;
    a_expr_unary_not(): A_expr_unary_notContext;
    a_expr_isnull(): A_expr_isnullContext;
    a_expr_is_not(): A_expr_is_notContext;
    a_expr_compare(): A_expr_compareContext;
    a_expr_like(): A_expr_likeContext;
    a_expr_qual_op(): A_expr_qual_opContext;
    a_expr_unary_qualop(): A_expr_unary_qualopContext;
    a_expr_add(): A_expr_addContext;
    a_expr_mul(): A_expr_mulContext;
    a_expr_caret(): A_expr_caretContext;
    a_expr_unary_sign(): A_expr_unary_signContext;
    a_expr_at_time_zone(): A_expr_at_time_zoneContext;
    a_expr_collate(): A_expr_collateContext;
    a_expr_typecast(): A_expr_typecastContext;
    b_expr(): B_exprContext;
    b_expr(_p: number): B_exprContext;
    c_expr(): C_exprContext;
    plsqlvariablename(): PlsqlvariablenameContext;
    func_application(): Func_applicationContext;
    func_expr(): Func_exprContext;
    func_expr_windowless(): Func_expr_windowlessContext;
    func_expr_common_subexpr(): Func_expr_common_subexprContext;
    xml_root_version(): Xml_root_versionContext;
    opt_xml_root_standalone(): Opt_xml_root_standaloneContext;
    xml_attributes(): Xml_attributesContext;
    xml_attribute_list(): Xml_attribute_listContext;
    xml_attribute_el(): Xml_attribute_elContext;
    document_or_content(): Document_or_contentContext;
    xml_whitespace_option(): Xml_whitespace_optionContext;
    xmlexists_argument(): Xmlexists_argumentContext;
    xml_passing_mech(): Xml_passing_mechContext;
    within_group_clause(): Within_group_clauseContext;
    filter_clause(): Filter_clauseContext;
    window_clause(): Window_clauseContext;
    window_definition_list(): Window_definition_listContext;
    window_definition(): Window_definitionContext;
    over_clause(): Over_clauseContext;
    window_specification(): Window_specificationContext;
    opt_existing_window_name(): Opt_existing_window_nameContext;
    opt_partition_clause(): Opt_partition_clauseContext;
    opt_frame_clause(): Opt_frame_clauseContext;
    frame_extent(): Frame_extentContext;
    frame_bound(): Frame_boundContext;
    opt_window_exclusion_clause(): Opt_window_exclusion_clauseContext;
    row(): RowContext;
    explicit_row(): Explicit_rowContext;
    implicit_row(): Implicit_rowContext;
    sub_type(): Sub_typeContext;
    all_op(): All_opContext;
    mathop(): MathopContext;
    qual_op(): Qual_opContext;
    qual_all_op(): Qual_all_opContext;
    subquery_Op(): Subquery_OpContext;
    expr_list(): Expr_listContext;
    func_arg_list(): Func_arg_listContext;
    func_arg_expr(): Func_arg_exprContext;
    type_list(): Type_listContext;
    array_expr(): Array_exprContext;
    array_expr_list(): Array_expr_listContext;
    extract_list(): Extract_listContext;
    extract_arg(): Extract_argContext;
    unicode_normal_form(): Unicode_normal_formContext;
    overlay_list(): Overlay_listContext;
    position_list(): Position_listContext;
    substr_list(): Substr_listContext;
    trim_list(): Trim_listContext;
    in_expr(): In_exprContext;
    case_expr(): Case_exprContext;
    when_clause_list(): When_clause_listContext;
    when_clause(): When_clauseContext;
    case_default(): Case_defaultContext;
    case_arg(): Case_argContext;
    columnref(): ColumnrefContext;
    indirection_el(): Indirection_elContext;
    opt_slice_bound(): Opt_slice_boundContext;
    indirection(): IndirectionContext;
    opt_indirection(): Opt_indirectionContext;
    opt_target_list(): Opt_target_listContext;
    target_list(): Target_listContext;
    target_el(): Target_elContext;
    qualified_name_list(): Qualified_name_listContext;
    qualified_name(): Qualified_nameContext;
    name_list(): Name_listContext;
    name(): NameContext;
    attr_name(): Attr_nameContext;
    file_name(): File_nameContext;
    func_name(): Func_nameContext;
    aexprconst(): AexprconstContext;
    xconst(): XconstContext;
    bconst(): BconstContext;
    fconst(): FconstContext;
    iconst(): IconstContext;
    sconst(): SconstContext;
    anysconst(): AnysconstContext;
    opt_uescape(): Opt_uescapeContext;
    signediconst(): SignediconstContext;
    roleid(): RoleidContext;
    rolespec(): RolespecContext;
    role_list(): Role_listContext;
    colid(): ColidContext;
    type_function_name(): Type_function_nameContext;
    nonreservedword(): NonreservedwordContext;
    collabel(): CollabelContext;
    identifier(): IdentifierContext;
    plsqlidentifier(): PlsqlidentifierContext;
    unreserved_keyword(): Unreserved_keywordContext;
    col_name_keyword(): Col_name_keywordContext;
    type_func_name_keyword(): Type_func_name_keywordContext;
    reserved_keyword(): Reserved_keywordContext;
    pl_function(): Pl_functionContext;
    comp_options(): Comp_optionsContext;
    comp_option(): Comp_optionContext;
    sharp(): SharpContext;
    option_value(): Option_valueContext;
    opt_semi(): Opt_semiContext;
    pl_block(): Pl_blockContext;
    decl_sect(): Decl_sectContext;
    decl_start(): Decl_startContext;
    decl_stmts(): Decl_stmtsContext;
    label_decl(): Label_declContext;
    decl_stmt(): Decl_stmtContext;
    decl_statement(): Decl_statementContext;
    opt_scrollable(): Opt_scrollableContext;
    decl_cursor_query(): Decl_cursor_queryContext;
    decl_cursor_args(): Decl_cursor_argsContext;
    decl_cursor_arglist(): Decl_cursor_arglistContext;
    decl_cursor_arg(): Decl_cursor_argContext;
    decl_is_for(): Decl_is_forContext;
    decl_aliasitem(): Decl_aliasitemContext;
    decl_varname(): Decl_varnameContext;
    decl_const(): Decl_constContext;
    decl_datatype(): Decl_datatypeContext;
    decl_collate(): Decl_collateContext;
    decl_notnull(): Decl_notnullContext;
    decl_defval(): Decl_defvalContext;
    decl_defkey(): Decl_defkeyContext;
    assign_operator(): Assign_operatorContext;
    proc_sect(): Proc_sectContext;
    proc_stmt(): Proc_stmtContext;
    stmt_perform(): Stmt_performContext;
    stmt_call(): Stmt_callContext;
    opt_expr_list(): Opt_expr_listContext;
    stmt_assign(): Stmt_assignContext;
    stmt_getdiag(): Stmt_getdiagContext;
    getdiag_area_opt(): Getdiag_area_optContext;
    getdiag_list(): Getdiag_listContext;
    getdiag_list_item(): Getdiag_list_itemContext;
    getdiag_item(): Getdiag_itemContext;
    getdiag_target(): Getdiag_targetContext;
    assign_var(): Assign_varContext;
    stmt_if(): Stmt_ifContext;
    stmt_elsifs(): Stmt_elsifsContext;
    stmt_else(): Stmt_elseContext;
    stmt_case(): Stmt_caseContext;
    opt_expr_until_when(): Opt_expr_until_whenContext;
    case_when_list(): Case_when_listContext;
    case_when(): Case_whenContext;
    opt_case_else(): Opt_case_elseContext;
    stmt_loop(): Stmt_loopContext;
    stmt_while(): Stmt_whileContext;
    stmt_for(): Stmt_forContext;
    for_control(): For_controlContext;
    opt_for_using_expression(): Opt_for_using_expressionContext;
    opt_cursor_parameters(): Opt_cursor_parametersContext;
    opt_reverse(): Opt_reverseContext;
    opt_by_expression(): Opt_by_expressionContext;
    for_variable(): For_variableContext;
    stmt_foreach_a(): Stmt_foreach_aContext;
    foreach_slice(): Foreach_sliceContext;
    stmt_exit(): Stmt_exitContext;
    exit_type(): Exit_typeContext;
    stmt_return(): Stmt_returnContext;
    opt_return_result(): Opt_return_resultContext;
    stmt_raise(): Stmt_raiseContext;
    opt_stmt_raise_level(): Opt_stmt_raise_levelContext;
    opt_raise_list(): Opt_raise_listContext;
    opt_raise_using(): Opt_raise_usingContext;
    opt_raise_using_elem(): Opt_raise_using_elemContext;
    opt_raise_using_elem_list(): Opt_raise_using_elem_listContext;
    stmt_assert(): Stmt_assertContext;
    opt_stmt_assert_message(): Opt_stmt_assert_messageContext;
    loop_body(): Loop_bodyContext;
    stmt_execsql(): Stmt_execsqlContext;
    stmt_dynexecute(): Stmt_dynexecuteContext;
    opt_execute_using(): Opt_execute_usingContext;
    opt_execute_using_list(): Opt_execute_using_listContext;
    opt_execute_into(): Opt_execute_intoContext;
    stmt_open(): Stmt_openContext;
    opt_open_bound_list_item(): Opt_open_bound_list_itemContext;
    opt_open_bound_list(): Opt_open_bound_listContext;
    opt_open_using(): Opt_open_usingContext;
    opt_scroll_option(): Opt_scroll_optionContext;
    opt_scroll_option_no(): Opt_scroll_option_noContext;
    stmt_fetch(): Stmt_fetchContext;
    into_target(): Into_targetContext;
    opt_cursor_from(): Opt_cursor_fromContext;
    opt_fetch_direction(): Opt_fetch_directionContext;
    stmt_move(): Stmt_moveContext;
    stmt_close(): Stmt_closeContext;
    stmt_null(): Stmt_nullContext;
    stmt_commit(): Stmt_commitContext;
    stmt_rollback(): Stmt_rollbackContext;
    plsql_opt_transaction_chain(): Plsql_opt_transaction_chainContext;
    stmt_set(): Stmt_setContext;
    cursor_variable(): Cursor_variableContext;
    exception_sect(): Exception_sectContext;
    proc_exceptions(): Proc_exceptionsContext;
    proc_exception(): Proc_exceptionContext;
    proc_conditions(): Proc_conditionsContext;
    proc_condition(): Proc_conditionContext;
    opt_block_label(): Opt_block_labelContext;
    opt_loop_label(): Opt_loop_labelContext;
    opt_label(): Opt_labelContext;
    opt_exitcond(): Opt_exitcondContext;
    any_identifier(): Any_identifierContext;
    plsql_unreserved_keyword(): Plsql_unreserved_keywordContext;
    sql_expression(): Sql_expressionContext;
    expr_until_then(): Expr_until_thenContext;
    expr_until_semi(): Expr_until_semiContext;
    expr_until_rightbracket(): Expr_until_rightbracketContext;
    expr_until_loop(): Expr_until_loopContext;
    make_execsql_stmt(): Make_execsql_stmtContext;
    opt_returning_clause_into(): Opt_returning_clause_intoContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private b_expr_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    private static readonly _serializedATNSegment3;
    private static readonly _serializedATNSegment4;
    private static readonly _serializedATNSegment5;
    private static readonly _serializedATNSegment6;
    private static readonly _serializedATNSegment7;
    private static readonly _serializedATNSegment8;
    private static readonly _serializedATNSegment9;
    private static readonly _serializedATNSegment10;
    private static readonly _serializedATNSegment11;
    private static readonly _serializedATNSegment12;
    private static readonly _serializedATNSegment13;
    private static readonly _serializedATNSegment14;
    private static readonly _serializedATNSegment15;
    private static readonly _serializedATNSegment16;
    private static readonly _serializedATNSegment17;
    private static readonly _serializedATNSegment18;
    private static readonly _serializedATNSegment19;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
export declare class ProgramContext extends ParserRuleContext {
    stmtmulti(): StmtmultiContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PlsqlrootContext extends ParserRuleContext {
    pl_function(): Pl_functionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class StmtmultiContext extends ParserRuleContext {
    stmt(): StmtContext[];
    stmt(i: number): StmtContext;
    SEMI(): TerminalNode[];
    SEMI(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class StmtContext extends ParserRuleContext {
    altereventtrigstmt(): AltereventtrigstmtContext | undefined;
    altercollationstmt(): AltercollationstmtContext | undefined;
    alterdatabasestmt(): AlterdatabasestmtContext | undefined;
    alterdatabasesetstmt(): AlterdatabasesetstmtContext | undefined;
    alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext | undefined;
    alterdomainstmt(): AlterdomainstmtContext | undefined;
    alterenumstmt(): AlterenumstmtContext | undefined;
    alterextensionstmt(): AlterextensionstmtContext | undefined;
    alterextensioncontentsstmt(): AlterextensioncontentsstmtContext | undefined;
    alterfdwstmt(): AlterfdwstmtContext | undefined;
    alterforeignserverstmt(): AlterforeignserverstmtContext | undefined;
    alterfunctionstmt(): AlterfunctionstmtContext | undefined;
    altergroupstmt(): AltergroupstmtContext | undefined;
    alterobjectdependsstmt(): AlterobjectdependsstmtContext | undefined;
    alterobjectschemastmt(): AlterobjectschemastmtContext | undefined;
    alterownerstmt(): AlterownerstmtContext | undefined;
    alteroperatorstmt(): AlteroperatorstmtContext | undefined;
    altertypestmt(): AltertypestmtContext | undefined;
    alterpolicystmt(): AlterpolicystmtContext | undefined;
    alterseqstmt(): AlterseqstmtContext | undefined;
    altersystemstmt(): AltersystemstmtContext | undefined;
    altertablestmt(): AltertablestmtContext | undefined;
    altertblspcstmt(): AltertblspcstmtContext | undefined;
    altercompositetypestmt(): AltercompositetypestmtContext | undefined;
    alterpublicationstmt(): AlterpublicationstmtContext | undefined;
    alterrolesetstmt(): AlterrolesetstmtContext | undefined;
    alterrolestmt(): AlterrolestmtContext | undefined;
    altersubscriptionstmt(): AltersubscriptionstmtContext | undefined;
    alterstatsstmt(): AlterstatsstmtContext | undefined;
    altertsconfigurationstmt(): AltertsconfigurationstmtContext | undefined;
    altertsdictionarystmt(): AltertsdictionarystmtContext | undefined;
    alterusermappingstmt(): AlterusermappingstmtContext | undefined;
    analyzestmt(): AnalyzestmtContext | undefined;
    callstmt(): CallstmtContext | undefined;
    checkpointstmt(): CheckpointstmtContext | undefined;
    closeportalstmt(): CloseportalstmtContext | undefined;
    clusterstmt(): ClusterstmtContext | undefined;
    commentstmt(): CommentstmtContext | undefined;
    constraintssetstmt(): ConstraintssetstmtContext | undefined;
    copystmt(): CopystmtContext | undefined;
    createamstmt(): CreateamstmtContext | undefined;
    createasstmt(): CreateasstmtContext | undefined;
    createassertionstmt(): CreateassertionstmtContext | undefined;
    createcaststmt(): CreatecaststmtContext | undefined;
    createconversionstmt(): CreateconversionstmtContext | undefined;
    createdomainstmt(): CreatedomainstmtContext | undefined;
    createextensionstmt(): CreateextensionstmtContext | undefined;
    createfdwstmt(): CreatefdwstmtContext | undefined;
    createforeignserverstmt(): CreateforeignserverstmtContext | undefined;
    createforeigntablestmt(): CreateforeigntablestmtContext | undefined;
    createfunctionstmt(): CreatefunctionstmtContext | undefined;
    creategroupstmt(): CreategroupstmtContext | undefined;
    creatematviewstmt(): CreatematviewstmtContext | undefined;
    createopclassstmt(): CreateopclassstmtContext | undefined;
    createopfamilystmt(): CreateopfamilystmtContext | undefined;
    createpublicationstmt(): CreatepublicationstmtContext | undefined;
    alteropfamilystmt(): AlteropfamilystmtContext | undefined;
    createpolicystmt(): CreatepolicystmtContext | undefined;
    createplangstmt(): CreateplangstmtContext | undefined;
    createschemastmt(): CreateschemastmtContext | undefined;
    createseqstmt(): CreateseqstmtContext | undefined;
    createstmt(): CreatestmtContext | undefined;
    createsubscriptionstmt(): CreatesubscriptionstmtContext | undefined;
    createstatsstmt(): CreatestatsstmtContext | undefined;
    createtablespacestmt(): CreatetablespacestmtContext | undefined;
    createtransformstmt(): CreatetransformstmtContext | undefined;
    createtrigstmt(): CreatetrigstmtContext | undefined;
    createeventtrigstmt(): CreateeventtrigstmtContext | undefined;
    createrolestmt(): CreaterolestmtContext | undefined;
    createuserstmt(): CreateuserstmtContext | undefined;
    createusermappingstmt(): CreateusermappingstmtContext | undefined;
    createdbstmt(): CreatedbstmtContext | undefined;
    deallocatestmt(): DeallocatestmtContext | undefined;
    declarecursorstmt(): DeclarecursorstmtContext | undefined;
    definestmt(): DefinestmtContext | undefined;
    deletestmt(): DeletestmtContext | undefined;
    discardstmt(): DiscardstmtContext | undefined;
    dostmt(): DostmtContext | undefined;
    dropcaststmt(): DropcaststmtContext | undefined;
    dropopclassstmt(): DropopclassstmtContext | undefined;
    dropopfamilystmt(): DropopfamilystmtContext | undefined;
    dropownedstmt(): DropownedstmtContext | undefined;
    dropstmt(): DropstmtContext | undefined;
    dropsubscriptionstmt(): DropsubscriptionstmtContext | undefined;
    droptablespacestmt(): DroptablespacestmtContext | undefined;
    droptransformstmt(): DroptransformstmtContext | undefined;
    droprolestmt(): DroprolestmtContext | undefined;
    dropusermappingstmt(): DropusermappingstmtContext | undefined;
    dropdbstmt(): DropdbstmtContext | undefined;
    executestmt(): ExecutestmtContext | undefined;
    explainstmt(): ExplainstmtContext | undefined;
    fetchstmt(): FetchstmtContext | undefined;
    grantstmt(): GrantstmtContext | undefined;
    grantrolestmt(): GrantrolestmtContext | undefined;
    importforeignschemastmt(): ImportforeignschemastmtContext | undefined;
    indexstmt(): IndexstmtContext | undefined;
    insertstmt(): InsertstmtContext | undefined;
    listenstmt(): ListenstmtContext | undefined;
    refreshmatviewstmt(): RefreshmatviewstmtContext | undefined;
    loadstmt(): LoadstmtContext | undefined;
    lockstmt(): LockstmtContext | undefined;
    notifystmt(): NotifystmtContext | undefined;
    preparestmt(): PreparestmtContext | undefined;
    reassignownedstmt(): ReassignownedstmtContext | undefined;
    reindexstmt(): ReindexstmtContext | undefined;
    removeaggrstmt(): RemoveaggrstmtContext | undefined;
    removefuncstmt(): RemovefuncstmtContext | undefined;
    removeoperstmt(): RemoveoperstmtContext | undefined;
    renamestmt(): RenamestmtContext | undefined;
    revokestmt(): RevokestmtContext | undefined;
    revokerolestmt(): RevokerolestmtContext | undefined;
    rulestmt(): RulestmtContext | undefined;
    seclabelstmt(): SeclabelstmtContext | undefined;
    selectstmt(): SelectstmtContext | undefined;
    transactionstmt(): TransactionstmtContext | undefined;
    truncatestmt(): TruncatestmtContext | undefined;
    unlistenstmt(): UnlistenstmtContext | undefined;
    updatestmt(): UpdatestmtContext | undefined;
    vacuumstmt(): VacuumstmtContext | undefined;
    variableresetstmt(): VariableresetstmtContext | undefined;
    variablesetstmt(): VariablesetstmtContext | undefined;
    variableshowstmt(): VariableshowstmtContext | undefined;
    viewstmt(): ViewstmtContext | undefined;
    plsqlconsolecommand(): PlsqlconsolecommandContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PlsqlconsolecommandContext extends ParserRuleContext {
    MetaCommand(): TerminalNode;
    EndMetaCommand(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CallstmtContext extends ParserRuleContext {
    CALL(): TerminalNode;
    func_application(): Func_applicationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreaterolestmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    ROLE(): TerminalNode;
    roleid(): RoleidContext;
    optrolelist(): OptrolelistContext;
    opt_with(): Opt_withContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_withContext extends ParserRuleContext {
    WITH(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptrolelistContext extends ParserRuleContext {
    createoptroleelem(): CreateoptroleelemContext[];
    createoptroleelem(i: number): CreateoptroleelemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlteroptrolelistContext extends ParserRuleContext {
    alteroptroleelem(): AlteroptroleelemContext[];
    alteroptroleelem(i: number): AlteroptroleelemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlteroptroleelemContext extends ParserRuleContext {
    PASSWORD(): TerminalNode | undefined;
    sconst(): SconstContext | undefined;
    NULL_P(): TerminalNode | undefined;
    ENCRYPTED(): TerminalNode | undefined;
    UNENCRYPTED(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    CONNECTION(): TerminalNode | undefined;
    LIMIT(): TerminalNode | undefined;
    signediconst(): SignediconstContext | undefined;
    VALID(): TerminalNode | undefined;
    UNTIL(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    role_list(): Role_listContext | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateoptroleelemContext extends ParserRuleContext {
    alteroptroleelem(): AlteroptroleelemContext | undefined;
    SYSID(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    ADMIN(): TerminalNode | undefined;
    role_list(): Role_listContext | undefined;
    ROLE(): TerminalNode | undefined;
    IN_P(): TerminalNode | undefined;
    GROUP_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateuserstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    USER(): TerminalNode;
    roleid(): RoleidContext;
    optrolelist(): OptrolelistContext;
    opt_with(): Opt_withContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterrolestmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    rolespec(): RolespecContext;
    alteroptrolelist(): AlteroptrolelistContext;
    ROLE(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    opt_with(): Opt_withContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_in_databaseContext extends ParserRuleContext {
    IN_P(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    name(): NameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterrolesetstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    rolespec(): RolespecContext;
    opt_in_database(): Opt_in_databaseContext;
    setresetclause(): SetresetclauseContext;
    ROLE(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DroprolestmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    role_list(): Role_listContext;
    ROLE(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    GROUP_P(): TerminalNode | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreategroupstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    GROUP_P(): TerminalNode;
    roleid(): RoleidContext;
    optrolelist(): OptrolelistContext;
    opt_with(): Opt_withContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltergroupstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    GROUP_P(): TerminalNode;
    rolespec(): RolespecContext;
    add_drop(): Add_dropContext;
    USER(): TerminalNode;
    role_list(): Role_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Add_dropContext extends ParserRuleContext {
    ADD_P(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateschemastmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    SCHEMA(): TerminalNode;
    optschemaeltlist(): OptschemaeltlistContext;
    AUTHORIZATION(): TerminalNode | undefined;
    rolespec(): RolespecContext | undefined;
    colid(): ColidContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    optschemaname(): OptschemanameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptschemanameContext extends ParserRuleContext {
    colid(): ColidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptschemaeltlistContext extends ParserRuleContext {
    schema_stmt(): Schema_stmtContext[];
    schema_stmt(i: number): Schema_stmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Schema_stmtContext extends ParserRuleContext {
    createstmt(): CreatestmtContext | undefined;
    indexstmt(): IndexstmtContext | undefined;
    createseqstmt(): CreateseqstmtContext | undefined;
    createtrigstmt(): CreatetrigstmtContext | undefined;
    grantstmt(): GrantstmtContext | undefined;
    viewstmt(): ViewstmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class VariablesetstmtContext extends ParserRuleContext {
    SET(): TerminalNode;
    set_rest(): Set_restContext;
    LOCAL(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Set_restContext extends ParserRuleContext {
    TRANSACTION(): TerminalNode | undefined;
    transaction_mode_list(): Transaction_mode_listContext | undefined;
    SESSION(): TerminalNode | undefined;
    CHARACTERISTICS(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    set_rest_more(): Set_rest_moreContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Generic_setContext extends ParserRuleContext {
    var_name(): Var_nameContext;
    var_list(): Var_listContext;
    TO(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Set_rest_moreContext extends ParserRuleContext {
    generic_set(): Generic_setContext | undefined;
    var_name(): Var_nameContext | undefined;
    FROM(): TerminalNode | undefined;
    CURRENT_P(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    zone_value(): Zone_valueContext | undefined;
    CATALOG(): TerminalNode | undefined;
    sconst(): SconstContext | undefined;
    SCHEMA(): TerminalNode | undefined;
    NAMES(): TerminalNode | undefined;
    opt_encoding(): Opt_encodingContext | undefined;
    ROLE(): TerminalNode | undefined;
    nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined;
    SESSION(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    XML_P(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    document_or_content(): Document_or_contentContext | undefined;
    TRANSACTION(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Var_nameContext extends ParserRuleContext {
    colid(): ColidContext[];
    colid(i: number): ColidContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Var_listContext extends ParserRuleContext {
    var_value(): Var_valueContext[];
    var_value(i: number): Var_valueContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Var_valueContext extends ParserRuleContext {
    opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined;
    numericonly(): NumericonlyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Iso_levelContext extends ParserRuleContext {
    READ(): TerminalNode | undefined;
    UNCOMMITTED(): TerminalNode | undefined;
    COMMITTED(): TerminalNode | undefined;
    REPEATABLE(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_boolean_or_stringContext extends ParserRuleContext {
    TRUE_P(): TerminalNode | undefined;
    FALSE_P(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Zone_valueContext extends ParserRuleContext {
    sconst(): SconstContext | undefined;
    identifier(): IdentifierContext | undefined;
    constinterval(): ConstintervalContext | undefined;
    opt_interval(): Opt_intervalContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    numericonly(): NumericonlyContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_encodingContext extends ParserRuleContext {
    sconst(): SconstContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Nonreservedword_or_sconstContext extends ParserRuleContext {
    nonreservedword(): NonreservedwordContext | undefined;
    sconst(): SconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class VariableresetstmtContext extends ParserRuleContext {
    RESET(): TerminalNode;
    reset_rest(): Reset_restContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Reset_restContext extends ParserRuleContext {
    generic_reset(): Generic_resetContext | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Generic_resetContext extends ParserRuleContext {
    var_name(): Var_nameContext | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SetresetclauseContext extends ParserRuleContext {
    SET(): TerminalNode | undefined;
    set_rest(): Set_restContext | undefined;
    variableresetstmt(): VariableresetstmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class FunctionsetresetclauseContext extends ParserRuleContext {
    SET(): TerminalNode | undefined;
    set_rest_more(): Set_rest_moreContext | undefined;
    variableresetstmt(): VariableresetstmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class VariableshowstmtContext extends ParserRuleContext {
    SHOW(): TerminalNode;
    var_name(): Var_nameContext | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    AUTHORIZATION(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstraintssetstmtContext extends ParserRuleContext {
    SET(): TerminalNode;
    CONSTRAINTS(): TerminalNode;
    constraints_set_list(): Constraints_set_listContext;
    constraints_set_mode(): Constraints_set_modeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Constraints_set_listContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    qualified_name_list(): Qualified_name_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Constraints_set_modeContext extends ParserRuleContext {
    DEFERRED(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CheckpointstmtContext extends ParserRuleContext {
    CHECKPOINT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DiscardstmtContext extends ParserRuleContext {
    DISCARD(): TerminalNode;
    ALL(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    PLANS(): TerminalNode | undefined;
    SEQUENCES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltertablestmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TABLE(): TerminalNode | undefined;
    relation_expr(): Relation_exprContext | undefined;
    alter_table_cmds(): Alter_table_cmdsContext | undefined;
    partition_cmd(): Partition_cmdContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    IN_P(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode[];
    TABLESPACE(i: number): TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext;
    SET(): TerminalNode | undefined;
    OWNED(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    role_list(): Role_listContext | undefined;
    opt_nowait(): Opt_nowaitContext | undefined;
    INDEX(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    index_partition_cmd(): Index_partition_cmdContext | undefined;
    SEQUENCE(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_table_cmdsContext extends ParserRuleContext {
    alter_table_cmd(): Alter_table_cmdContext[];
    alter_table_cmd(i: number): Alter_table_cmdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Partition_cmdContext extends ParserRuleContext {
    ATTACH(): TerminalNode | undefined;
    PARTITION(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    partitionboundspec(): PartitionboundspecContext | undefined;
    DETACH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Index_partition_cmdContext extends ParserRuleContext {
    ATTACH(): TerminalNode;
    PARTITION(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_table_cmdContext extends ParserRuleContext {
    ADD_P(): TerminalNode | undefined;
    columnDef(): ColumnDefContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    colid(): ColidContext[];
    colid(i: number): ColidContext;
    alter_column_default(): Alter_column_defaultContext | undefined;
    opt_column(): Opt_columnContext | undefined;
    DROP(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    EXPRESSION(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    signediconst(): SignediconstContext | undefined;
    iconst(): IconstContext | undefined;
    reloptions(): ReloptionsContext | undefined;
    RESET(): TerminalNode | undefined;
    STORAGE(): TerminalNode | undefined;
    GENERATED(): TerminalNode | undefined;
    generated_when(): Generated_whenContext | undefined;
    AS(): TerminalNode | undefined;
    IDENTITY_P(): TerminalNode | undefined;
    optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext | undefined;
    alter_identity_column_option_list(): Alter_identity_column_option_listContext | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    TYPE_P(): TerminalNode | undefined;
    typename(): TypenameContext | undefined;
    opt_set_data(): Opt_set_dataContext | undefined;
    opt_collate_clause(): Opt_collate_clauseContext | undefined;
    alter_using(): Alter_usingContext | undefined;
    alter_generic_options(): Alter_generic_optionsContext | undefined;
    tableconstraint(): TableconstraintContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    name(): NameContext | undefined;
    constraintattributespec(): ConstraintattributespecContext | undefined;
    VALIDATE(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    OIDS(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    LOGGED(): TerminalNode | undefined;
    UNLOGGED(): TerminalNode | undefined;
    ENABLE_P(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    REPLICA(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    DISABLE_P(): TerminalNode | undefined;
    RULE(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    NO(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    OWNER(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    rolespec(): RolespecContext | undefined;
    TABLESPACE(): TerminalNode | undefined;
    replica_identity(): Replica_identityContext | undefined;
    ROW(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    SECURITY(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_column_defaultContext extends ParserRuleContext {
    SET(): TerminalNode | undefined;
    DEFAULT(): TerminalNode;
    a_expr(): A_exprContext | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_drop_behaviorContext extends ParserRuleContext {
    CASCADE(): TerminalNode | undefined;
    RESTRICT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_collate_clauseContext extends ParserRuleContext {
    COLLATE(): TerminalNode;
    any_name(): Any_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_usingContext extends ParserRuleContext {
    USING(): TerminalNode;
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Replica_identityContext extends ParserRuleContext {
    NOTHING(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    name(): NameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ReloptionsContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    reloption_list(): Reloption_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_reloptionsContext extends ParserRuleContext {
    WITH(): TerminalNode;
    reloptions(): ReloptionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Reloption_listContext extends ParserRuleContext {
    reloption_elem(): Reloption_elemContext[];
    reloption_elem(i: number): Reloption_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Reloption_elemContext extends ParserRuleContext {
    collabel(): CollabelContext[];
    collabel(i: number): CollabelContext;
    EQUAL(): TerminalNode | undefined;
    def_arg(): Def_argContext | undefined;
    DOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_identity_column_option_listContext extends ParserRuleContext {
    alter_identity_column_option(): Alter_identity_column_optionContext[];
    alter_identity_column_option(i: number): Alter_identity_column_optionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_identity_column_optionContext extends ParserRuleContext {
    RESTART(): TerminalNode | undefined;
    numericonly(): NumericonlyContext | undefined;
    opt_with(): Opt_withContext | undefined;
    SET(): TerminalNode | undefined;
    seqoptelem(): SeqoptelemContext | undefined;
    GENERATED(): TerminalNode | undefined;
    generated_when(): Generated_whenContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PartitionboundspecContext extends ParserRuleContext {
    FOR(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode[];
    OPEN_PAREN(i: number): TerminalNode;
    hash_partbound(): Hash_partboundContext | undefined;
    CLOSE_PAREN(): TerminalNode[];
    CLOSE_PAREN(i: number): TerminalNode;
    IN_P(): TerminalNode | undefined;
    expr_list(): Expr_listContext[];
    expr_list(i: number): Expr_listContext;
    FROM(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Hash_partbound_elemContext extends ParserRuleContext {
    nonreservedword(): NonreservedwordContext;
    iconst(): IconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Hash_partboundContext extends ParserRuleContext {
    hash_partbound_elem(): Hash_partbound_elemContext[];
    hash_partbound_elem(i: number): Hash_partbound_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltercompositetypestmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TYPE_P(): TerminalNode;
    any_name(): Any_nameContext;
    alter_type_cmds(): Alter_type_cmdsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_type_cmdsContext extends ParserRuleContext {
    alter_type_cmd(): Alter_type_cmdContext[];
    alter_type_cmd(i: number): Alter_type_cmdContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_type_cmdContext extends ParserRuleContext {
    ADD_P(): TerminalNode | undefined;
    ATTRIBUTE(): TerminalNode;
    tablefuncelement(): TablefuncelementContext | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    DROP(): TerminalNode | undefined;
    colid(): ColidContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    typename(): TypenameContext | undefined;
    opt_set_data(): Opt_set_dataContext | undefined;
    opt_collate_clause(): Opt_collate_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CloseportalstmtContext extends ParserRuleContext {
    CLOSE(): TerminalNode;
    cursor_name(): Cursor_nameContext | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CopystmtContext extends ParserRuleContext {
    COPY(): TerminalNode;
    qualified_name(): Qualified_nameContext | undefined;
    copy_from(): Copy_fromContext | undefined;
    copy_file_name(): Copy_file_nameContext;
    copy_options(): Copy_optionsContext;
    opt_binary(): Opt_binaryContext | undefined;
    opt_column_list(): Opt_column_listContext | undefined;
    opt_program(): Opt_programContext | undefined;
    copy_delimiter(): Copy_delimiterContext | undefined;
    opt_with(): Opt_withContext | undefined;
    where_clause(): Where_clauseContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    preparablestmt(): PreparablestmtContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_fromContext extends ParserRuleContext {
    FROM(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_programContext extends ParserRuleContext {
    PROGRAM(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_file_nameContext extends ParserRuleContext {
    sconst(): SconstContext | undefined;
    STDIN(): TerminalNode | undefined;
    STDOUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_optionsContext extends ParserRuleContext {
    copy_opt_list(): Copy_opt_listContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    copy_generic_opt_list(): Copy_generic_opt_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_opt_listContext extends ParserRuleContext {
    copy_opt_item(): Copy_opt_itemContext[];
    copy_opt_item(i: number): Copy_opt_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_opt_itemContext extends ParserRuleContext {
    BINARY(): TerminalNode | undefined;
    FREEZE(): TerminalNode | undefined;
    DELIMITER(): TerminalNode | undefined;
    sconst(): SconstContext | undefined;
    opt_as(): Opt_asContext | undefined;
    NULL_P(): TerminalNode | undefined;
    CSV(): TerminalNode | undefined;
    HEADER_P(): TerminalNode | undefined;
    QUOTE(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    columnlist(): ColumnlistContext | undefined;
    STAR(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    ENCODING(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_binaryContext extends ParserRuleContext {
    BINARY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_delimiterContext extends ParserRuleContext {
    DELIMITERS(): TerminalNode;
    sconst(): SconstContext;
    opt_using(): Opt_usingContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_usingContext extends ParserRuleContext {
    USING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_generic_opt_listContext extends ParserRuleContext {
    copy_generic_opt_elem(): Copy_generic_opt_elemContext[];
    copy_generic_opt_elem(i: number): Copy_generic_opt_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_generic_opt_elemContext extends ParserRuleContext {
    collabel(): CollabelContext;
    copy_generic_opt_arg(): Copy_generic_opt_argContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_generic_opt_argContext extends ParserRuleContext {
    opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined;
    numericonly(): NumericonlyContext | undefined;
    STAR(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    copy_generic_opt_arg_list(): Copy_generic_opt_arg_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_generic_opt_arg_listContext extends ParserRuleContext {
    copy_generic_opt_arg_list_item(): Copy_generic_opt_arg_list_itemContext[];
    copy_generic_opt_arg_list_item(i: number): Copy_generic_opt_arg_list_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
    opt_boolean_or_string(): Opt_boolean_or_stringContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatestmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TABLE(): TerminalNode;
    qualified_name(): Qualified_nameContext[];
    qualified_name(i: number): Qualified_nameContext;
    OPEN_PAREN(): TerminalNode | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    PARTITION(): TerminalNode | undefined;
    partitionboundspec(): PartitionboundspecContext | undefined;
    opttemp(): OpttempContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    opttableelementlist(): OpttableelementlistContext | undefined;
    optinherit(): OptinheritContext | undefined;
    optpartitionspec(): OptpartitionspecContext | undefined;
    table_access_method_clause(): Table_access_method_clauseContext | undefined;
    optwith(): OptwithContext | undefined;
    oncommitoption(): OncommitoptionContext | undefined;
    opttablespace(): OpttablespaceContext | undefined;
    opttypedtableelementlist(): OpttypedtableelementlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OpttempContext extends ParserRuleContext {
    TEMPORARY(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    UNLOGGED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OpttableelementlistContext extends ParserRuleContext {
    tableelementlist(): TableelementlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OpttypedtableelementlistContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    typedtableelementlist(): TypedtableelementlistContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TableelementlistContext extends ParserRuleContext {
    tableelement(): TableelementContext[];
    tableelement(i: number): TableelementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TypedtableelementlistContext extends ParserRuleContext {
    typedtableelement(): TypedtableelementContext[];
    typedtableelement(i: number): TypedtableelementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TableelementContext extends ParserRuleContext {
    columnDef(): ColumnDefContext | undefined;
    tablelikeclause(): TablelikeclauseContext | undefined;
    tableconstraint(): TableconstraintContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TypedtableelementContext extends ParserRuleContext {
    columnOptions(): ColumnOptionsContext | undefined;
    tableconstraint(): TableconstraintContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColumnDefContext extends ParserRuleContext {
    colid(): ColidContext;
    typename(): TypenameContext;
    colquallist(): ColquallistContext;
    create_generic_options(): Create_generic_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColumnOptionsContext extends ParserRuleContext {
    colid(): ColidContext;
    colquallist(): ColquallistContext;
    WITH(): TerminalNode | undefined;
    OPTIONS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColquallistContext extends ParserRuleContext {
    colconstraint(): ColconstraintContext[];
    colconstraint(i: number): ColconstraintContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColconstraintContext extends ParserRuleContext {
    CONSTRAINT(): TerminalNode | undefined;
    name(): NameContext | undefined;
    colconstraintelem(): ColconstraintelemContext | undefined;
    constraintattr(): ConstraintattrContext | undefined;
    COLLATE(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColconstraintelemContext extends ParserRuleContext {
    NOT(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    opt_definition(): Opt_definitionContext | undefined;
    optconstablespace(): OptconstablespaceContext | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    CHECK(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    opt_no_inherit(): Opt_no_inheritContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    b_expr(): B_exprContext | undefined;
    GENERATED(): TerminalNode | undefined;
    generated_when(): Generated_whenContext | undefined;
    AS(): TerminalNode | undefined;
    IDENTITY_P(): TerminalNode | undefined;
    STORED(): TerminalNode | undefined;
    optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext | undefined;
    REFERENCES(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    opt_column_list(): Opt_column_listContext | undefined;
    key_match(): Key_matchContext | undefined;
    key_actions(): Key_actionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Generated_whenContext extends ParserRuleContext {
    ALWAYS(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstraintattrContext extends ParserRuleContext {
    DEFERRABLE(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    INITIALLY(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TablelikeclauseContext extends ParserRuleContext {
    LIKE(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    tablelikeoptionlist(): TablelikeoptionlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TablelikeoptionlistContext extends ParserRuleContext {
    tablelikeoption(): TablelikeoptionContext[];
    tablelikeoption(i: number): TablelikeoptionContext;
    INCLUDING(): TerminalNode[];
    INCLUDING(i: number): TerminalNode;
    EXCLUDING(): TerminalNode[];
    EXCLUDING(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TablelikeoptionContext extends ParserRuleContext {
    COMMENTS(): TerminalNode | undefined;
    CONSTRAINTS(): TerminalNode | undefined;
    DEFAULTS(): TerminalNode | undefined;
    IDENTITY_P(): TerminalNode | undefined;
    GENERATED(): TerminalNode | undefined;
    INDEXES(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    STORAGE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TableconstraintContext extends ParserRuleContext {
    CONSTRAINT(): TerminalNode | undefined;
    name(): NameContext | undefined;
    constraintelem(): ConstraintelemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstraintelemContext extends ParserRuleContext {
    CHECK(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constraintattributespec(): ConstraintattributespecContext | undefined;
    UNIQUE(): TerminalNode | undefined;
    columnlist(): ColumnlistContext | undefined;
    existingindex(): ExistingindexContext | undefined;
    opt_c_include(): Opt_c_includeContext | undefined;
    opt_definition(): Opt_definitionContext | undefined;
    optconstablespace(): OptconstablespaceContext | undefined;
    PRIMARY(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    EXCLUDE(): TerminalNode | undefined;
    exclusionconstraintlist(): ExclusionconstraintlistContext | undefined;
    access_method_clause(): Access_method_clauseContext | undefined;
    exclusionwhereclause(): ExclusionwhereclauseContext | undefined;
    FOREIGN(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    opt_column_list(): Opt_column_listContext | undefined;
    key_match(): Key_matchContext | undefined;
    key_actions(): Key_actionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_no_inheritContext extends ParserRuleContext {
    NO(): TerminalNode;
    INHERIT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_column_listContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    columnlist(): ColumnlistContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColumnlistContext extends ParserRuleContext {
    columnElem(): ColumnElemContext[];
    columnElem(i: number): ColumnElemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColumnElemContext extends ParserRuleContext {
    colid(): ColidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_c_includeContext extends ParserRuleContext {
    INCLUDE(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    columnlist(): ColumnlistContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Key_matchContext extends ParserRuleContext {
    MATCH(): TerminalNode;
    FULL(): TerminalNode | undefined;
    PARTIAL(): TerminalNode | undefined;
    SIMPLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ExclusionconstraintlistContext extends ParserRuleContext {
    exclusionconstraintelem(): ExclusionconstraintelemContext[];
    exclusionconstraintelem(i: number): ExclusionconstraintelemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ExclusionconstraintelemContext extends ParserRuleContext {
    index_elem(): Index_elemContext;
    WITH(): TerminalNode;
    any_operator(): Any_operatorContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ExclusionwhereclauseContext extends ParserRuleContext {
    WHERE(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    a_expr(): A_exprContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Key_actionsContext extends ParserRuleContext {
    key_update(): Key_updateContext | undefined;
    key_delete(): Key_deleteContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Key_updateContext extends ParserRuleContext {
    ON(): TerminalNode;
    UPDATE(): TerminalNode;
    key_action(): Key_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Key_deleteContext extends ParserRuleContext {
    ON(): TerminalNode;
    DELETE_P(): TerminalNode;
    key_action(): Key_actionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Key_actionContext extends ParserRuleContext {
    NO(): TerminalNode | undefined;
    ACTION(): TerminalNode | undefined;
    RESTRICT(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptinheritContext extends ParserRuleContext {
    INHERITS(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    qualified_name_list(): Qualified_name_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptpartitionspecContext extends ParserRuleContext {
    partitionspec(): PartitionspecContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PartitionspecContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    colid(): ColidContext;
    OPEN_PAREN(): TerminalNode;
    part_params(): Part_paramsContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Part_paramsContext extends ParserRuleContext {
    part_elem(): Part_elemContext[];
    part_elem(i: number): Part_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Part_elemContext extends ParserRuleContext {
    colid(): ColidContext | undefined;
    opt_collate(): Opt_collateContext | undefined;
    opt_class(): Opt_classContext | undefined;
    func_expr_windowless(): Func_expr_windowlessContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Table_access_method_clauseContext extends ParserRuleContext {
    USING(): TerminalNode;
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptwithContext extends ParserRuleContext {
    WITH(): TerminalNode | undefined;
    reloptions(): ReloptionsContext | undefined;
    WITHOUT(): TerminalNode | undefined;
    OIDS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OncommitoptionContext extends ParserRuleContext {
    ON(): TerminalNode;
    COMMIT(): TerminalNode;
    DROP(): TerminalNode | undefined;
    DELETE_P(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    PRESERVE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OpttablespaceContext extends ParserRuleContext {
    TABLESPACE(): TerminalNode;
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptconstablespaceContext extends ParserRuleContext {
    USING(): TerminalNode;
    INDEX(): TerminalNode;
    TABLESPACE(): TerminalNode;
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ExistingindexContext extends ParserRuleContext {
    USING(): TerminalNode;
    INDEX(): TerminalNode;
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatestatsstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    STATISTICS(): TerminalNode;
    any_name(): Any_nameContext;
    ON(): TerminalNode;
    expr_list(): Expr_listContext;
    FROM(): TerminalNode;
    from_list(): From_listContext;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    opt_name_list(): Opt_name_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterstatsstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    STATISTICS(): TerminalNode[];
    STATISTICS(i: number): TerminalNode;
    any_name(): Any_nameContext;
    SET(): TerminalNode;
    signediconst(): SignediconstContext;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateasstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TABLE(): TerminalNode;
    create_as_target(): Create_as_targetContext;
    AS(): TerminalNode;
    selectstmt(): SelectstmtContext;
    opttemp(): OpttempContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    opt_with_data(): Opt_with_dataContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Create_as_targetContext extends ParserRuleContext {
    qualified_name(): Qualified_nameContext;
    opt_column_list(): Opt_column_listContext | undefined;
    table_access_method_clause(): Table_access_method_clauseContext | undefined;
    optwith(): OptwithContext | undefined;
    oncommitoption(): OncommitoptionContext | undefined;
    opttablespace(): OpttablespaceContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_with_dataContext extends ParserRuleContext {
    WITH(): TerminalNode;
    DATA_P(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatematviewstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    MATERIALIZED(): TerminalNode;
    VIEW(): TerminalNode;
    create_mv_target(): Create_mv_targetContext;
    AS(): TerminalNode;
    selectstmt(): SelectstmtContext;
    optnolog(): OptnologContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    opt_with_data(): Opt_with_dataContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Create_mv_targetContext extends ParserRuleContext {
    qualified_name(): Qualified_nameContext;
    opt_column_list(): Opt_column_listContext | undefined;
    table_access_method_clause(): Table_access_method_clauseContext | undefined;
    opt_reloptions(): Opt_reloptionsContext | undefined;
    opttablespace(): OpttablespaceContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptnologContext extends ParserRuleContext {
    UNLOGGED(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RefreshmatviewstmtContext extends ParserRuleContext {
    REFRESH(): TerminalNode;
    MATERIALIZED(): TerminalNode;
    VIEW(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    opt_concurrently(): Opt_concurrentlyContext | undefined;
    opt_with_data(): Opt_with_dataContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateseqstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    SEQUENCE(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    opttemp(): OpttempContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    optseqoptlist(): OptseqoptlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterseqstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    SEQUENCE(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    seqoptlist(): SeqoptlistContext;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptseqoptlistContext extends ParserRuleContext {
    seqoptlist(): SeqoptlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptparenthesizedseqoptlistContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    seqoptlist(): SeqoptlistContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SeqoptlistContext extends ParserRuleContext {
    seqoptelem(): SeqoptelemContext[];
    seqoptelem(i: number): SeqoptelemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SeqoptelemContext extends ParserRuleContext {
    AS(): TerminalNode | undefined;
    simpletypename(): SimpletypenameContext | undefined;
    CACHE(): TerminalNode | undefined;
    numericonly(): NumericonlyContext | undefined;
    CYCLE(): TerminalNode | undefined;
    INCREMENT(): TerminalNode | undefined;
    opt_by(): Opt_byContext | undefined;
    MAXVALUE(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    OWNED(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    SEQUENCE(): TerminalNode | undefined;
    NAME_P(): TerminalNode | undefined;
    START(): TerminalNode | undefined;
    opt_with(): Opt_withContext | undefined;
    RESTART(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_byContext extends ParserRuleContext {
    BY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class NumericonlyContext extends ParserRuleContext {
    fconst(): FconstContext | undefined;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    signediconst(): SignediconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Numericonly_listContext extends ParserRuleContext {
    numericonly(): NumericonlyContext[];
    numericonly(i: number): NumericonlyContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateplangstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    LANGUAGE(): TerminalNode;
    name(): NameContext;
    opt_or_replace(): Opt_or_replaceContext | undefined;
    opt_trusted(): Opt_trustedContext | undefined;
    opt_procedural(): Opt_proceduralContext | undefined;
    HANDLER(): TerminalNode | undefined;
    handler_name(): Handler_nameContext | undefined;
    opt_inline_handler(): Opt_inline_handlerContext | undefined;
    opt_validator(): Opt_validatorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_trustedContext extends ParserRuleContext {
    TRUSTED(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Handler_nameContext extends ParserRuleContext {
    name(): NameContext;
    attrs(): AttrsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_inline_handlerContext extends ParserRuleContext {
    INLINE_P(): TerminalNode;
    handler_name(): Handler_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Validator_clauseContext extends ParserRuleContext {
    VALIDATOR(): TerminalNode;
    handler_name(): Handler_nameContext | undefined;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_validatorContext extends ParserRuleContext {
    validator_clause(): Validator_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_proceduralContext extends ParserRuleContext {
    PROCEDURAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatetablespacestmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TABLESPACE(): TerminalNode;
    name(): NameContext;
    LOCATION(): TerminalNode;
    sconst(): SconstContext;
    opttablespaceowner(): OpttablespaceownerContext | undefined;
    opt_reloptions(): Opt_reloptionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OpttablespaceownerContext extends ParserRuleContext {
    OWNER(): TerminalNode;
    rolespec(): RolespecContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DroptablespacestmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    TABLESPACE(): TerminalNode;
    name(): NameContext;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateextensionstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    EXTENSION(): TerminalNode;
    name(): NameContext;
    create_extension_opt_list(): Create_extension_opt_listContext;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    opt_with(): Opt_withContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Create_extension_opt_listContext extends ParserRuleContext {
    create_extension_opt_item(): Create_extension_opt_itemContext[];
    create_extension_opt_item(i: number): Create_extension_opt_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Create_extension_opt_itemContext extends ParserRuleContext {
    SCHEMA(): TerminalNode | undefined;
    name(): NameContext | undefined;
    VERSION_P(): TerminalNode | undefined;
    nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined;
    FROM(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterextensionstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    EXTENSION(): TerminalNode;
    name(): NameContext;
    UPDATE(): TerminalNode;
    alter_extension_opt_list(): Alter_extension_opt_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_extension_opt_listContext extends ParserRuleContext {
    alter_extension_opt_item(): Alter_extension_opt_itemContext[];
    alter_extension_opt_item(i: number): Alter_extension_opt_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_extension_opt_itemContext extends ParserRuleContext {
    TO(): TerminalNode;
    nonreservedword_or_sconst(): Nonreservedword_or_sconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterextensioncontentsstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    EXTENSION(): TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext;
    add_drop(): Add_dropContext;
    object_type_name(): Object_type_nameContext | undefined;
    object_type_any_name(): Object_type_any_nameContext | undefined;
    any_name(): Any_nameContext | undefined;
    AGGREGATE(): TerminalNode | undefined;
    aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined;
    CAST(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    AS(): TerminalNode | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    DOMAIN_P(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    operator_with_argtypes(): Operator_with_argtypesContext | undefined;
    CLASS(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    TRANSFORM(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatefdwstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    FOREIGN(): TerminalNode;
    DATA_P(): TerminalNode;
    WRAPPER(): TerminalNode;
    name(): NameContext;
    opt_fdw_options(): Opt_fdw_optionsContext | undefined;
    create_generic_options(): Create_generic_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Fdw_optionContext extends ParserRuleContext {
    HANDLER(): TerminalNode | undefined;
    handler_name(): Handler_nameContext | undefined;
    NO(): TerminalNode | undefined;
    VALIDATOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Fdw_optionsContext extends ParserRuleContext {
    fdw_option(): Fdw_optionContext[];
    fdw_option(i: number): Fdw_optionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_fdw_optionsContext extends ParserRuleContext {
    fdw_options(): Fdw_optionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterfdwstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    FOREIGN(): TerminalNode;
    DATA_P(): TerminalNode;
    WRAPPER(): TerminalNode;
    name(): NameContext;
    alter_generic_options(): Alter_generic_optionsContext | undefined;
    opt_fdw_options(): Opt_fdw_optionsContext | undefined;
    fdw_options(): Fdw_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Create_generic_optionsContext extends ParserRuleContext {
    OPTIONS(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    generic_option_list(): Generic_option_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Generic_option_listContext extends ParserRuleContext {
    generic_option_elem(): Generic_option_elemContext[];
    generic_option_elem(i: number): Generic_option_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_generic_optionsContext extends ParserRuleContext {
    OPTIONS(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    alter_generic_option_list(): Alter_generic_option_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_generic_option_listContext extends ParserRuleContext {
    alter_generic_option_elem(): Alter_generic_option_elemContext[];
    alter_generic_option_elem(i: number): Alter_generic_option_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alter_generic_option_elemContext extends ParserRuleContext {
    generic_option_elem(): Generic_option_elemContext | undefined;
    SET(): TerminalNode | undefined;
    ADD_P(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    generic_option_name(): Generic_option_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Generic_option_elemContext extends ParserRuleContext {
    generic_option_name(): Generic_option_nameContext;
    generic_option_arg(): Generic_option_argContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Generic_option_nameContext extends ParserRuleContext {
    collabel(): CollabelContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Generic_option_argContext extends ParserRuleContext {
    sconst(): SconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateforeignserverstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    SERVER(): TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext;
    FOREIGN(): TerminalNode;
    DATA_P(): TerminalNode;
    WRAPPER(): TerminalNode;
    opt_type(): Opt_typeContext | undefined;
    opt_foreign_server_version(): Opt_foreign_server_versionContext | undefined;
    create_generic_options(): Create_generic_optionsContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_typeContext extends ParserRuleContext {
    TYPE_P(): TerminalNode;
    sconst(): SconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Foreign_server_versionContext extends ParserRuleContext {
    VERSION_P(): TerminalNode;
    sconst(): SconstContext | undefined;
    NULL_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_foreign_server_versionContext extends ParserRuleContext {
    foreign_server_version(): Foreign_server_versionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterforeignserverstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    SERVER(): TerminalNode;
    name(): NameContext;
    alter_generic_options(): Alter_generic_optionsContext | undefined;
    foreign_server_version(): Foreign_server_versionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateforeigntablestmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    FOREIGN(): TerminalNode;
    TABLE(): TerminalNode;
    qualified_name(): Qualified_nameContext[];
    qualified_name(i: number): Qualified_nameContext;
    OPEN_PAREN(): TerminalNode | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    SERVER(): TerminalNode;
    name(): NameContext;
    opttableelementlist(): OpttableelementlistContext | undefined;
    optinherit(): OptinheritContext | undefined;
    create_generic_options(): Create_generic_optionsContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    partitionboundspec(): PartitionboundspecContext | undefined;
    opttypedtableelementlist(): OpttypedtableelementlistContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ImportforeignschemastmtContext extends ParserRuleContext {
    IMPORT_P(): TerminalNode;
    FOREIGN(): TerminalNode;
    SCHEMA(): TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext;
    FROM(): TerminalNode;
    SERVER(): TerminalNode;
    INTO(): TerminalNode;
    import_qualification(): Import_qualificationContext | undefined;
    create_generic_options(): Create_generic_optionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Import_qualification_typeContext extends ParserRuleContext {
    LIMIT(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Import_qualificationContext extends ParserRuleContext {
    import_qualification_type(): Import_qualification_typeContext;
    OPEN_PAREN(): TerminalNode;
    relation_expr_list(): Relation_expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateusermappingstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    USER(): TerminalNode;
    MAPPING(): TerminalNode;
    FOR(): TerminalNode;
    auth_ident(): Auth_identContext;
    SERVER(): TerminalNode;
    name(): NameContext;
    create_generic_options(): Create_generic_optionsContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Auth_identContext extends ParserRuleContext {
    rolespec(): RolespecContext | undefined;
    USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DropusermappingstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    USER(): TerminalNode;
    MAPPING(): TerminalNode;
    FOR(): TerminalNode;
    auth_ident(): Auth_identContext;
    SERVER(): TerminalNode;
    name(): NameContext;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterusermappingstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    USER(): TerminalNode;
    MAPPING(): TerminalNode;
    FOR(): TerminalNode;
    auth_ident(): Auth_identContext;
    SERVER(): TerminalNode;
    name(): NameContext;
    alter_generic_options(): Alter_generic_optionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatepolicystmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    POLICY(): TerminalNode;
    name(): NameContext;
    ON(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    rowsecuritydefaultpermissive(): RowsecuritydefaultpermissiveContext | undefined;
    rowsecuritydefaultforcmd(): RowsecuritydefaultforcmdContext | undefined;
    rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext | undefined;
    rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | undefined;
    rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterpolicystmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    POLICY(): TerminalNode;
    name(): NameContext;
    ON(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    rowsecurityoptionaltorole(): RowsecurityoptionaltoroleContext | undefined;
    rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | undefined;
    rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RowsecurityoptionalexprContext extends ParserRuleContext {
    USING(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    a_expr(): A_exprContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RowsecurityoptionalwithcheckContext extends ParserRuleContext {
    WITH(): TerminalNode;
    CHECK(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    a_expr(): A_exprContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RowsecuritydefaulttoroleContext extends ParserRuleContext {
    TO(): TerminalNode;
    role_list(): Role_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RowsecurityoptionaltoroleContext extends ParserRuleContext {
    TO(): TerminalNode;
    role_list(): Role_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RowsecuritydefaultpermissiveContext extends ParserRuleContext {
    AS(): TerminalNode;
    identifier(): IdentifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RowsecuritydefaultforcmdContext extends ParserRuleContext {
    FOR(): TerminalNode;
    row_security_cmd(): Row_security_cmdContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Row_security_cmdContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    DELETE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateamstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    ACCESS(): TerminalNode;
    METHOD(): TerminalNode;
    name(): NameContext;
    TYPE_P(): TerminalNode;
    am_type(): Am_typeContext;
    HANDLER(): TerminalNode;
    handler_name(): Handler_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Am_typeContext extends ParserRuleContext {
    INDEX(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatetrigstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TRIGGER(): TerminalNode;
    name(): NameContext;
    triggeractiontime(): TriggeractiontimeContext | undefined;
    triggerevents(): TriggereventsContext;
    ON(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    EXECUTE(): TerminalNode;
    function_or_procedure(): Function_or_procedureContext;
    func_name(): Func_nameContext;
    OPEN_PAREN(): TerminalNode;
    triggerfuncargs(): TriggerfuncargsContext;
    CLOSE_PAREN(): TerminalNode;
    triggerreferencing(): TriggerreferencingContext | undefined;
    triggerforspec(): TriggerforspecContext | undefined;
    triggerwhen(): TriggerwhenContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    constraintattributespec(): ConstraintattributespecContext | undefined;
    FOR(): TerminalNode | undefined;
    EACH(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    optconstrfromtable(): OptconstrfromtableContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggeractiontimeContext extends ParserRuleContext {
    BEFORE(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    INSTEAD(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggereventsContext extends ParserRuleContext {
    triggeroneevent(): TriggeroneeventContext[];
    triggeroneevent(i: number): TriggeroneeventContext;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggeroneeventContext extends ParserRuleContext {
    INSERT(): TerminalNode | undefined;
    DELETE_P(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    columnlist(): ColumnlistContext | undefined;
    TRUNCATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggerreferencingContext extends ParserRuleContext {
    REFERENCING(): TerminalNode;
    triggertransitions(): TriggertransitionsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggertransitionsContext extends ParserRuleContext {
    triggertransition(): TriggertransitionContext[];
    triggertransition(i: number): TriggertransitionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggertransitionContext extends ParserRuleContext {
    transitionoldornew(): TransitionoldornewContext;
    transitionrowortable(): TransitionrowortableContext;
    transitionrelname(): TransitionrelnameContext;
    opt_as(): Opt_asContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TransitionoldornewContext extends ParserRuleContext {
    NEW(): TerminalNode | undefined;
    OLD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TransitionrowortableContext extends ParserRuleContext {
    TABLE(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TransitionrelnameContext extends ParserRuleContext {
    colid(): ColidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggerforspecContext extends ParserRuleContext {
    FOR(): TerminalNode;
    triggerfortype(): TriggerfortypeContext;
    triggerforopteach(): TriggerforopteachContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggerforopteachContext extends ParserRuleContext {
    EACH(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggerfortypeContext extends ParserRuleContext {
    ROW(): TerminalNode | undefined;
    STATEMENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggerwhenContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    a_expr(): A_exprContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Function_or_procedureContext extends ParserRuleContext {
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggerfuncargsContext extends ParserRuleContext {
    triggerfuncarg(): TriggerfuncargContext[];
    triggerfuncarg(i: number): TriggerfuncargContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TriggerfuncargContext extends ParserRuleContext {
    iconst(): IconstContext | undefined;
    fconst(): FconstContext | undefined;
    sconst(): SconstContext | undefined;
    collabel(): CollabelContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OptconstrfromtableContext extends ParserRuleContext {
    FROM(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstraintattributespecContext extends ParserRuleContext {
    constraintattributeElem(): ConstraintattributeElemContext[];
    constraintattributeElem(i: number): ConstraintattributeElemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstraintattributeElemContext extends ParserRuleContext {
    NOT(): TerminalNode | undefined;
    DEFERRABLE(): TerminalNode | undefined;
    INITIALLY(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    VALID(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateeventtrigstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    EVENT(): TerminalNode;
    TRIGGER(): TerminalNode;
    name(): NameContext;
    ON(): TerminalNode;
    collabel(): CollabelContext;
    EXECUTE(): TerminalNode;
    function_or_procedure(): Function_or_procedureContext;
    func_name(): Func_nameContext;
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    WHEN(): TerminalNode | undefined;
    event_trigger_when_list(): Event_trigger_when_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Event_trigger_when_listContext extends ParserRuleContext {
    event_trigger_when_item(): Event_trigger_when_itemContext[];
    event_trigger_when_item(i: number): Event_trigger_when_itemContext;
    AND(): TerminalNode[];
    AND(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Event_trigger_when_itemContext extends ParserRuleContext {
    colid(): ColidContext;
    IN_P(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    event_trigger_value_list(): Event_trigger_value_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Event_trigger_value_listContext extends ParserRuleContext {
    sconst(): SconstContext[];
    sconst(i: number): SconstContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltereventtrigstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    EVENT(): TerminalNode;
    TRIGGER(): TerminalNode;
    name(): NameContext;
    enable_trigger(): Enable_triggerContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Enable_triggerContext extends ParserRuleContext {
    ENABLE_P(): TerminalNode | undefined;
    REPLICA(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    DISABLE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateassertionstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    ASSERTION(): TerminalNode;
    any_name(): Any_nameContext;
    CHECK(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    a_expr(): A_exprContext;
    CLOSE_PAREN(): TerminalNode;
    constraintattributespec(): ConstraintattributespecContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DefinestmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    AGGREGATE(): TerminalNode | undefined;
    func_name(): Func_nameContext | undefined;
    aggr_args(): Aggr_argsContext | undefined;
    definition(): DefinitionContext | undefined;
    opt_or_replace(): Opt_or_replaceContext | undefined;
    old_aggr_definition(): Old_aggr_definitionContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    any_operator(): Any_operatorContext | undefined;
    TYPE_P(): TerminalNode | undefined;
    any_name(): Any_nameContext[];
    any_name(i: number): Any_nameContext;
    AS(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    opttablefuncelementlist(): OpttablefuncelementlistContext | undefined;
    ENUM_P(): TerminalNode | undefined;
    opt_enum_val_list(): Opt_enum_val_listContext | undefined;
    RANGE(): TerminalNode | undefined;
    TEXT_P(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    COLLATION(): TerminalNode | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DefinitionContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    def_list(): Def_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Def_listContext extends ParserRuleContext {
    def_elem(): Def_elemContext[];
    def_elem(i: number): Def_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Def_elemContext extends ParserRuleContext {
    collabel(): CollabelContext;
    EQUAL(): TerminalNode | undefined;
    def_arg(): Def_argContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Def_argContext extends ParserRuleContext {
    func_type(): Func_typeContext | undefined;
    reserved_keyword(): Reserved_keywordContext | undefined;
    qual_all_op(): Qual_all_opContext | undefined;
    numericonly(): NumericonlyContext | undefined;
    sconst(): SconstContext | undefined;
    NONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Old_aggr_definitionContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    old_aggr_list(): Old_aggr_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Old_aggr_listContext extends ParserRuleContext {
    old_aggr_elem(): Old_aggr_elemContext[];
    old_aggr_elem(i: number): Old_aggr_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Old_aggr_elemContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    EQUAL(): TerminalNode;
    def_arg(): Def_argContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_enum_val_listContext extends ParserRuleContext {
    enum_val_list(): Enum_val_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Enum_val_listContext extends ParserRuleContext {
    sconst(): SconstContext[];
    sconst(i: number): SconstContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterenumstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TYPE_P(): TerminalNode;
    any_name(): Any_nameContext;
    ADD_P(): TerminalNode | undefined;
    VALUE_P(): TerminalNode;
    sconst(): SconstContext[];
    sconst(i: number): SconstContext;
    opt_if_not_exists(): Opt_if_not_existsContext | undefined;
    BEFORE(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_if_not_existsContext extends ParserRuleContext {
    IF_P(): TerminalNode;
    NOT(): TerminalNode;
    EXISTS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateopclassstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    OPERATOR(): TerminalNode;
    CLASS(): TerminalNode;
    any_name(): Any_nameContext;
    FOR(): TerminalNode;
    TYPE_P(): TerminalNode;
    typename(): TypenameContext;
    USING(): TerminalNode;
    name(): NameContext;
    AS(): TerminalNode;
    opclass_item_list(): Opclass_item_listContext;
    opt_default(): Opt_defaultContext | undefined;
    opt_opfamily(): Opt_opfamilyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opclass_item_listContext extends ParserRuleContext {
    opclass_item(): Opclass_itemContext[];
    opclass_item(i: number): Opclass_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opclass_itemContext extends ParserRuleContext {
    OPERATOR(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    any_operator(): Any_operatorContext | undefined;
    opclass_purpose(): Opclass_purposeContext | undefined;
    opt_recheck(): Opt_recheckContext | undefined;
    operator_with_argtypes(): Operator_with_argtypesContext | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    type_list(): Type_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    STORAGE(): TerminalNode | undefined;
    typename(): TypenameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_defaultContext extends ParserRuleContext {
    DEFAULT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_opfamilyContext extends ParserRuleContext {
    FAMILY(): TerminalNode;
    any_name(): Any_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opclass_purposeContext extends ParserRuleContext {
    FOR(): TerminalNode;
    SEARCH(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_recheckContext extends ParserRuleContext {
    RECHECK(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateopfamilystmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    OPERATOR(): TerminalNode;
    FAMILY(): TerminalNode;
    any_name(): Any_nameContext;
    USING(): TerminalNode;
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlteropfamilystmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    OPERATOR(): TerminalNode;
    FAMILY(): TerminalNode;
    any_name(): Any_nameContext;
    USING(): TerminalNode;
    name(): NameContext;
    ADD_P(): TerminalNode | undefined;
    opclass_item_list(): Opclass_item_listContext | undefined;
    DROP(): TerminalNode | undefined;
    opclass_drop_list(): Opclass_drop_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opclass_drop_listContext extends ParserRuleContext {
    opclass_drop(): Opclass_dropContext[];
    opclass_drop(i: number): Opclass_dropContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opclass_dropContext extends ParserRuleContext {
    OPERATOR(): TerminalNode | undefined;
    iconst(): IconstContext;
    OPEN_PAREN(): TerminalNode;
    type_list(): Type_listContext;
    CLOSE_PAREN(): TerminalNode;
    FUNCTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DropopclassstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    OPERATOR(): TerminalNode;
    CLASS(): TerminalNode;
    any_name(): Any_nameContext;
    USING(): TerminalNode;
    name(): NameContext;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DropopfamilystmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    OPERATOR(): TerminalNode;
    FAMILY(): TerminalNode;
    any_name(): Any_nameContext;
    USING(): TerminalNode;
    name(): NameContext;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DropownedstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    OWNED(): TerminalNode;
    BY(): TerminalNode;
    role_list(): Role_listContext;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ReassignownedstmtContext extends ParserRuleContext {
    REASSIGN(): TerminalNode;
    OWNED(): TerminalNode;
    BY(): TerminalNode;
    role_list(): Role_listContext;
    TO(): TerminalNode;
    rolespec(): RolespecContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DropstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    object_type_any_name(): Object_type_any_nameContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    any_name_list(): Any_name_listContext | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    drop_type_name(): Drop_type_nameContext | undefined;
    name_list(): Name_listContext | undefined;
    object_type_name_on_any_name(): Object_type_name_on_any_nameContext | undefined;
    name(): NameContext | undefined;
    ON(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    TYPE_P(): TerminalNode | undefined;
    type_name_list(): Type_name_listContext | undefined;
    DOMAIN_P(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    CONCURRENTLY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Object_type_any_nameContext extends ParserRuleContext {
    TABLE(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    COLLATION(): TerminalNode | undefined;
    CONVERSION_P(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    TEXT_P(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Object_type_nameContext extends ParserRuleContext {
    drop_type_name(): Drop_type_nameContext | undefined;
    DATABASE(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Drop_type_nameContext extends ParserRuleContext {
    ACCESS(): TerminalNode | undefined;
    METHOD(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    DATA_P(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    opt_procedural(): Opt_proceduralContext | undefined;
    PUBLICATION(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Object_type_name_on_any_nameContext extends ParserRuleContext {
    POLICY(): TerminalNode | undefined;
    RULE(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Any_name_listContext extends ParserRuleContext {
    any_name(): Any_nameContext[];
    any_name(i: number): Any_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Any_nameContext extends ParserRuleContext {
    colid(): ColidContext;
    attrs(): AttrsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AttrsContext extends ParserRuleContext {
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    attr_name(): Attr_nameContext[];
    attr_name(i: number): Attr_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Type_name_listContext extends ParserRuleContext {
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TruncatestmtContext extends ParserRuleContext {
    TRUNCATE(): TerminalNode;
    relation_expr_list(): Relation_expr_listContext;
    opt_table(): Opt_tableContext | undefined;
    opt_restart_seqs(): Opt_restart_seqsContext | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_restart_seqsContext extends ParserRuleContext {
    CONTINUE_P(): TerminalNode | undefined;
    IDENTITY_P(): TerminalNode;
    RESTART(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CommentstmtContext extends ParserRuleContext {
    COMMENT(): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    object_type_any_name(): Object_type_any_nameContext | undefined;
    any_name(): Any_nameContext | undefined;
    IS(): TerminalNode;
    comment_text(): Comment_textContext;
    COLUMN(): TerminalNode | undefined;
    object_type_name(): Object_type_nameContext | undefined;
    name(): NameContext | undefined;
    TYPE_P(): TerminalNode | undefined;
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    DOMAIN_P(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    operator_with_argtypes(): Operator_with_argtypesContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    object_type_name_on_any_name(): Object_type_name_on_any_nameContext | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    TRANSFORM(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    LARGE_P(): TerminalNode | undefined;
    OBJECT_P(): TerminalNode | undefined;
    numericonly(): NumericonlyContext | undefined;
    CAST(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Comment_textContext extends ParserRuleContext {
    sconst(): SconstContext | undefined;
    NULL_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SeclabelstmtContext extends ParserRuleContext {
    SECURITY(): TerminalNode;
    LABEL(): TerminalNode;
    ON(): TerminalNode;
    object_type_any_name(): Object_type_any_nameContext | undefined;
    any_name(): Any_nameContext | undefined;
    IS(): TerminalNode;
    security_label(): Security_labelContext;
    opt_provider(): Opt_providerContext | undefined;
    COLUMN(): TerminalNode | undefined;
    object_type_name(): Object_type_nameContext | undefined;
    name(): NameContext | undefined;
    TYPE_P(): TerminalNode | undefined;
    typename(): TypenameContext | undefined;
    DOMAIN_P(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    LARGE_P(): TerminalNode | undefined;
    OBJECT_P(): TerminalNode | undefined;
    numericonly(): NumericonlyContext | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_providerContext extends ParserRuleContext {
    FOR(): TerminalNode;
    nonreservedword_or_sconst(): Nonreservedword_or_sconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Security_labelContext extends ParserRuleContext {
    sconst(): SconstContext | undefined;
    NULL_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class FetchstmtContext extends ParserRuleContext {
    FETCH(): TerminalNode | undefined;
    fetch_args(): Fetch_argsContext;
    MOVE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Fetch_argsContext extends ParserRuleContext {
    cursor_name(): Cursor_nameContext;
    from_in(): From_inContext | undefined;
    NEXT(): TerminalNode | undefined;
    opt_from_in(): Opt_from_inContext | undefined;
    PRIOR(): TerminalNode | undefined;
    FIRST_P(): TerminalNode | undefined;
    LAST_P(): TerminalNode | undefined;
    ABSOLUTE_P(): TerminalNode | undefined;
    signediconst(): SignediconstContext | undefined;
    RELATIVE_P(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    FORWARD(): TerminalNode | undefined;
    BACKWARD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class From_inContext extends ParserRuleContext {
    FROM(): TerminalNode | undefined;
    IN_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_from_inContext extends ParserRuleContext {
    from_in(): From_inContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class GrantstmtContext extends ParserRuleContext {
    GRANT(): TerminalNode;
    privileges(): PrivilegesContext;
    ON(): TerminalNode;
    privilege_target(): Privilege_targetContext;
    TO(): TerminalNode;
    grantee_list(): Grantee_listContext;
    opt_grant_grant_option(): Opt_grant_grant_optionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RevokestmtContext extends ParserRuleContext {
    REVOKE(): TerminalNode;
    privileges(): PrivilegesContext;
    ON(): TerminalNode;
    privilege_target(): Privilege_targetContext;
    FROM(): TerminalNode;
    grantee_list(): Grantee_listContext;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    GRANT(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PrivilegesContext extends ParserRuleContext {
    privilege_list(): Privilege_listContext | undefined;
    ALL(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    columnlist(): ColumnlistContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Privilege_listContext extends ParserRuleContext {
    privilege(): PrivilegeContext[];
    privilege(i: number): PrivilegeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PrivilegeContext extends ParserRuleContext {
    SELECT(): TerminalNode | undefined;
    opt_column_list(): Opt_column_listContext | undefined;
    REFERENCES(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    colid(): ColidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Privilege_targetContext extends ParserRuleContext {
    qualified_name_list(): Qualified_name_listContext | undefined;
    TABLE(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    DATA_P(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    name_list(): Name_listContext | undefined;
    SERVER(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes_list(): Function_with_argtypes_listContext | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    DOMAIN_P(): TerminalNode | undefined;
    any_name_list(): Any_name_listContext | undefined;
    LANGUAGE(): TerminalNode | undefined;
    LARGE_P(): TerminalNode | undefined;
    OBJECT_P(): TerminalNode | undefined;
    numericonly_list(): Numericonly_listContext | undefined;
    SCHEMA(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    IN_P(): TerminalNode | undefined;
    SEQUENCES(): TerminalNode | undefined;
    FUNCTIONS(): TerminalNode | undefined;
    PROCEDURES(): TerminalNode | undefined;
    ROUTINES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Grantee_listContext extends ParserRuleContext {
    grantee(): GranteeContext[];
    grantee(i: number): GranteeContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class GranteeContext extends ParserRuleContext {
    rolespec(): RolespecContext;
    GROUP_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_grant_grant_optionContext extends ParserRuleContext {
    WITH(): TerminalNode;
    GRANT(): TerminalNode;
    OPTION(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class GrantrolestmtContext extends ParserRuleContext {
    GRANT(): TerminalNode;
    privilege_list(): Privilege_listContext;
    TO(): TerminalNode;
    role_list(): Role_listContext;
    opt_grant_admin_option(): Opt_grant_admin_optionContext | undefined;
    opt_granted_by(): Opt_granted_byContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RevokerolestmtContext extends ParserRuleContext {
    REVOKE(): TerminalNode;
    privilege_list(): Privilege_listContext;
    FROM(): TerminalNode;
    role_list(): Role_listContext;
    opt_granted_by(): Opt_granted_byContext | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    ADMIN(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_grant_admin_optionContext extends ParserRuleContext {
    WITH(): TerminalNode;
    ADMIN(): TerminalNode;
    OPTION(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_granted_byContext extends ParserRuleContext {
    GRANTED(): TerminalNode;
    BY(): TerminalNode;
    rolespec(): RolespecContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterdefaultprivilegesstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    DEFAULT(): TerminalNode;
    PRIVILEGES(): TerminalNode;
    defacloptionlist(): DefacloptionlistContext;
    defaclaction(): DefaclactionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DefacloptionlistContext extends ParserRuleContext {
    defacloption(): DefacloptionContext[];
    defacloption(i: number): DefacloptionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DefacloptionContext extends ParserRuleContext {
    IN_P(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    name_list(): Name_listContext | undefined;
    FOR(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    role_list(): Role_listContext | undefined;
    USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DefaclactionContext extends ParserRuleContext {
    GRANT(): TerminalNode | undefined;
    privileges(): PrivilegesContext;
    ON(): TerminalNode;
    defacl_privilege_target(): Defacl_privilege_targetContext;
    TO(): TerminalNode | undefined;
    grantee_list(): Grantee_listContext;
    opt_grant_grant_option(): Opt_grant_grant_optionContext | undefined;
    REVOKE(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    OPTION(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Defacl_privilege_targetContext extends ParserRuleContext {
    TABLES(): TerminalNode | undefined;
    FUNCTIONS(): TerminalNode | undefined;
    ROUTINES(): TerminalNode | undefined;
    SEQUENCES(): TerminalNode | undefined;
    TYPES_P(): TerminalNode | undefined;
    SCHEMAS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class IndexstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    INDEX(): TerminalNode;
    ON(): TerminalNode;
    relation_expr(): Relation_exprContext;
    OPEN_PAREN(): TerminalNode;
    index_params(): Index_paramsContext;
    CLOSE_PAREN(): TerminalNode;
    opt_unique(): Opt_uniqueContext | undefined;
    opt_concurrently(): Opt_concurrentlyContext | undefined;
    opt_index_name(): Opt_index_nameContext | undefined;
    access_method_clause(): Access_method_clauseContext | undefined;
    opt_include(): Opt_includeContext | undefined;
    opt_reloptions(): Opt_reloptionsContext | undefined;
    opttablespace(): OpttablespaceContext | undefined;
    where_clause(): Where_clauseContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    name(): NameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_uniqueContext extends ParserRuleContext {
    UNIQUE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_concurrentlyContext extends ParserRuleContext {
    CONCURRENTLY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_index_nameContext extends ParserRuleContext {
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Access_method_clauseContext extends ParserRuleContext {
    USING(): TerminalNode;
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Index_paramsContext extends ParserRuleContext {
    index_elem(): Index_elemContext[];
    index_elem(i: number): Index_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Index_elem_optionsContext extends ParserRuleContext {
    opt_collate(): Opt_collateContext | undefined;
    opt_class(): Opt_classContext | undefined;
    opt_asc_desc(): Opt_asc_descContext | undefined;
    opt_nulls_order(): Opt_nulls_orderContext | undefined;
    any_name(): Any_nameContext | undefined;
    reloptions(): ReloptionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Index_elemContext extends ParserRuleContext {
    colid(): ColidContext | undefined;
    index_elem_options(): Index_elem_optionsContext;
    func_expr_windowless(): Func_expr_windowlessContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_includeContext extends ParserRuleContext {
    INCLUDE(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    index_including_params(): Index_including_paramsContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Index_including_paramsContext extends ParserRuleContext {
    index_elem(): Index_elemContext[];
    index_elem(i: number): Index_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_collateContext extends ParserRuleContext {
    COLLATE(): TerminalNode;
    any_name(): Any_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_classContext extends ParserRuleContext {
    any_name(): Any_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_asc_descContext extends ParserRuleContext {
    ASC(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_nulls_orderContext extends ParserRuleContext {
    NULLS_P(): TerminalNode;
    FIRST_P(): TerminalNode | undefined;
    LAST_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatefunctionstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    func_name(): Func_nameContext;
    func_args_with_defaults(): Func_args_with_defaultsContext;
    createfunc_opt_list(): Createfunc_opt_listContext;
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    opt_or_replace(): Opt_or_replaceContext | undefined;
    RETURNS(): TerminalNode | undefined;
    func_return(): Func_returnContext | undefined;
    TABLE(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    table_func_column_list(): Table_func_column_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_or_replaceContext extends ParserRuleContext {
    OR(): TerminalNode;
    REPLACE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_argsContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    func_args_list(): Func_args_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_args_listContext extends ParserRuleContext {
    func_arg(): Func_argContext[];
    func_arg(i: number): Func_argContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Function_with_argtypes_listContext extends ParserRuleContext {
    function_with_argtypes(): Function_with_argtypesContext[];
    function_with_argtypes(i: number): Function_with_argtypesContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Function_with_argtypesContext extends ParserRuleContext {
    func_name(): Func_nameContext | undefined;
    func_args(): Func_argsContext | undefined;
    type_func_name_keyword(): Type_func_name_keywordContext | undefined;
    colid(): ColidContext | undefined;
    indirection(): IndirectionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_args_with_defaultsContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    func_args_with_defaults_list(): Func_args_with_defaults_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_args_with_defaults_listContext extends ParserRuleContext {
    func_arg_with_default(): Func_arg_with_defaultContext[];
    func_arg_with_default(i: number): Func_arg_with_defaultContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_argContext extends ParserRuleContext {
    arg_class(): Arg_classContext | undefined;
    func_type(): Func_typeContext;
    param_name(): Param_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Arg_classContext extends ParserRuleContext {
    IN_P(): TerminalNode | undefined;
    OUT_P(): TerminalNode | undefined;
    INOUT(): TerminalNode | undefined;
    VARIADIC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Param_nameContext extends ParserRuleContext {
    type_function_name(): Type_function_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_returnContext extends ParserRuleContext {
    func_type(): Func_typeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_typeContext extends ParserRuleContext {
    typename(): TypenameContext | undefined;
    type_function_name(): Type_function_nameContext | undefined;
    attrs(): AttrsContext | undefined;
    PERCENT(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    SETOF(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_arg_with_defaultContext extends ParserRuleContext {
    func_arg(): Func_argContext;
    a_expr(): A_exprContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Aggr_argContext extends ParserRuleContext {
    func_arg(): Func_argContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Aggr_argsContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    STAR(): TerminalNode | undefined;
    aggr_args_list(): Aggr_args_listContext[];
    aggr_args_list(i: number): Aggr_args_listContext;
    ORDER(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Aggr_args_listContext extends ParserRuleContext {
    aggr_arg(): Aggr_argContext[];
    aggr_arg(i: number): Aggr_argContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Aggregate_with_argtypesContext extends ParserRuleContext {
    func_name(): Func_nameContext;
    aggr_args(): Aggr_argsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Aggregate_with_argtypes_listContext extends ParserRuleContext {
    aggregate_with_argtypes(): Aggregate_with_argtypesContext[];
    aggregate_with_argtypes(i: number): Aggregate_with_argtypesContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Createfunc_opt_listContext extends ParserRuleContext {
    createfunc_opt_item(): Createfunc_opt_itemContext[];
    createfunc_opt_item(i: number): Createfunc_opt_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Common_func_opt_itemContext extends ParserRuleContext {
    CALLED(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    NULL_P(): TerminalNode[];
    NULL_P(i: number): TerminalNode;
    INPUT_P(): TerminalNode | undefined;
    RETURNS(): TerminalNode | undefined;
    STRICT_P(): TerminalNode | undefined;
    IMMUTABLE(): TerminalNode | undefined;
    STABLE(): TerminalNode | undefined;
    VOLATILE(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    SECURITY(): TerminalNode | undefined;
    DEFINER(): TerminalNode | undefined;
    INVOKER(): TerminalNode | undefined;
    LEAKPROOF(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    COST(): TerminalNode | undefined;
    numericonly(): NumericonlyContext | undefined;
    ROWS(): TerminalNode | undefined;
    SUPPORT(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    functionsetresetclause(): FunctionsetresetclauseContext | undefined;
    PARALLEL(): TerminalNode | undefined;
    colid(): ColidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Createfunc_opt_itemContext extends ParserRuleContext {
    AS(): TerminalNode | undefined;
    func_as(): Func_asContext | undefined;
    LANGUAGE(): TerminalNode | undefined;
    nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined;
    TRANSFORM(): TerminalNode | undefined;
    transform_type_list(): Transform_type_listContext | undefined;
    WINDOW(): TerminalNode | undefined;
    common_func_opt_item(): Common_func_opt_itemContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_asContext extends ParserRuleContext {
    Definition: ParserRuleContext;
    _def: SconstContext;
    sconst(): SconstContext[];
    sconst(i: number): SconstContext;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Transform_type_listContext extends ParserRuleContext {
    FOR(): TerminalNode[];
    FOR(i: number): TerminalNode;
    TYPE_P(): TerminalNode[];
    TYPE_P(i: number): TerminalNode;
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_definitionContext extends ParserRuleContext {
    WITH(): TerminalNode;
    definition(): DefinitionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Table_func_columnContext extends ParserRuleContext {
    param_name(): Param_nameContext;
    func_type(): Func_typeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Table_func_column_listContext extends ParserRuleContext {
    table_func_column(): Table_func_columnContext[];
    table_func_column(i: number): Table_func_columnContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterfunctionstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    function_with_argtypes(): Function_with_argtypesContext;
    alterfunc_opt_list(): Alterfunc_opt_listContext;
    FUNCTION(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    opt_restrict(): Opt_restrictContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alterfunc_opt_listContext extends ParserRuleContext {
    common_func_opt_item(): Common_func_opt_itemContext[];
    common_func_opt_item(i: number): Common_func_opt_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_restrictContext extends ParserRuleContext {
    RESTRICT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RemovefuncstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes_list(): Function_with_argtypes_listContext;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RemoveaggrstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    AGGREGATE(): TerminalNode;
    aggregate_with_argtypes_list(): Aggregate_with_argtypes_listContext;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RemoveoperstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    OPERATOR(): TerminalNode;
    operator_with_argtypes_list(): Operator_with_argtypes_listContext;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Oper_argtypesContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    CLOSE_PAREN(): TerminalNode;
    COMMA(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Any_operatorContext extends ParserRuleContext {
    all_op(): All_opContext;
    colid(): ColidContext[];
    colid(i: number): ColidContext;
    DOT(): TerminalNode[];
    DOT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Operator_with_argtypes_listContext extends ParserRuleContext {
    operator_with_argtypes(): Operator_with_argtypesContext[];
    operator_with_argtypes(i: number): Operator_with_argtypesContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Operator_with_argtypesContext extends ParserRuleContext {
    any_operator(): Any_operatorContext;
    oper_argtypes(): Oper_argtypesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DostmtContext extends ParserRuleContext {
    DO(): TerminalNode;
    dostmt_opt_list(): Dostmt_opt_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Dostmt_opt_listContext extends ParserRuleContext {
    dostmt_opt_item(): Dostmt_opt_itemContext[];
    dostmt_opt_item(i: number): Dostmt_opt_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Dostmt_opt_itemContext extends ParserRuleContext {
    sconst(): SconstContext | undefined;
    LANGUAGE(): TerminalNode | undefined;
    nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatecaststmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    CAST(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    AS(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    WITH(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    cast_context(): Cast_contextContext | undefined;
    WITHOUT(): TerminalNode | undefined;
    INOUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Cast_contextContext extends ParserRuleContext {
    AS(): TerminalNode;
    IMPLICIT_P(): TerminalNode | undefined;
    ASSIGNMENT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DropcaststmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    CAST(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    AS(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    opt_if_exists(): Opt_if_existsContext | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_if_existsContext extends ParserRuleContext {
    IF_P(): TerminalNode;
    EXISTS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatetransformstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    TRANSFORM(): TerminalNode;
    FOR(): TerminalNode;
    typename(): TypenameContext;
    LANGUAGE(): TerminalNode;
    name(): NameContext;
    OPEN_PAREN(): TerminalNode;
    transform_element_list(): Transform_element_listContext;
    CLOSE_PAREN(): TerminalNode;
    opt_or_replace(): Opt_or_replaceContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Transform_element_listContext extends ParserRuleContext {
    FROM(): TerminalNode | undefined;
    SQL_P(): TerminalNode[];
    SQL_P(i: number): TerminalNode;
    WITH(): TerminalNode[];
    WITH(i: number): TerminalNode;
    FUNCTION(): TerminalNode[];
    FUNCTION(i: number): TerminalNode;
    function_with_argtypes(): Function_with_argtypesContext[];
    function_with_argtypes(i: number): Function_with_argtypesContext;
    COMMA(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DroptransformstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    TRANSFORM(): TerminalNode;
    FOR(): TerminalNode;
    typename(): TypenameContext;
    LANGUAGE(): TerminalNode;
    name(): NameContext;
    opt_if_exists(): Opt_if_existsContext | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ReindexstmtContext extends ParserRuleContext {
    REINDEX(): TerminalNode;
    reindex_target_type(): Reindex_target_typeContext | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    opt_concurrently(): Opt_concurrentlyContext | undefined;
    reindex_target_multitable(): Reindex_target_multitableContext | undefined;
    name(): NameContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    reindex_option_list(): Reindex_option_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Reindex_target_typeContext extends ParserRuleContext {
    INDEX(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Reindex_target_multitableContext extends ParserRuleContext {
    SCHEMA(): TerminalNode | undefined;
    SYSTEM_P(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Reindex_option_listContext extends ParserRuleContext {
    reindex_option_elem(): Reindex_option_elemContext[];
    reindex_option_elem(i: number): Reindex_option_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Reindex_option_elemContext extends ParserRuleContext {
    VERBOSE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltertblspcstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TABLESPACE(): TerminalNode;
    name(): NameContext;
    SET(): TerminalNode | undefined;
    reloptions(): ReloptionsContext;
    RESET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RenamestmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    AGGREGATE(): TerminalNode | undefined;
    aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined;
    RENAME(): TerminalNode;
    TO(): TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext;
    COLLATION(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    CONVERSION_P(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    DOMAIN_P(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    DATA_P(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    GROUP_P(): TerminalNode | undefined;
    roleid(): RoleidContext[];
    roleid(i: number): RoleidContext;
    LANGUAGE(): TerminalNode | undefined;
    opt_procedural(): Opt_proceduralContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    POLICY(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    relation_expr(): Relation_exprContext | undefined;
    SEQUENCE(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    opt_column(): Opt_columnContext | undefined;
    RULE(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    TEXT_P(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    ATTRIBUTE(): TerminalNode | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_columnContext extends ParserRuleContext {
    COLUMN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_set_dataContext extends ParserRuleContext {
    SET(): TerminalNode;
    DATA_P(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterobjectdependsstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    DEPENDS(): TerminalNode;
    ON(): TerminalNode[];
    ON(i: number): TerminalNode;
    EXTENSION(): TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext;
    opt_no(): Opt_noContext | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_noContext extends ParserRuleContext {
    NO(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterobjectschemastmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    AGGREGATE(): TerminalNode | undefined;
    aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined;
    SET(): TerminalNode;
    SCHEMA(): TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext;
    COLLATION(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    CONVERSION_P(): TerminalNode | undefined;
    DOMAIN_P(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    operator_with_argtypes(): Operator_with_argtypesContext | undefined;
    CLASS(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    relation_expr(): Relation_exprContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    TEXT_P(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    VIEW(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlteroperatorstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    OPERATOR(): TerminalNode;
    operator_with_argtypes(): Operator_with_argtypesContext;
    SET(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    operator_def_list(): Operator_def_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Operator_def_listContext extends ParserRuleContext {
    operator_def_elem(): Operator_def_elemContext[];
    operator_def_elem(i: number): Operator_def_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Operator_def_elemContext extends ParserRuleContext {
    collabel(): CollabelContext;
    EQUAL(): TerminalNode;
    NONE(): TerminalNode | undefined;
    operator_def_arg(): Operator_def_argContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Operator_def_argContext extends ParserRuleContext {
    func_type(): Func_typeContext | undefined;
    reserved_keyword(): Reserved_keywordContext | undefined;
    qual_all_op(): Qual_all_opContext | undefined;
    numericonly(): NumericonlyContext | undefined;
    sconst(): SconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltertypestmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TYPE_P(): TerminalNode;
    any_name(): Any_nameContext;
    SET(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    operator_def_list(): Operator_def_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterownerstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    AGGREGATE(): TerminalNode | undefined;
    aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined;
    OWNER(): TerminalNode;
    TO(): TerminalNode;
    rolespec(): RolespecContext;
    COLLATION(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    CONVERSION_P(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    name(): NameContext | undefined;
    DOMAIN_P(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    function_with_argtypes(): Function_with_argtypesContext | undefined;
    LANGUAGE(): TerminalNode | undefined;
    opt_procedural(): Opt_proceduralContext | undefined;
    LARGE_P(): TerminalNode | undefined;
    OBJECT_P(): TerminalNode | undefined;
    numericonly(): NumericonlyContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    operator_with_argtypes(): Operator_with_argtypesContext | undefined;
    CLASS(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    TEXT_P(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    DATA_P(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatepublicationstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    PUBLICATION(): TerminalNode;
    name(): NameContext;
    opt_publication_for_tables(): Opt_publication_for_tablesContext | undefined;
    opt_definition(): Opt_definitionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_publication_for_tablesContext extends ParserRuleContext {
    publication_for_tables(): Publication_for_tablesContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Publication_for_tablesContext extends ParserRuleContext {
    FOR(): TerminalNode;
    TABLE(): TerminalNode | undefined;
    relation_expr_list(): Relation_expr_listContext | undefined;
    ALL(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterpublicationstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    PUBLICATION(): TerminalNode;
    name(): NameContext;
    SET(): TerminalNode | undefined;
    definition(): DefinitionContext | undefined;
    ADD_P(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    relation_expr_list(): Relation_expr_listContext | undefined;
    DROP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatesubscriptionstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    SUBSCRIPTION(): TerminalNode;
    name(): NameContext;
    CONNECTION(): TerminalNode;
    sconst(): SconstContext;
    PUBLICATION(): TerminalNode;
    publication_name_list(): Publication_name_listContext;
    opt_definition(): Opt_definitionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Publication_name_listContext extends ParserRuleContext {
    publication_name_item(): Publication_name_itemContext[];
    publication_name_item(i: number): Publication_name_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Publication_name_itemContext extends ParserRuleContext {
    collabel(): CollabelContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltersubscriptionstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    SUBSCRIPTION(): TerminalNode;
    name(): NameContext;
    SET(): TerminalNode | undefined;
    definition(): DefinitionContext | undefined;
    CONNECTION(): TerminalNode | undefined;
    sconst(): SconstContext | undefined;
    REFRESH(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    opt_definition(): Opt_definitionContext | undefined;
    publication_name_list(): Publication_name_listContext | undefined;
    ENABLE_P(): TerminalNode | undefined;
    DISABLE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DropsubscriptionstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    SUBSCRIPTION(): TerminalNode;
    name(): NameContext;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RulestmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    RULE(): TerminalNode;
    name(): NameContext;
    AS(): TerminalNode;
    ON(): TerminalNode;
    event(): EventContext;
    TO(): TerminalNode;
    qualified_name(): Qualified_nameContext;
    DO(): TerminalNode;
    ruleactionlist(): RuleactionlistContext;
    opt_or_replace(): Opt_or_replaceContext | undefined;
    where_clause(): Where_clauseContext | undefined;
    opt_instead(): Opt_insteadContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RuleactionlistContext extends ParserRuleContext {
    NOTHING(): TerminalNode | undefined;
    ruleactionstmt(): RuleactionstmtContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    ruleactionmulti(): RuleactionmultiContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RuleactionmultiContext extends ParserRuleContext {
    ruleactionstmtOrEmpty(): RuleactionstmtOrEmptyContext[];
    ruleactionstmtOrEmpty(i: number): RuleactionstmtOrEmptyContext;
    SEMI(): TerminalNode[];
    SEMI(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RuleactionstmtContext extends ParserRuleContext {
    selectstmt(): SelectstmtContext | undefined;
    insertstmt(): InsertstmtContext | undefined;
    updatestmt(): UpdatestmtContext | undefined;
    deletestmt(): DeletestmtContext | undefined;
    notifystmt(): NotifystmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RuleactionstmtOrEmptyContext extends ParserRuleContext {
    ruleactionstmt(): RuleactionstmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class EventContext extends ParserRuleContext {
    SELECT(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    DELETE_P(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_insteadContext extends ParserRuleContext {
    INSTEAD(): TerminalNode | undefined;
    ALSO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class NotifystmtContext extends ParserRuleContext {
    NOTIFY(): TerminalNode;
    colid(): ColidContext;
    notify_payload(): Notify_payloadContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Notify_payloadContext extends ParserRuleContext {
    COMMA(): TerminalNode;
    sconst(): SconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ListenstmtContext extends ParserRuleContext {
    LISTEN(): TerminalNode;
    colid(): ColidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class UnlistenstmtContext extends ParserRuleContext {
    UNLISTEN(): TerminalNode;
    colid(): ColidContext | undefined;
    STAR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TransactionstmtContext extends ParserRuleContext {
    ABORT_P(): TerminalNode | undefined;
    opt_transaction(): Opt_transactionContext | undefined;
    opt_transaction_chain(): Opt_transaction_chainContext | undefined;
    BEGIN_P(): TerminalNode | undefined;
    transaction_mode_list_or_empty(): Transaction_mode_list_or_emptyContext | undefined;
    START(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    END_P(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    SAVEPOINT(): TerminalNode | undefined;
    colid(): ColidContext | undefined;
    RELEASE(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    PREPARE(): TerminalNode | undefined;
    sconst(): SconstContext | undefined;
    PREPARED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_transactionContext extends ParserRuleContext {
    WORK(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Transaction_mode_itemContext extends ParserRuleContext {
    ISOLATION(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    iso_level(): Iso_levelContext | undefined;
    READ(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    DEFERRABLE(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Transaction_mode_listContext extends ParserRuleContext {
    transaction_mode_item(): Transaction_mode_itemContext[];
    transaction_mode_item(i: number): Transaction_mode_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
    transaction_mode_list(): Transaction_mode_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_transaction_chainContext extends ParserRuleContext {
    AND(): TerminalNode;
    CHAIN(): TerminalNode;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ViewstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    AS(): TerminalNode;
    selectstmt(): SelectstmtContext;
    VIEW(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    RECURSIVE(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    columnlist(): ColumnlistContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    opttemp(): OpttempContext | undefined;
    opt_check_option(): Opt_check_optionContext | undefined;
    opt_column_list(): Opt_column_listContext | undefined;
    opt_reloptions(): Opt_reloptionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_check_optionContext extends ParserRuleContext {
    WITH(): TerminalNode;
    CHECK(): TerminalNode;
    OPTION(): TerminalNode;
    CASCADED(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class LoadstmtContext extends ParserRuleContext {
    LOAD(): TerminalNode;
    file_name(): File_nameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatedbstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    DATABASE(): TerminalNode;
    name(): NameContext;
    opt_with(): Opt_withContext | undefined;
    createdb_opt_list(): Createdb_opt_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Createdb_opt_listContext extends ParserRuleContext {
    createdb_opt_items(): Createdb_opt_itemsContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Createdb_opt_itemsContext extends ParserRuleContext {
    createdb_opt_item(): Createdb_opt_itemContext[];
    createdb_opt_item(i: number): Createdb_opt_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Createdb_opt_itemContext extends ParserRuleContext {
    createdb_opt_name(): Createdb_opt_nameContext;
    signediconst(): SignediconstContext | undefined;
    opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    opt_equal(): Opt_equalContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Createdb_opt_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    CONNECTION(): TerminalNode | undefined;
    LIMIT(): TerminalNode | undefined;
    ENCODING(): TerminalNode | undefined;
    LOCATION(): TerminalNode | undefined;
    OWNER(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_equalContext extends ParserRuleContext {
    EQUAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterdatabasestmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    DATABASE(): TerminalNode;
    name(): NameContext[];
    name(i: number): NameContext;
    WITH(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    createdb_opt_list(): Createdb_opt_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterdatabasesetstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    DATABASE(): TerminalNode;
    name(): NameContext;
    setresetclause(): SetresetclauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DropdbstmtContext extends ParserRuleContext {
    DROP(): TerminalNode;
    DATABASE(): TerminalNode;
    name(): NameContext;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    drop_option_list(): Drop_option_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    opt_with(): Opt_withContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Drop_option_listContext extends ParserRuleContext {
    drop_option(): Drop_optionContext[];
    drop_option(i: number): Drop_optionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Drop_optionContext extends ParserRuleContext {
    FORCE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltercollationstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    COLLATION(): TerminalNode;
    any_name(): Any_nameContext;
    REFRESH(): TerminalNode;
    VERSION_P(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltersystemstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    SYSTEM_P(): TerminalNode;
    generic_set(): Generic_setContext;
    SET(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreatedomainstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    DOMAIN_P(): TerminalNode;
    any_name(): Any_nameContext;
    typename(): TypenameContext;
    colquallist(): ColquallistContext;
    opt_as(): Opt_asContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AlterdomainstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    DOMAIN_P(): TerminalNode;
    any_name(): Any_nameContext;
    alter_column_default(): Alter_column_defaultContext | undefined;
    DROP(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    ADD_P(): TerminalNode | undefined;
    tableconstraint(): TableconstraintContext | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    name(): NameContext | undefined;
    VALIDATE(): TerminalNode | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    opt_drop_behavior(): Opt_drop_behaviorContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_asContext extends ParserRuleContext {
    AS(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltertsdictionarystmtContext extends ParserRuleContext {
    ALTER(): TerminalNode;
    TEXT_P(): TerminalNode;
    SEARCH(): TerminalNode;
    DICTIONARY(): TerminalNode;
    any_name(): Any_nameContext;
    definition(): DefinitionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AltertsconfigurationstmtContext extends ParserRuleContext {
    ALTER(): TerminalNode[];
    ALTER(i: number): TerminalNode;
    TEXT_P(): TerminalNode;
    SEARCH(): TerminalNode;
    CONFIGURATION(): TerminalNode;
    any_name(): Any_nameContext[];
    any_name(i: number): Any_nameContext;
    ADD_P(): TerminalNode | undefined;
    MAPPING(): TerminalNode;
    FOR(): TerminalNode | undefined;
    name_list(): Name_listContext | undefined;
    any_with(): Any_withContext | undefined;
    any_name_list(): Any_name_listContext | undefined;
    REPLACE(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    IF_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Any_withContext extends ParserRuleContext {
    WITH(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CreateconversionstmtContext extends ParserRuleContext {
    CREATE(): TerminalNode;
    CONVERSION_P(): TerminalNode;
    any_name(): Any_nameContext[];
    any_name(i: number): Any_nameContext;
    FOR(): TerminalNode;
    sconst(): SconstContext[];
    sconst(i: number): SconstContext;
    TO(): TerminalNode;
    FROM(): TerminalNode;
    opt_default(): Opt_defaultContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ClusterstmtContext extends ParserRuleContext {
    CLUSTER(): TerminalNode;
    qualified_name(): Qualified_nameContext | undefined;
    opt_verbose(): Opt_verboseContext | undefined;
    cluster_index_specification(): Cluster_index_specificationContext | undefined;
    name(): NameContext | undefined;
    ON(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Cluster_index_specificationContext extends ParserRuleContext {
    USING(): TerminalNode;
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class VacuumstmtContext extends ParserRuleContext {
    VACUUM(): TerminalNode;
    opt_full(): Opt_fullContext | undefined;
    opt_freeze(): Opt_freezeContext | undefined;
    opt_verbose(): Opt_verboseContext | undefined;
    opt_analyze(): Opt_analyzeContext | undefined;
    opt_vacuum_relation_list(): Opt_vacuum_relation_listContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    vac_analyze_option_list(): Vac_analyze_option_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AnalyzestmtContext extends ParserRuleContext {
    analyze_keyword(): Analyze_keywordContext;
    opt_verbose(): Opt_verboseContext | undefined;
    opt_vacuum_relation_list(): Opt_vacuum_relation_listContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    vac_analyze_option_list(): Vac_analyze_option_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Vac_analyze_option_listContext extends ParserRuleContext {
    vac_analyze_option_elem(): Vac_analyze_option_elemContext[];
    vac_analyze_option_elem(i: number): Vac_analyze_option_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Analyze_keywordContext extends ParserRuleContext {
    ANALYZE(): TerminalNode | undefined;
    ANALYSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Vac_analyze_option_elemContext extends ParserRuleContext {
    vac_analyze_option_name(): Vac_analyze_option_nameContext;
    vac_analyze_option_arg(): Vac_analyze_option_argContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Vac_analyze_option_nameContext extends ParserRuleContext {
    nonreservedword(): NonreservedwordContext | undefined;
    analyze_keyword(): Analyze_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Vac_analyze_option_argContext extends ParserRuleContext {
    opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined;
    numericonly(): NumericonlyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_analyzeContext extends ParserRuleContext {
    analyze_keyword(): Analyze_keywordContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_verboseContext extends ParserRuleContext {
    VERBOSE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_fullContext extends ParserRuleContext {
    FULL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_freezeContext extends ParserRuleContext {
    FREEZE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_name_listContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    name_list(): Name_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Vacuum_relationContext extends ParserRuleContext {
    qualified_name(): Qualified_nameContext;
    opt_name_list(): Opt_name_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Vacuum_relation_listContext extends ParserRuleContext {
    vacuum_relation(): Vacuum_relationContext[];
    vacuum_relation(i: number): Vacuum_relationContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_vacuum_relation_listContext extends ParserRuleContext {
    vacuum_relation_list(): Vacuum_relation_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ExplainstmtContext extends ParserRuleContext {
    EXPLAIN(): TerminalNode;
    explainablestmt(): ExplainablestmtContext;
    analyze_keyword(): Analyze_keywordContext | undefined;
    opt_verbose(): Opt_verboseContext | undefined;
    VERBOSE(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    explain_option_list(): Explain_option_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ExplainablestmtContext extends ParserRuleContext {
    selectstmt(): SelectstmtContext | undefined;
    insertstmt(): InsertstmtContext | undefined;
    updatestmt(): UpdatestmtContext | undefined;
    deletestmt(): DeletestmtContext | undefined;
    declarecursorstmt(): DeclarecursorstmtContext | undefined;
    createasstmt(): CreateasstmtContext | undefined;
    creatematviewstmt(): CreatematviewstmtContext | undefined;
    refreshmatviewstmt(): RefreshmatviewstmtContext | undefined;
    executestmt(): ExecutestmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Explain_option_listContext extends ParserRuleContext {
    explain_option_elem(): Explain_option_elemContext[];
    explain_option_elem(i: number): Explain_option_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Explain_option_elemContext extends ParserRuleContext {
    explain_option_name(): Explain_option_nameContext;
    explain_option_arg(): Explain_option_argContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Explain_option_nameContext extends ParserRuleContext {
    nonreservedword(): NonreservedwordContext | undefined;
    analyze_keyword(): Analyze_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Explain_option_argContext extends ParserRuleContext {
    opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined;
    numericonly(): NumericonlyContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PreparestmtContext extends ParserRuleContext {
    PREPARE(): TerminalNode;
    name(): NameContext;
    AS(): TerminalNode;
    preparablestmt(): PreparablestmtContext;
    prep_type_clause(): Prep_type_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Prep_type_clauseContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    type_list(): Type_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PreparablestmtContext extends ParserRuleContext {
    selectstmt(): SelectstmtContext | undefined;
    insertstmt(): InsertstmtContext | undefined;
    updatestmt(): UpdatestmtContext | undefined;
    deletestmt(): DeletestmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ExecutestmtContext extends ParserRuleContext {
    EXECUTE(): TerminalNode;
    name(): NameContext;
    execute_param_clause(): Execute_param_clauseContext | undefined;
    CREATE(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    create_as_target(): Create_as_targetContext | undefined;
    AS(): TerminalNode | undefined;
    opttemp(): OpttempContext | undefined;
    opt_with_data(): Opt_with_dataContext | undefined;
    IF_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Execute_param_clauseContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    expr_list(): Expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DeallocatestmtContext extends ParserRuleContext {
    DEALLOCATE(): TerminalNode;
    name(): NameContext | undefined;
    PREPARE(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class InsertstmtContext extends ParserRuleContext {
    INSERT(): TerminalNode;
    INTO(): TerminalNode;
    insert_target(): Insert_targetContext;
    insert_rest(): Insert_restContext;
    opt_with_clause(): Opt_with_clauseContext | undefined;
    opt_on_conflict(): Opt_on_conflictContext | undefined;
    returning_clause(): Returning_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Insert_targetContext extends ParserRuleContext {
    qualified_name(): Qualified_nameContext;
    AS(): TerminalNode | undefined;
    colid(): ColidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Insert_restContext extends ParserRuleContext {
    selectstmt(): SelectstmtContext | undefined;
    OVERRIDING(): TerminalNode | undefined;
    override_kind(): Override_kindContext | undefined;
    VALUE_P(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    insert_column_list(): Insert_column_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Override_kindContext extends ParserRuleContext {
    USER(): TerminalNode | undefined;
    SYSTEM_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Insert_column_listContext extends ParserRuleContext {
    insert_column_item(): Insert_column_itemContext[];
    insert_column_item(i: number): Insert_column_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Insert_column_itemContext extends ParserRuleContext {
    colid(): ColidContext;
    opt_indirection(): Opt_indirectionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_on_conflictContext extends ParserRuleContext {
    ON(): TerminalNode;
    CONFLICT(): TerminalNode;
    DO(): TerminalNode;
    UPDATE(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    set_clause_list(): Set_clause_listContext | undefined;
    NOTHING(): TerminalNode | undefined;
    opt_conf_expr(): Opt_conf_exprContext | undefined;
    where_clause(): Where_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_conf_exprContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode | undefined;
    index_params(): Index_paramsContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    where_clause(): Where_clauseContext | undefined;
    ON(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    name(): NameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Returning_clauseContext extends ParserRuleContext {
    RETURNING(): TerminalNode;
    target_list(): Target_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DeletestmtContext extends ParserRuleContext {
    DELETE_P(): TerminalNode;
    FROM(): TerminalNode;
    relation_expr_opt_alias(): Relation_expr_opt_aliasContext;
    opt_with_clause(): Opt_with_clauseContext | undefined;
    using_clause(): Using_clauseContext | undefined;
    where_or_current_clause(): Where_or_current_clauseContext | undefined;
    returning_clause(): Returning_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Using_clauseContext extends ParserRuleContext {
    USING(): TerminalNode;
    from_list(): From_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class LockstmtContext extends ParserRuleContext {
    LOCK_P(): TerminalNode;
    relation_expr_list(): Relation_expr_listContext;
    opt_table(): Opt_tableContext | undefined;
    opt_lock(): Opt_lockContext | undefined;
    opt_nowait(): Opt_nowaitContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_lockContext extends ParserRuleContext {
    IN_P(): TerminalNode;
    lock_type(): Lock_typeContext;
    MODE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Lock_typeContext extends ParserRuleContext {
    ACCESS(): TerminalNode | undefined;
    SHARE(): TerminalNode | undefined;
    EXCLUSIVE(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_nowaitContext extends ParserRuleContext {
    NOWAIT(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_nowait_or_skipContext extends ParserRuleContext {
    NOWAIT(): TerminalNode | undefined;
    SKIP_P(): TerminalNode | undefined;
    LOCKED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class UpdatestmtContext extends ParserRuleContext {
    UPDATE(): TerminalNode;
    relation_expr_opt_alias(): Relation_expr_opt_aliasContext;
    SET(): TerminalNode;
    set_clause_list(): Set_clause_listContext;
    opt_with_clause(): Opt_with_clauseContext | undefined;
    from_clause(): From_clauseContext | undefined;
    where_or_current_clause(): Where_or_current_clauseContext | undefined;
    returning_clause(): Returning_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Set_clause_listContext extends ParserRuleContext {
    set_clause(): Set_clauseContext[];
    set_clause(i: number): Set_clauseContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Set_clauseContext extends ParserRuleContext {
    set_target(): Set_targetContext | undefined;
    EQUAL(): TerminalNode;
    a_expr(): A_exprContext;
    OPEN_PAREN(): TerminalNode | undefined;
    set_target_list(): Set_target_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Set_targetContext extends ParserRuleContext {
    colid(): ColidContext;
    opt_indirection(): Opt_indirectionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Set_target_listContext extends ParserRuleContext {
    set_target(): Set_targetContext[];
    set_target(i: number): Set_targetContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class DeclarecursorstmtContext extends ParserRuleContext {
    DECLARE(): TerminalNode;
    cursor_name(): Cursor_nameContext;
    cursor_options(): Cursor_optionsContext;
    CURSOR(): TerminalNode;
    opt_hold(): Opt_holdContext;
    FOR(): TerminalNode;
    selectstmt(): SelectstmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Cursor_nameContext extends ParserRuleContext {
    name(): NameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Cursor_optionsContext extends ParserRuleContext {
    NO(): TerminalNode[];
    NO(i: number): TerminalNode;
    SCROLL(): TerminalNode[];
    SCROLL(i: number): TerminalNode;
    BINARY(): TerminalNode[];
    BINARY(i: number): TerminalNode;
    INSENSITIVE(): TerminalNode[];
    INSENSITIVE(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_holdContext extends ParserRuleContext {
    WITH(): TerminalNode | undefined;
    HOLD(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SelectstmtContext extends ParserRuleContext {
    select_no_parens(): Select_no_parensContext | undefined;
    select_with_parens(): Select_with_parensContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Select_with_parensContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    select_no_parens(): Select_no_parensContext | undefined;
    CLOSE_PAREN(): TerminalNode;
    select_with_parens(): Select_with_parensContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Select_no_parensContext extends ParserRuleContext {
    select_clause(): Select_clauseContext;
    opt_sort_clause(): Opt_sort_clauseContext | undefined;
    for_locking_clause(): For_locking_clauseContext | undefined;
    select_limit(): Select_limitContext | undefined;
    opt_select_limit(): Opt_select_limitContext | undefined;
    opt_for_locking_clause(): Opt_for_locking_clauseContext | undefined;
    with_clause(): With_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Select_clauseContext extends ParserRuleContext {
    simple_select(): Simple_selectContext | undefined;
    select_with_parens(): Select_with_parensContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Simple_selectContext extends ParserRuleContext {
    SELECT(): TerminalNode | undefined;
    values_clause(): Values_clauseContext | undefined;
    TABLE(): TerminalNode | undefined;
    relation_expr(): Relation_exprContext | undefined;
    select_with_parens(): Select_with_parensContext[];
    select_with_parens(i: number): Select_with_parensContext;
    set_operator_with_all_or_distinct(): Set_operator_with_all_or_distinctContext[];
    set_operator_with_all_or_distinct(i: number): Set_operator_with_all_or_distinctContext;
    distinct_clause(): Distinct_clauseContext | undefined;
    target_list(): Target_listContext | undefined;
    simple_select(): Simple_selectContext[];
    simple_select(i: number): Simple_selectContext;
    into_clause(): Into_clauseContext[];
    into_clause(i: number): Into_clauseContext;
    from_clause(): From_clauseContext | undefined;
    where_clause(): Where_clauseContext | undefined;
    group_clause(): Group_clauseContext | undefined;
    having_clause(): Having_clauseContext | undefined;
    window_clause(): Window_clauseContext | undefined;
    opt_all_clause(): Opt_all_clauseContext | undefined;
    opt_target_list(): Opt_target_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Set_operatorContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: Set_operatorContext): void;
}
export declare class UnionContext extends Set_operatorContext {
    UNION(): TerminalNode;
    constructor(ctx: Set_operatorContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class IntersectContext extends Set_operatorContext {
    INTERSECT(): TerminalNode;
    constructor(ctx: Set_operatorContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ExceptContext extends Set_operatorContext {
    EXCEPT(): TerminalNode;
    constructor(ctx: Set_operatorContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Set_operator_with_all_or_distinctContext extends ParserRuleContext {
    set_operator(): Set_operatorContext;
    all_or_distinct(): All_or_distinctContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class With_clauseContext extends ParserRuleContext {
    WITH(): TerminalNode;
    cte_list(): Cte_listContext;
    RECURSIVE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Cte_listContext extends ParserRuleContext {
    common_table_expr(): Common_table_exprContext[];
    common_table_expr(i: number): Common_table_exprContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Common_table_exprContext extends ParserRuleContext {
    name(): NameContext;
    AS(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    preparablestmt(): PreparablestmtContext;
    CLOSE_PAREN(): TerminalNode;
    opt_name_list(): Opt_name_listContext | undefined;
    opt_materialized(): Opt_materializedContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_materializedContext extends ParserRuleContext {
    MATERIALIZED(): TerminalNode;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_with_clauseContext extends ParserRuleContext {
    with_clause(): With_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Into_clauseContext extends ParserRuleContext {
    INTO(): TerminalNode;
    opt_strict(): Opt_strictContext | undefined;
    opttempTableName(): OpttempTableNameContext | undefined;
    into_target(): Into_targetContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_strictContext extends ParserRuleContext {
    STRICT_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OpttempTableNameContext extends ParserRuleContext {
    qualified_name(): Qualified_nameContext;
    TEMPORARY(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    opt_table(): Opt_tableContext | undefined;
    LOCAL(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    UNLOGGED(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_tableContext extends ParserRuleContext {
    TABLE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class All_or_distinctContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Distinct_clauseContext extends ParserRuleContext {
    DISTINCT(): TerminalNode;
    ON(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    expr_list(): Expr_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_all_clauseContext extends ParserRuleContext {
    ALL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_sort_clauseContext extends ParserRuleContext {
    sort_clause(): Sort_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Sort_clauseContext extends ParserRuleContext {
    ORDER(): TerminalNode;
    BY(): TerminalNode;
    sortby_list(): Sortby_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Sortby_listContext extends ParserRuleContext {
    sortby(): SortbyContext[];
    sortby(i: number): SortbyContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SortbyContext extends ParserRuleContext {
    a_expr(): A_exprContext;
    USING(): TerminalNode | undefined;
    qual_all_op(): Qual_all_opContext | undefined;
    opt_nulls_order(): Opt_nulls_orderContext | undefined;
    opt_asc_desc(): Opt_asc_descContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Select_limitContext extends ParserRuleContext {
    limit_clause(): Limit_clauseContext | undefined;
    offset_clause(): Offset_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_select_limitContext extends ParserRuleContext {
    select_limit(): Select_limitContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Limit_clauseContext extends ParserRuleContext {
    LIMIT(): TerminalNode | undefined;
    select_limit_value(): Select_limit_valueContext | undefined;
    COMMA(): TerminalNode | undefined;
    select_offset_value(): Select_offset_valueContext | undefined;
    FETCH(): TerminalNode | undefined;
    first_or_next(): First_or_nextContext | undefined;
    select_fetch_first_value(): Select_fetch_first_valueContext | undefined;
    row_or_rows(): Row_or_rowsContext | undefined;
    ONLY(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Offset_clauseContext extends ParserRuleContext {
    OFFSET(): TerminalNode;
    select_offset_value(): Select_offset_valueContext | undefined;
    select_fetch_first_value(): Select_fetch_first_valueContext | undefined;
    row_or_rows(): Row_or_rowsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Select_limit_valueContext extends ParserRuleContext {
    a_expr(): A_exprContext | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Select_offset_valueContext extends ParserRuleContext {
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Select_fetch_first_valueContext extends ParserRuleContext {
    c_expr(): C_exprContext | undefined;
    PLUS(): TerminalNode | undefined;
    i_or_f_const(): I_or_f_constContext | undefined;
    MINUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class I_or_f_constContext extends ParserRuleContext {
    iconst(): IconstContext | undefined;
    fconst(): FconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Row_or_rowsContext extends ParserRuleContext {
    ROW(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class First_or_nextContext extends ParserRuleContext {
    FIRST_P(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Group_clauseContext extends ParserRuleContext {
    GROUP_P(): TerminalNode;
    BY(): TerminalNode;
    group_by_list(): Group_by_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Group_by_listContext extends ParserRuleContext {
    group_by_item(): Group_by_itemContext[];
    group_by_item(i: number): Group_by_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Group_by_itemContext extends ParserRuleContext {
    a_expr(): A_exprContext | undefined;
    empty_grouping_set(): Empty_grouping_setContext | undefined;
    cube_clause(): Cube_clauseContext | undefined;
    rollup_clause(): Rollup_clauseContext | undefined;
    grouping_sets_clause(): Grouping_sets_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Empty_grouping_setContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Rollup_clauseContext extends ParserRuleContext {
    ROLLUP(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    expr_list(): Expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Cube_clauseContext extends ParserRuleContext {
    CUBE(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    expr_list(): Expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Grouping_sets_clauseContext extends ParserRuleContext {
    GROUPING(): TerminalNode;
    SETS(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    group_by_list(): Group_by_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Having_clauseContext extends ParserRuleContext {
    HAVING(): TerminalNode;
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class For_locking_clauseContext extends ParserRuleContext {
    for_locking_items(): For_locking_itemsContext | undefined;
    FOR(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_for_locking_clauseContext extends ParserRuleContext {
    for_locking_clause(): For_locking_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class For_locking_itemsContext extends ParserRuleContext {
    for_locking_item(): For_locking_itemContext[];
    for_locking_item(i: number): For_locking_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class For_locking_itemContext extends ParserRuleContext {
    for_locking_strength(): For_locking_strengthContext;
    locked_rels_list(): Locked_rels_listContext | undefined;
    opt_nowait_or_skip(): Opt_nowait_or_skipContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class For_locking_strengthContext extends ParserRuleContext {
    FOR(): TerminalNode;
    UPDATE(): TerminalNode | undefined;
    SHARE(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Locked_rels_listContext extends ParserRuleContext {
    OF(): TerminalNode;
    qualified_name_list(): Qualified_name_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Values_clauseContext extends ParserRuleContext {
    VALUES(): TerminalNode;
    OPEN_PAREN(): TerminalNode[];
    OPEN_PAREN(i: number): TerminalNode;
    expr_list(): Expr_listContext[];
    expr_list(i: number): Expr_listContext;
    CLOSE_PAREN(): TerminalNode[];
    CLOSE_PAREN(i: number): TerminalNode;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class From_clauseContext extends ParserRuleContext {
    FROM(): TerminalNode;
    from_list(): From_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class From_listContext extends ParserRuleContext {
    table_ref(): Table_refContext[];
    table_ref(i: number): Table_refContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Table_refContext extends ParserRuleContext {
    relation_expr(): Relation_exprContext | undefined;
    func_table(): Func_tableContext | undefined;
    xmltable(): XmltableContext | undefined;
    select_with_parens(): Select_with_parensContext | undefined;
    LATERAL_P(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    table_ref(): Table_refContext[];
    table_ref(i: number): Table_refContext;
    CLOSE_PAREN(): TerminalNode | undefined;
    CROSS(): TerminalNode[];
    CROSS(i: number): TerminalNode;
    JOIN(): TerminalNode[];
    JOIN(i: number): TerminalNode;
    NATURAL(): TerminalNode[];
    NATURAL(i: number): TerminalNode;
    join_qual(): Join_qualContext[];
    join_qual(i: number): Join_qualContext;
    opt_alias_clause(): Opt_alias_clauseContext | undefined;
    tablesample_clause(): Tablesample_clauseContext | undefined;
    func_alias_clause(): Func_alias_clauseContext | undefined;
    join_type(): Join_typeContext[];
    join_type(i: number): Join_typeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Alias_clauseContext extends ParserRuleContext {
    colid(): ColidContext;
    AS(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    name_list(): Name_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_alias_clauseContext extends ParserRuleContext {
    alias_clause(): Alias_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_alias_clauseContext extends ParserRuleContext {
    alias_clause(): Alias_clauseContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    tablefuncelementlist(): TablefuncelementlistContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    colid(): ColidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Join_typeContext extends ParserRuleContext {
    FULL(): TerminalNode | undefined;
    LEFT(): TerminalNode | undefined;
    RIGHT(): TerminalNode | undefined;
    INNER_P(): TerminalNode | undefined;
    OUTER_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Join_qualContext extends ParserRuleContext {
    USING(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    name_list(): Name_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Relation_exprContext extends ParserRuleContext {
    qualified_name(): Qualified_nameContext | undefined;
    STAR(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Relation_expr_listContext extends ParserRuleContext {
    relation_expr(): Relation_exprContext[];
    relation_expr(i: number): Relation_exprContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Relation_expr_opt_aliasContext extends ParserRuleContext {
    relation_expr(): Relation_exprContext;
    colid(): ColidContext | undefined;
    AS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Tablesample_clauseContext extends ParserRuleContext {
    TABLESAMPLE(): TerminalNode;
    func_name(): Func_nameContext;
    OPEN_PAREN(): TerminalNode;
    expr_list(): Expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    opt_repeatable_clause(): Opt_repeatable_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_repeatable_clauseContext extends ParserRuleContext {
    REPEATABLE(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    a_expr(): A_exprContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_tableContext extends ParserRuleContext {
    func_expr_windowless(): Func_expr_windowlessContext | undefined;
    opt_ordinality(): Opt_ordinalityContext | undefined;
    ROWS(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    rowsfrom_list(): Rowsfrom_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Rowsfrom_itemContext extends ParserRuleContext {
    func_expr_windowless(): Func_expr_windowlessContext;
    opt_col_def_list(): Opt_col_def_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Rowsfrom_listContext extends ParserRuleContext {
    rowsfrom_item(): Rowsfrom_itemContext[];
    rowsfrom_item(i: number): Rowsfrom_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_col_def_listContext extends ParserRuleContext {
    AS(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    tablefuncelementlist(): TablefuncelementlistContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_ordinalityContext extends ParserRuleContext {
    WITH(): TerminalNode;
    ORDINALITY(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Where_clauseContext extends ParserRuleContext {
    WHERE(): TerminalNode;
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Where_or_current_clauseContext extends ParserRuleContext {
    WHERE(): TerminalNode;
    CURRENT_P(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    cursor_name(): Cursor_nameContext | undefined;
    a_expr(): A_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class OpttablefuncelementlistContext extends ParserRuleContext {
    tablefuncelementlist(): TablefuncelementlistContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TablefuncelementlistContext extends ParserRuleContext {
    tablefuncelement(): TablefuncelementContext[];
    tablefuncelement(i: number): TablefuncelementContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TablefuncelementContext extends ParserRuleContext {
    colid(): ColidContext;
    typename(): TypenameContext;
    opt_collate_clause(): Opt_collate_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class XmltableContext extends ParserRuleContext {
    XMLTABLE(): TerminalNode;
    OPEN_PAREN(): TerminalNode[];
    OPEN_PAREN(i: number): TerminalNode;
    CLOSE_PAREN(): TerminalNode[];
    CLOSE_PAREN(i: number): TerminalNode;
    c_expr(): C_exprContext | undefined;
    xmlexists_argument(): Xmlexists_argumentContext | undefined;
    COLUMNS(): TerminalNode | undefined;
    xmltable_column_list(): Xmltable_column_listContext | undefined;
    XMLNAMESPACES(): TerminalNode | undefined;
    xml_namespace_list(): Xml_namespace_listContext | undefined;
    COMMA(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xmltable_column_listContext extends ParserRuleContext {
    xmltable_column_el(): Xmltable_column_elContext[];
    xmltable_column_el(i: number): Xmltable_column_elContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xmltable_column_elContext extends ParserRuleContext {
    colid(): ColidContext;
    typename(): TypenameContext | undefined;
    FOR(): TerminalNode | undefined;
    ORDINALITY(): TerminalNode | undefined;
    xmltable_column_option_list(): Xmltable_column_option_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xmltable_column_option_listContext extends ParserRuleContext {
    xmltable_column_option_el(): Xmltable_column_option_elContext[];
    xmltable_column_option_el(i: number): Xmltable_column_option_elContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xmltable_column_option_elContext extends ParserRuleContext {
    DEFAULT(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    identifier(): IdentifierContext | undefined;
    NOT(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xml_namespace_listContext extends ParserRuleContext {
    xml_namespace_el(): Xml_namespace_elContext[];
    xml_namespace_el(i: number): Xml_namespace_elContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xml_namespace_elContext extends ParserRuleContext {
    b_expr(): B_exprContext;
    AS(): TerminalNode | undefined;
    collabel(): CollabelContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class TypenameContext extends ParserRuleContext {
    simpletypename(): SimpletypenameContext | undefined;
    opt_array_bounds(): Opt_array_boundsContext | undefined;
    ARRAY(): TerminalNode | undefined;
    SETOF(): TerminalNode | undefined;
    OPEN_BRACKET(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    CLOSE_BRACKET(): TerminalNode | undefined;
    qualified_name(): Qualified_nameContext | undefined;
    PERCENT(): TerminalNode | undefined;
    ROWTYPE(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_array_boundsContext extends ParserRuleContext {
    OPEN_BRACKET(): TerminalNode[];
    OPEN_BRACKET(i: number): TerminalNode;
    CLOSE_BRACKET(): TerminalNode[];
    CLOSE_BRACKET(i: number): TerminalNode;
    iconst(): IconstContext[];
    iconst(i: number): IconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SimpletypenameContext extends ParserRuleContext {
    generictype(): GenerictypeContext | undefined;
    numeric(): NumericContext | undefined;
    bit(): BitContext | undefined;
    character(): CharacterContext | undefined;
    constdatetime(): ConstdatetimeContext | undefined;
    constinterval(): ConstintervalContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    opt_interval(): Opt_intervalContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConsttypenameContext extends ParserRuleContext {
    numeric(): NumericContext | undefined;
    constbit(): ConstbitContext | undefined;
    constcharacter(): ConstcharacterContext | undefined;
    constdatetime(): ConstdatetimeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class GenerictypeContext extends ParserRuleContext {
    type_function_name(): Type_function_nameContext;
    attrs(): AttrsContext | undefined;
    opt_type_modifiers(): Opt_type_modifiersContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_type_modifiersContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    expr_list(): Expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class NumericContext extends ParserRuleContext {
    INT_P(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    SMALLINT(): TerminalNode | undefined;
    BIGINT(): TerminalNode | undefined;
    REAL(): TerminalNode | undefined;
    FLOAT_P(): TerminalNode | undefined;
    opt_float(): Opt_floatContext | undefined;
    DOUBLE_P(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    DECIMAL_P(): TerminalNode | undefined;
    opt_type_modifiers(): Opt_type_modifiersContext | undefined;
    DEC(): TerminalNode | undefined;
    NUMERIC(): TerminalNode | undefined;
    BOOLEAN_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_floatContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    iconst(): IconstContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class BitContext extends ParserRuleContext {
    bitwithlength(): BitwithlengthContext | undefined;
    bitwithoutlength(): BitwithoutlengthContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstbitContext extends ParserRuleContext {
    bitwithlength(): BitwithlengthContext | undefined;
    bitwithoutlength(): BitwithoutlengthContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class BitwithlengthContext extends ParserRuleContext {
    BIT(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    expr_list(): Expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    opt_varying(): Opt_varyingContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class BitwithoutlengthContext extends ParserRuleContext {
    BIT(): TerminalNode;
    opt_varying(): Opt_varyingContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CharacterContext extends ParserRuleContext {
    character_c(): Character_cContext;
    OPEN_PAREN(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstcharacterContext extends ParserRuleContext {
    character_c(): Character_cContext;
    OPEN_PAREN(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Character_cContext extends ParserRuleContext {
    CHARACTER(): TerminalNode | undefined;
    CHAR_P(): TerminalNode | undefined;
    NCHAR(): TerminalNode | undefined;
    opt_varying(): Opt_varyingContext | undefined;
    VARCHAR(): TerminalNode | undefined;
    NATIONAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_varyingContext extends ParserRuleContext {
    VARYING(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstdatetimeContext extends ParserRuleContext {
    TIMESTAMP(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    opt_timezone(): Opt_timezoneContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ConstintervalContext extends ParserRuleContext {
    INTERVAL(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_timezoneContext extends ParserRuleContext {
    WITH(): TerminalNode | undefined;
    TIME(): TerminalNode;
    ZONE(): TerminalNode;
    WITHOUT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_intervalContext extends ParserRuleContext {
    YEAR_P(): TerminalNode | undefined;
    MONTH_P(): TerminalNode | undefined;
    DAY_P(): TerminalNode | undefined;
    HOUR_P(): TerminalNode | undefined;
    MINUTE_P(): TerminalNode | undefined;
    interval_second(): Interval_secondContext | undefined;
    TO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Interval_secondContext extends ParserRuleContext {
    SECOND_P(): TerminalNode;
    OPEN_PAREN(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_escapeContext extends ParserRuleContext {
    ESCAPE(): TerminalNode;
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_exprContext extends ParserRuleContext {
    a_expr_qual(): A_expr_qualContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_qualContext extends ParserRuleContext {
    a_expr_lessless(): A_expr_lesslessContext;
    qual_op(): Qual_opContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_lesslessContext extends ParserRuleContext {
    a_expr_or(): A_expr_orContext[];
    a_expr_or(i: number): A_expr_orContext;
    LESS_LESS(): TerminalNode[];
    LESS_LESS(i: number): TerminalNode;
    GREATER_GREATER(): TerminalNode[];
    GREATER_GREATER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_orContext extends ParserRuleContext {
    a_expr_and(): A_expr_andContext[];
    a_expr_and(i: number): A_expr_andContext;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_andContext extends ParserRuleContext {
    a_expr_in(): A_expr_inContext[];
    a_expr_in(i: number): A_expr_inContext;
    AND(): TerminalNode[];
    AND(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_inContext extends ParserRuleContext {
    a_expr_unary_not(): A_expr_unary_notContext;
    IN_P(): TerminalNode | undefined;
    in_expr(): In_exprContext | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_unary_notContext extends ParserRuleContext {
    a_expr_isnull(): A_expr_isnullContext;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_isnullContext extends ParserRuleContext {
    a_expr_is_not(): A_expr_is_notContext;
    ISNULL(): TerminalNode | undefined;
    NOTNULL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_is_notContext extends ParserRuleContext {
    a_expr_compare(): A_expr_compareContext;
    IS(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    TRUE_P(): TerminalNode | undefined;
    FALSE_P(): TerminalNode | undefined;
    UNKNOWN(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    OF(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    type_list(): Type_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    DOCUMENT_P(): TerminalNode | undefined;
    NORMALIZED(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    unicode_normal_form(): Unicode_normal_formContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_compareContext extends ParserRuleContext {
    a_expr_like(): A_expr_likeContext[];
    a_expr_like(i: number): A_expr_likeContext;
    subquery_Op(): Subquery_OpContext | undefined;
    sub_type(): Sub_typeContext | undefined;
    LT(): TerminalNode | undefined;
    GT(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    LESS_EQUALS(): TerminalNode | undefined;
    GREATER_EQUALS(): TerminalNode | undefined;
    NOT_EQUALS(): TerminalNode | undefined;
    select_with_parens(): Select_with_parensContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_likeContext extends ParserRuleContext {
    a_expr_qual_op(): A_expr_qual_opContext[];
    a_expr_qual_op(i: number): A_expr_qual_opContext;
    LIKE(): TerminalNode | undefined;
    ILIKE(): TerminalNode | undefined;
    SIMILAR(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    BETWEEN(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    opt_escape(): Opt_escapeContext | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_qual_opContext extends ParserRuleContext {
    a_expr_unary_qualop(): A_expr_unary_qualopContext[];
    a_expr_unary_qualop(i: number): A_expr_unary_qualopContext;
    qual_op(): Qual_opContext[];
    qual_op(i: number): Qual_opContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_unary_qualopContext extends ParserRuleContext {
    a_expr_add(): A_expr_addContext;
    qual_op(): Qual_opContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_addContext extends ParserRuleContext {
    a_expr_mul(): A_expr_mulContext[];
    a_expr_mul(i: number): A_expr_mulContext;
    MINUS(): TerminalNode[];
    MINUS(i: number): TerminalNode;
    PLUS(): TerminalNode[];
    PLUS(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_mulContext extends ParserRuleContext {
    a_expr_caret(): A_expr_caretContext[];
    a_expr_caret(i: number): A_expr_caretContext;
    STAR(): TerminalNode[];
    STAR(i: number): TerminalNode;
    SLASH(): TerminalNode[];
    SLASH(i: number): TerminalNode;
    PERCENT(): TerminalNode[];
    PERCENT(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_caretContext extends ParserRuleContext {
    a_expr_unary_sign(): A_expr_unary_signContext;
    CARET(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_unary_signContext extends ParserRuleContext {
    a_expr_at_time_zone(): A_expr_at_time_zoneContext;
    MINUS(): TerminalNode | undefined;
    PLUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_at_time_zoneContext extends ParserRuleContext {
    a_expr_collate(): A_expr_collateContext;
    AT(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_collateContext extends ParserRuleContext {
    a_expr_typecast(): A_expr_typecastContext;
    COLLATE(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class A_expr_typecastContext extends ParserRuleContext {
    c_expr(): C_exprContext;
    TYPECAST(): TerminalNode[];
    TYPECAST(i: number): TerminalNode;
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class B_exprContext extends ParserRuleContext {
    c_expr(): C_exprContext | undefined;
    b_expr(): B_exprContext[];
    b_expr(i: number): B_exprContext;
    TYPECAST(): TerminalNode | undefined;
    typename(): TypenameContext | undefined;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    CARET(): TerminalNode | undefined;
    STAR(): TerminalNode | undefined;
    SLASH(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    qual_op(): Qual_opContext | undefined;
    LT(): TerminalNode | undefined;
    GT(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    LESS_EQUALS(): TerminalNode | undefined;
    GREATER_EQUALS(): TerminalNode | undefined;
    NOT_EQUALS(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    type_list(): Type_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    DOCUMENT_P(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class C_exprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: C_exprContext): void;
}
export declare class C_expr_existsContext extends C_exprContext {
    EXISTS(): TerminalNode;
    select_with_parens(): Select_with_parensContext;
    constructor(ctx: C_exprContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class C_expr_exprContext extends C_exprContext {
    _a_expr_in_parens: A_exprContext;
    ARRAY(): TerminalNode | undefined;
    select_with_parens(): Select_with_parensContext | undefined;
    array_expr(): Array_exprContext | undefined;
    PARAM(): TerminalNode | undefined;
    opt_indirection(): Opt_indirectionContext | undefined;
    GROUPING(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    expr_list(): Expr_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    columnref(): ColumnrefContext | undefined;
    aexprconst(): AexprconstContext | undefined;
    plsqlvariablename(): PlsqlvariablenameContext | undefined;
    a_expr(): A_exprContext | undefined;
    func_expr(): Func_exprContext | undefined;
    indirection(): IndirectionContext | undefined;
    explicit_row(): Explicit_rowContext | undefined;
    implicit_row(): Implicit_rowContext | undefined;
    row(): RowContext[];
    row(i: number): RowContext;
    OVERLAPS(): TerminalNode | undefined;
    constructor(ctx: C_exprContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class C_expr_caseContext extends C_exprContext {
    case_expr(): Case_exprContext;
    constructor(ctx: C_exprContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PlsqlvariablenameContext extends ParserRuleContext {
    PLSQLVARIABLENAME(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_applicationContext extends ParserRuleContext {
    func_name(): Func_nameContext;
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    func_arg_list(): Func_arg_listContext | undefined;
    VARIADIC(): TerminalNode | undefined;
    func_arg_expr(): Func_arg_exprContext | undefined;
    STAR(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    opt_sort_clause(): Opt_sort_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_exprContext extends ParserRuleContext {
    func_application(): Func_applicationContext | undefined;
    within_group_clause(): Within_group_clauseContext | undefined;
    filter_clause(): Filter_clauseContext | undefined;
    over_clause(): Over_clauseContext | undefined;
    func_expr_common_subexpr(): Func_expr_common_subexprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_expr_windowlessContext extends ParserRuleContext {
    func_application(): Func_applicationContext | undefined;
    func_expr_common_subexpr(): Func_expr_common_subexprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_expr_common_subexprContext extends ParserRuleContext {
    COLLATION(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    CLOSE_PAREN(): TerminalNode | undefined;
    CURRENT_DATE(): TerminalNode | undefined;
    CURRENT_TIME(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    CURRENT_TIMESTAMP(): TerminalNode | undefined;
    LOCALTIME(): TerminalNode | undefined;
    LOCALTIMESTAMP(): TerminalNode | undefined;
    CURRENT_ROLE(): TerminalNode | undefined;
    CURRENT_USER(): TerminalNode | undefined;
    SESSION_USER(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    CURRENT_CATALOG(): TerminalNode | undefined;
    CURRENT_SCHEMA(): TerminalNode | undefined;
    CAST(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    typename(): TypenameContext | undefined;
    EXTRACT(): TerminalNode | undefined;
    extract_list(): Extract_listContext | undefined;
    NORMALIZE(): TerminalNode | undefined;
    COMMA(): TerminalNode | undefined;
    unicode_normal_form(): Unicode_normal_formContext | undefined;
    OVERLAY(): TerminalNode | undefined;
    overlay_list(): Overlay_listContext | undefined;
    POSITION(): TerminalNode | undefined;
    position_list(): Position_listContext | undefined;
    SUBSTRING(): TerminalNode | undefined;
    substr_list(): Substr_listContext | undefined;
    TREAT(): TerminalNode | undefined;
    TRIM(): TerminalNode | undefined;
    trim_list(): Trim_listContext | undefined;
    BOTH(): TerminalNode | undefined;
    LEADING(): TerminalNode | undefined;
    TRAILING(): TerminalNode | undefined;
    NULLIF(): TerminalNode | undefined;
    COALESCE(): TerminalNode | undefined;
    expr_list(): Expr_listContext | undefined;
    GREATEST(): TerminalNode | undefined;
    LEAST(): TerminalNode | undefined;
    XMLCONCAT(): TerminalNode | undefined;
    XMLELEMENT(): TerminalNode | undefined;
    NAME_P(): TerminalNode | undefined;
    collabel(): CollabelContext | undefined;
    xml_attributes(): Xml_attributesContext | undefined;
    XMLEXISTS(): TerminalNode | undefined;
    c_expr(): C_exprContext | undefined;
    xmlexists_argument(): Xmlexists_argumentContext | undefined;
    XMLFOREST(): TerminalNode | undefined;
    xml_attribute_list(): Xml_attribute_listContext | undefined;
    XMLPARSE(): TerminalNode | undefined;
    document_or_content(): Document_or_contentContext | undefined;
    xml_whitespace_option(): Xml_whitespace_optionContext | undefined;
    XMLPI(): TerminalNode | undefined;
    XMLROOT(): TerminalNode | undefined;
    XML_P(): TerminalNode | undefined;
    xml_root_version(): Xml_root_versionContext | undefined;
    opt_xml_root_standalone(): Opt_xml_root_standaloneContext | undefined;
    XMLSERIALIZE(): TerminalNode | undefined;
    simpletypename(): SimpletypenameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xml_root_versionContext extends ParserRuleContext {
    VERSION_P(): TerminalNode;
    a_expr(): A_exprContext | undefined;
    NO(): TerminalNode | undefined;
    VALUE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_xml_root_standaloneContext extends ParserRuleContext {
    COMMA(): TerminalNode;
    STANDALONE_P(): TerminalNode;
    YES_P(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    VALUE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xml_attributesContext extends ParserRuleContext {
    XMLATTRIBUTES(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    xml_attribute_list(): Xml_attribute_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xml_attribute_listContext extends ParserRuleContext {
    xml_attribute_el(): Xml_attribute_elContext[];
    xml_attribute_el(i: number): Xml_attribute_elContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xml_attribute_elContext extends ParserRuleContext {
    a_expr(): A_exprContext;
    AS(): TerminalNode | undefined;
    collabel(): CollabelContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Document_or_contentContext extends ParserRuleContext {
    DOCUMENT_P(): TerminalNode | undefined;
    CONTENT_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xml_whitespace_optionContext extends ParserRuleContext {
    PRESERVE(): TerminalNode | undefined;
    WHITESPACE_P(): TerminalNode;
    STRIP_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xmlexists_argumentContext extends ParserRuleContext {
    PASSING(): TerminalNode;
    c_expr(): C_exprContext;
    xml_passing_mech(): Xml_passing_mechContext[];
    xml_passing_mech(i: number): Xml_passing_mechContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Xml_passing_mechContext extends ParserRuleContext {
    BY(): TerminalNode;
    REF(): TerminalNode | undefined;
    VALUE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Within_group_clauseContext extends ParserRuleContext {
    WITHIN(): TerminalNode;
    GROUP_P(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    sort_clause(): Sort_clauseContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Filter_clauseContext extends ParserRuleContext {
    FILTER(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    WHERE(): TerminalNode;
    a_expr(): A_exprContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Window_clauseContext extends ParserRuleContext {
    WINDOW(): TerminalNode;
    window_definition_list(): Window_definition_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Window_definition_listContext extends ParserRuleContext {
    window_definition(): Window_definitionContext[];
    window_definition(i: number): Window_definitionContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Window_definitionContext extends ParserRuleContext {
    colid(): ColidContext;
    AS(): TerminalNode;
    window_specification(): Window_specificationContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Over_clauseContext extends ParserRuleContext {
    OVER(): TerminalNode;
    window_specification(): Window_specificationContext | undefined;
    colid(): ColidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Window_specificationContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    opt_existing_window_name(): Opt_existing_window_nameContext | undefined;
    opt_partition_clause(): Opt_partition_clauseContext | undefined;
    opt_sort_clause(): Opt_sort_clauseContext | undefined;
    opt_frame_clause(): Opt_frame_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_existing_window_nameContext extends ParserRuleContext {
    colid(): ColidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_partition_clauseContext extends ParserRuleContext {
    PARTITION(): TerminalNode;
    BY(): TerminalNode;
    expr_list(): Expr_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_frame_clauseContext extends ParserRuleContext {
    RANGE(): TerminalNode | undefined;
    frame_extent(): Frame_extentContext;
    opt_window_exclusion_clause(): Opt_window_exclusion_clauseContext | undefined;
    ROWS(): TerminalNode | undefined;
    GROUPS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Frame_extentContext extends ParserRuleContext {
    frame_bound(): Frame_boundContext[];
    frame_bound(i: number): Frame_boundContext;
    BETWEEN(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Frame_boundContext extends ParserRuleContext {
    UNBOUNDED(): TerminalNode | undefined;
    PRECEDING(): TerminalNode | undefined;
    FOLLOWING(): TerminalNode | undefined;
    CURRENT_P(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_window_exclusion_clauseContext extends ParserRuleContext {
    EXCLUDE(): TerminalNode;
    CURRENT_P(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    GROUP_P(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    OTHERS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RowContext extends ParserRuleContext {
    ROW(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    expr_list(): Expr_listContext | undefined;
    COMMA(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Explicit_rowContext extends ParserRuleContext {
    ROW(): TerminalNode;
    OPEN_PAREN(): TerminalNode;
    CLOSE_PAREN(): TerminalNode;
    expr_list(): Expr_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Implicit_rowContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode;
    expr_list(): Expr_listContext;
    COMMA(): TerminalNode;
    a_expr(): A_exprContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Sub_typeContext extends ParserRuleContext {
    ANY(): TerminalNode | undefined;
    SOME(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class All_opContext extends ParserRuleContext {
    Operator(): TerminalNode | undefined;
    mathop(): MathopContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class MathopContext extends ParserRuleContext {
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    STAR(): TerminalNode | undefined;
    SLASH(): TerminalNode | undefined;
    PERCENT(): TerminalNode | undefined;
    CARET(): TerminalNode | undefined;
    LT(): TerminalNode | undefined;
    GT(): TerminalNode | undefined;
    EQUAL(): TerminalNode | undefined;
    LESS_EQUALS(): TerminalNode | undefined;
    GREATER_EQUALS(): TerminalNode | undefined;
    NOT_EQUALS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Qual_opContext extends ParserRuleContext {
    Operator(): TerminalNode | undefined;
    OPERATOR(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    any_operator(): Any_operatorContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Qual_all_opContext extends ParserRuleContext {
    all_op(): All_opContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    any_operator(): Any_operatorContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Subquery_OpContext extends ParserRuleContext {
    all_op(): All_opContext | undefined;
    OPERATOR(): TerminalNode | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    any_operator(): Any_operatorContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    ILIKE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Expr_listContext extends ParserRuleContext {
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_arg_listContext extends ParserRuleContext {
    func_arg_expr(): Func_arg_exprContext[];
    func_arg_expr(i: number): Func_arg_exprContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_arg_exprContext extends ParserRuleContext {
    a_expr(): A_exprContext;
    param_name(): Param_nameContext | undefined;
    COLON_EQUALS(): TerminalNode | undefined;
    EQUALS_GREATER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Type_listContext extends ParserRuleContext {
    typename(): TypenameContext[];
    typename(i: number): TypenameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Array_exprContext extends ParserRuleContext {
    OPEN_BRACKET(): TerminalNode;
    CLOSE_BRACKET(): TerminalNode;
    expr_list(): Expr_listContext | undefined;
    array_expr_list(): Array_expr_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Array_expr_listContext extends ParserRuleContext {
    array_expr(): Array_exprContext[];
    array_expr(i: number): Array_exprContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Extract_listContext extends ParserRuleContext {
    extract_arg(): Extract_argContext;
    FROM(): TerminalNode;
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Extract_argContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    YEAR_P(): TerminalNode | undefined;
    MONTH_P(): TerminalNode | undefined;
    DAY_P(): TerminalNode | undefined;
    HOUR_P(): TerminalNode | undefined;
    MINUTE_P(): TerminalNode | undefined;
    SECOND_P(): TerminalNode | undefined;
    sconst(): SconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Unicode_normal_formContext extends ParserRuleContext {
    NFC(): TerminalNode | undefined;
    NFD(): TerminalNode | undefined;
    NFKC(): TerminalNode | undefined;
    NFKD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Overlay_listContext extends ParserRuleContext {
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    PLACING(): TerminalNode;
    FROM(): TerminalNode;
    FOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Position_listContext extends ParserRuleContext {
    b_expr(): B_exprContext[];
    b_expr(i: number): B_exprContext;
    IN_P(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Substr_listContext extends ParserRuleContext {
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    FROM(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    SIMILAR(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    expr_list(): Expr_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Trim_listContext extends ParserRuleContext {
    a_expr(): A_exprContext | undefined;
    FROM(): TerminalNode | undefined;
    expr_list(): Expr_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class In_exprContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: In_exprContext): void;
}
export declare class In_expr_selectContext extends In_exprContext {
    select_with_parens(): Select_with_parensContext;
    constructor(ctx: In_exprContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class In_expr_listContext extends In_exprContext {
    OPEN_PAREN(): TerminalNode;
    expr_list(): Expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    constructor(ctx: In_exprContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Case_exprContext extends ParserRuleContext {
    CASE(): TerminalNode;
    when_clause_list(): When_clause_listContext;
    END_P(): TerminalNode;
    case_arg(): Case_argContext | undefined;
    case_default(): Case_defaultContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class When_clause_listContext extends ParserRuleContext {
    when_clause(): When_clauseContext[];
    when_clause(i: number): When_clauseContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class When_clauseContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    THEN(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Case_defaultContext extends ParserRuleContext {
    ELSE(): TerminalNode;
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Case_argContext extends ParserRuleContext {
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColumnrefContext extends ParserRuleContext {
    colid(): ColidContext;
    indirection(): IndirectionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Indirection_elContext extends ParserRuleContext {
    DOT(): TerminalNode | undefined;
    attr_name(): Attr_nameContext | undefined;
    STAR(): TerminalNode | undefined;
    OPEN_BRACKET(): TerminalNode | undefined;
    CLOSE_BRACKET(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    COLON(): TerminalNode | undefined;
    opt_slice_bound(): Opt_slice_boundContext[];
    opt_slice_bound(i: number): Opt_slice_boundContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_slice_boundContext extends ParserRuleContext {
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class IndirectionContext extends ParserRuleContext {
    indirection_el(): Indirection_elContext[];
    indirection_el(i: number): Indirection_elContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_indirectionContext extends ParserRuleContext {
    indirection_el(): Indirection_elContext[];
    indirection_el(i: number): Indirection_elContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_target_listContext extends ParserRuleContext {
    target_list(): Target_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Target_listContext extends ParserRuleContext {
    target_el(): Target_elContext[];
    target_el(i: number): Target_elContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Target_elContext extends ParserRuleContext {
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    copyFrom(ctx: Target_elContext): void;
}
export declare class Target_labelContext extends Target_elContext {
    a_expr(): A_exprContext;
    AS(): TerminalNode | undefined;
    collabel(): CollabelContext | undefined;
    identifier(): IdentifierContext | undefined;
    constructor(ctx: Target_elContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Target_starContext extends Target_elContext {
    STAR(): TerminalNode;
    constructor(ctx: Target_elContext);
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Qualified_name_listContext extends ParserRuleContext {
    qualified_name(): Qualified_nameContext[];
    qualified_name(i: number): Qualified_nameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Qualified_nameContext extends ParserRuleContext {
    colid(): ColidContext;
    indirection(): IndirectionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Name_listContext extends ParserRuleContext {
    name(): NameContext[];
    name(i: number): NameContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class NameContext extends ParserRuleContext {
    colid(): ColidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Attr_nameContext extends ParserRuleContext {
    collabel(): CollabelContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class File_nameContext extends ParserRuleContext {
    sconst(): SconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Func_nameContext extends ParserRuleContext {
    type_function_name(): Type_function_nameContext | undefined;
    colid(): ColidContext | undefined;
    indirection(): IndirectionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AexprconstContext extends ParserRuleContext {
    iconst(): IconstContext | undefined;
    fconst(): FconstContext | undefined;
    sconst(): SconstContext | undefined;
    bconst(): BconstContext | undefined;
    xconst(): XconstContext | undefined;
    func_name(): Func_nameContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    func_arg_list(): Func_arg_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    opt_sort_clause(): Opt_sort_clauseContext | undefined;
    consttypename(): ConsttypenameContext | undefined;
    constinterval(): ConstintervalContext | undefined;
    opt_interval(): Opt_intervalContext | undefined;
    TRUE_P(): TerminalNode | undefined;
    FALSE_P(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class XconstContext extends ParserRuleContext {
    HexadecimalStringConstant(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class BconstContext extends ParserRuleContext {
    BinaryStringConstant(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class FconstContext extends ParserRuleContext {
    Numeric(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class IconstContext extends ParserRuleContext {
    Integral(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SconstContext extends ParserRuleContext {
    anysconst(): AnysconstContext;
    opt_uescape(): Opt_uescapeContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class AnysconstContext extends ParserRuleContext {
    StringConstant(): TerminalNode | undefined;
    UnicodeEscapeStringConstant(): TerminalNode | undefined;
    BeginDollarStringConstant(): TerminalNode | undefined;
    EndDollarStringConstant(): TerminalNode | undefined;
    DollarText(): TerminalNode[];
    DollarText(i: number): TerminalNode;
    EscapeStringConstant(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_uescapeContext extends ParserRuleContext {
    UESCAPE(): TerminalNode;
    anysconst(): AnysconstContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SignediconstContext extends ParserRuleContext {
    iconst(): IconstContext;
    PLUS(): TerminalNode | undefined;
    MINUS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RoleidContext extends ParserRuleContext {
    rolespec(): RolespecContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class RolespecContext extends ParserRuleContext {
    nonreservedword(): NonreservedwordContext | undefined;
    CURRENT_USER(): TerminalNode | undefined;
    SESSION_USER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Role_listContext extends ParserRuleContext {
    rolespec(): RolespecContext[];
    rolespec(i: number): RolespecContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class ColidContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    unreserved_keyword(): Unreserved_keywordContext | undefined;
    col_name_keyword(): Col_name_keywordContext | undefined;
    plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Type_function_nameContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    unreserved_keyword(): Unreserved_keywordContext | undefined;
    plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined;
    type_func_name_keyword(): Type_func_name_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class NonreservedwordContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    unreserved_keyword(): Unreserved_keywordContext | undefined;
    col_name_keyword(): Col_name_keywordContext | undefined;
    type_func_name_keyword(): Type_func_name_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class CollabelContext extends ParserRuleContext {
    identifier(): IdentifierContext | undefined;
    plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined;
    unreserved_keyword(): Unreserved_keywordContext | undefined;
    col_name_keyword(): Col_name_keywordContext | undefined;
    type_func_name_keyword(): Type_func_name_keywordContext | undefined;
    reserved_keyword(): Reserved_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class IdentifierContext extends ParserRuleContext {
    Identifier(): TerminalNode | undefined;
    opt_uescape(): Opt_uescapeContext | undefined;
    QuotedIdentifier(): TerminalNode | undefined;
    UnicodeQuotedIdentifier(): TerminalNode | undefined;
    plsqlvariablename(): PlsqlvariablenameContext | undefined;
    plsqlidentifier(): PlsqlidentifierContext | undefined;
    plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class PlsqlidentifierContext extends ParserRuleContext {
    PLSQLIDENTIFIER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Unreserved_keywordContext extends ParserRuleContext {
    ABORT_P(): TerminalNode | undefined;
    ABSOLUTE_P(): TerminalNode | undefined;
    ACCESS(): TerminalNode | undefined;
    ACTION(): TerminalNode | undefined;
    ADD_P(): TerminalNode | undefined;
    ADMIN(): TerminalNode | undefined;
    AFTER(): TerminalNode | undefined;
    AGGREGATE(): TerminalNode | undefined;
    ALSO(): TerminalNode | undefined;
    ALTER(): TerminalNode | undefined;
    ALWAYS(): TerminalNode | undefined;
    ASSERTION(): TerminalNode | undefined;
    ASSIGNMENT(): TerminalNode | undefined;
    AT(): TerminalNode | undefined;
    ATTACH(): TerminalNode | undefined;
    ATTRIBUTE(): TerminalNode | undefined;
    BACKWARD(): TerminalNode | undefined;
    BEFORE(): TerminalNode | undefined;
    BEGIN_P(): TerminalNode | undefined;
    BY(): TerminalNode | undefined;
    CACHE(): TerminalNode | undefined;
    CALL(): TerminalNode | undefined;
    CALLED(): TerminalNode | undefined;
    CASCADE(): TerminalNode | undefined;
    CASCADED(): TerminalNode | undefined;
    CATALOG(): TerminalNode | undefined;
    CHAIN(): TerminalNode | undefined;
    CHARACTERISTICS(): TerminalNode | undefined;
    CHECKPOINT(): TerminalNode | undefined;
    CLASS(): TerminalNode | undefined;
    CLOSE(): TerminalNode | undefined;
    CLUSTER(): TerminalNode | undefined;
    COLUMNS(): TerminalNode | undefined;
    COMMENT(): TerminalNode | undefined;
    COMMENTS(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    COMMITTED(): TerminalNode | undefined;
    CONFIGURATION(): TerminalNode | undefined;
    CONFLICT(): TerminalNode | undefined;
    CONNECTION(): TerminalNode | undefined;
    CONSTRAINTS(): TerminalNode | undefined;
    CONTENT_P(): TerminalNode | undefined;
    CONTINUE_P(): TerminalNode | undefined;
    CONVERSION_P(): TerminalNode | undefined;
    COPY(): TerminalNode | undefined;
    COST(): TerminalNode | undefined;
    CSV(): TerminalNode | undefined;
    CUBE(): TerminalNode | undefined;
    CURRENT_P(): TerminalNode | undefined;
    CURSOR(): TerminalNode | undefined;
    CYCLE(): TerminalNode | undefined;
    DATA_P(): TerminalNode | undefined;
    DATABASE(): TerminalNode | undefined;
    DAY_P(): TerminalNode | undefined;
    DEALLOCATE(): TerminalNode | undefined;
    DECLARE(): TerminalNode | undefined;
    DEFAULTS(): TerminalNode | undefined;
    DEFERRED(): TerminalNode | undefined;
    DEFINER(): TerminalNode | undefined;
    DELETE_P(): TerminalNode | undefined;
    DELIMITER(): TerminalNode | undefined;
    DELIMITERS(): TerminalNode | undefined;
    DEPENDS(): TerminalNode | undefined;
    DETACH(): TerminalNode | undefined;
    DICTIONARY(): TerminalNode | undefined;
    DISABLE_P(): TerminalNode | undefined;
    DISCARD(): TerminalNode | undefined;
    DOCUMENT_P(): TerminalNode | undefined;
    DOMAIN_P(): TerminalNode | undefined;
    DOUBLE_P(): TerminalNode | undefined;
    DROP(): TerminalNode | undefined;
    EACH(): TerminalNode | undefined;
    ENABLE_P(): TerminalNode | undefined;
    ENCODING(): TerminalNode | undefined;
    ENCRYPTED(): TerminalNode | undefined;
    ENUM_P(): TerminalNode | undefined;
    ESCAPE(): TerminalNode | undefined;
    EVENT(): TerminalNode | undefined;
    EXCLUDE(): TerminalNode | undefined;
    EXCLUDING(): TerminalNode | undefined;
    EXCLUSIVE(): TerminalNode | undefined;
    EXECUTE(): TerminalNode | undefined;
    EXPLAIN(): TerminalNode | undefined;
    EXPRESSION(): TerminalNode | undefined;
    EXTENSION(): TerminalNode | undefined;
    EXTERNAL(): TerminalNode | undefined;
    FAMILY(): TerminalNode | undefined;
    FILTER(): TerminalNode | undefined;
    FIRST_P(): TerminalNode | undefined;
    FOLLOWING(): TerminalNode | undefined;
    FORCE(): TerminalNode | undefined;
    FORWARD(): TerminalNode | undefined;
    FUNCTION(): TerminalNode | undefined;
    FUNCTIONS(): TerminalNode | undefined;
    GENERATED(): TerminalNode | undefined;
    GLOBAL(): TerminalNode | undefined;
    GRANTED(): TerminalNode | undefined;
    GROUPS(): TerminalNode | undefined;
    HANDLER(): TerminalNode | undefined;
    HEADER_P(): TerminalNode | undefined;
    HOLD(): TerminalNode | undefined;
    HOUR_P(): TerminalNode | undefined;
    IDENTITY_P(): TerminalNode | undefined;
    IF_P(): TerminalNode | undefined;
    IMMEDIATE(): TerminalNode | undefined;
    IMMUTABLE(): TerminalNode | undefined;
    IMPLICIT_P(): TerminalNode | undefined;
    IMPORT_P(): TerminalNode | undefined;
    INCLUDE(): TerminalNode | undefined;
    INCLUDING(): TerminalNode | undefined;
    INCREMENT(): TerminalNode | undefined;
    INDEX(): TerminalNode | undefined;
    INDEXES(): TerminalNode | undefined;
    INHERIT(): TerminalNode | undefined;
    INHERITS(): TerminalNode | undefined;
    INLINE_P(): TerminalNode | undefined;
    INPUT_P(): TerminalNode | undefined;
    INSENSITIVE(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    INSTEAD(): TerminalNode | undefined;
    INVOKER(): TerminalNode | undefined;
    ISOLATION(): TerminalNode | undefined;
    KEY(): TerminalNode | undefined;
    LABEL(): TerminalNode | undefined;
    LANGUAGE(): TerminalNode | undefined;
    LARGE_P(): TerminalNode | undefined;
    LAST_P(): TerminalNode | undefined;
    LEAKPROOF(): TerminalNode | undefined;
    LEVEL(): TerminalNode | undefined;
    LISTEN(): TerminalNode | undefined;
    LOAD(): TerminalNode | undefined;
    LOCAL(): TerminalNode | undefined;
    LOCATION(): TerminalNode | undefined;
    LOCK_P(): TerminalNode | undefined;
    LOCKED(): TerminalNode | undefined;
    LOGGED(): TerminalNode | undefined;
    MAPPING(): TerminalNode | undefined;
    MATCH(): TerminalNode | undefined;
    MATERIALIZED(): TerminalNode | undefined;
    MAXVALUE(): TerminalNode | undefined;
    METHOD(): TerminalNode | undefined;
    MINUTE_P(): TerminalNode | undefined;
    MINVALUE(): TerminalNode | undefined;
    MODE(): TerminalNode | undefined;
    MONTH_P(): TerminalNode | undefined;
    MOVE(): TerminalNode | undefined;
    NAME_P(): TerminalNode | undefined;
    NAMES(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    NFC(): TerminalNode | undefined;
    NFD(): TerminalNode | undefined;
    NFKC(): TerminalNode | undefined;
    NFKD(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    NORMALIZED(): TerminalNode | undefined;
    NOTHING(): TerminalNode | undefined;
    NOTIFY(): TerminalNode | undefined;
    NOWAIT(): TerminalNode | undefined;
    NULLS_P(): TerminalNode | undefined;
    OBJECT_P(): TerminalNode | undefined;
    OF(): TerminalNode | undefined;
    OFF(): TerminalNode | undefined;
    OIDS(): TerminalNode | undefined;
    OLD(): TerminalNode | undefined;
    OPERATOR(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    OPTIONS(): TerminalNode | undefined;
    ORDINALITY(): TerminalNode | undefined;
    OTHERS(): TerminalNode | undefined;
    OVER(): TerminalNode | undefined;
    OVERRIDING(): TerminalNode | undefined;
    OWNED(): TerminalNode | undefined;
    OWNER(): TerminalNode | undefined;
    PARALLEL(): TerminalNode | undefined;
    PARSER(): TerminalNode | undefined;
    PARTIAL(): TerminalNode | undefined;
    PARTITION(): TerminalNode | undefined;
    PASSING(): TerminalNode | undefined;
    PASSWORD(): TerminalNode | undefined;
    PLANS(): TerminalNode | undefined;
    POLICY(): TerminalNode | undefined;
    PRECEDING(): TerminalNode | undefined;
    PREPARE(): TerminalNode | undefined;
    PREPARED(): TerminalNode | undefined;
    PRESERVE(): TerminalNode | undefined;
    PRIOR(): TerminalNode | undefined;
    PRIVILEGES(): TerminalNode | undefined;
    PROCEDURAL(): TerminalNode | undefined;
    PROCEDURE(): TerminalNode | undefined;
    PROCEDURES(): TerminalNode | undefined;
    PROGRAM(): TerminalNode | undefined;
    PUBLICATION(): TerminalNode | undefined;
    QUOTE(): TerminalNode | undefined;
    RANGE(): TerminalNode | undefined;
    READ(): TerminalNode | undefined;
    REASSIGN(): TerminalNode | undefined;
    RECHECK(): TerminalNode | undefined;
    RECURSIVE(): TerminalNode | undefined;
    REF(): TerminalNode | undefined;
    REFERENCING(): TerminalNode | undefined;
    REFRESH(): TerminalNode | undefined;
    REINDEX(): TerminalNode | undefined;
    RELATIVE_P(): TerminalNode | undefined;
    RELEASE(): TerminalNode | undefined;
    RENAME(): TerminalNode | undefined;
    REPEATABLE(): TerminalNode | undefined;
    REPLACE(): TerminalNode | undefined;
    REPLICA(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    RESTART(): TerminalNode | undefined;
    RESTRICT(): TerminalNode | undefined;
    RETURNS(): TerminalNode | undefined;
    REVOKE(): TerminalNode | undefined;
    ROLE(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    ROLLUP(): TerminalNode | undefined;
    ROUTINE(): TerminalNode | undefined;
    ROUTINES(): TerminalNode | undefined;
    ROWS(): TerminalNode | undefined;
    RULE(): TerminalNode | undefined;
    SAVEPOINT(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SCHEMAS(): TerminalNode | undefined;
    SCROLL(): TerminalNode | undefined;
    SEARCH(): TerminalNode | undefined;
    SECOND_P(): TerminalNode | undefined;
    SECURITY(): TerminalNode | undefined;
    SEQUENCE(): TerminalNode | undefined;
    SEQUENCES(): TerminalNode | undefined;
    SERIALIZABLE(): TerminalNode | undefined;
    SERVER(): TerminalNode | undefined;
    SESSION(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    SETS(): TerminalNode | undefined;
    SHARE(): TerminalNode | undefined;
    SHOW(): TerminalNode | undefined;
    SIMPLE(): TerminalNode | undefined;
    SKIP_P(): TerminalNode | undefined;
    SNAPSHOT(): TerminalNode | undefined;
    SQL_P(): TerminalNode | undefined;
    STABLE(): TerminalNode | undefined;
    STANDALONE_P(): TerminalNode | undefined;
    START(): TerminalNode | undefined;
    STATEMENT(): TerminalNode | undefined;
    STATISTICS(): TerminalNode | undefined;
    STDIN(): TerminalNode | undefined;
    STDOUT(): TerminalNode | undefined;
    STORAGE(): TerminalNode | undefined;
    STORED(): TerminalNode | undefined;
    STRICT_P(): TerminalNode | undefined;
    STRIP_P(): TerminalNode | undefined;
    SUBSCRIPTION(): TerminalNode | undefined;
    SUPPORT(): TerminalNode | undefined;
    SYSID(): TerminalNode | undefined;
    SYSTEM_P(): TerminalNode | undefined;
    TABLES(): TerminalNode | undefined;
    TABLESPACE(): TerminalNode | undefined;
    TEMP(): TerminalNode | undefined;
    TEMPLATE(): TerminalNode | undefined;
    TEMPORARY(): TerminalNode | undefined;
    TEXT_P(): TerminalNode | undefined;
    TIES(): TerminalNode | undefined;
    TRANSACTION(): TerminalNode | undefined;
    TRANSFORM(): TerminalNode | undefined;
    TRIGGER(): TerminalNode | undefined;
    TRUNCATE(): TerminalNode | undefined;
    TRUSTED(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    TYPES_P(): TerminalNode | undefined;
    UESCAPE(): TerminalNode | undefined;
    UNBOUNDED(): TerminalNode | undefined;
    UNCOMMITTED(): TerminalNode | undefined;
    UNENCRYPTED(): TerminalNode | undefined;
    UNKNOWN(): TerminalNode | undefined;
    UNLISTEN(): TerminalNode | undefined;
    UNLOGGED(): TerminalNode | undefined;
    UNTIL(): TerminalNode | undefined;
    UPDATE(): TerminalNode | undefined;
    VACUUM(): TerminalNode | undefined;
    VALID(): TerminalNode | undefined;
    VALIDATE(): TerminalNode | undefined;
    VALIDATOR(): TerminalNode | undefined;
    VALUE_P(): TerminalNode | undefined;
    VARYING(): TerminalNode | undefined;
    VERSION_P(): TerminalNode | undefined;
    VIEW(): TerminalNode | undefined;
    VIEWS(): TerminalNode | undefined;
    VOLATILE(): TerminalNode | undefined;
    WHITESPACE_P(): TerminalNode | undefined;
    WITHIN(): TerminalNode | undefined;
    WITHOUT(): TerminalNode | undefined;
    WORK(): TerminalNode | undefined;
    WRAPPER(): TerminalNode | undefined;
    WRITE(): TerminalNode | undefined;
    XML_P(): TerminalNode | undefined;
    YEAR_P(): TerminalNode | undefined;
    YES_P(): TerminalNode | undefined;
    ZONE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Col_name_keywordContext extends ParserRuleContext {
    BETWEEN(): TerminalNode | undefined;
    BIGINT(): TerminalNode | undefined;
    bit(): BitContext | undefined;
    BOOLEAN_P(): TerminalNode | undefined;
    CHAR_P(): TerminalNode | undefined;
    character(): CharacterContext | undefined;
    COALESCE(): TerminalNode | undefined;
    DEC(): TerminalNode | undefined;
    DECIMAL_P(): TerminalNode | undefined;
    EXISTS(): TerminalNode | undefined;
    EXTRACT(): TerminalNode | undefined;
    FLOAT_P(): TerminalNode | undefined;
    GREATEST(): TerminalNode | undefined;
    GROUPING(): TerminalNode | undefined;
    INOUT(): TerminalNode | undefined;
    INT_P(): TerminalNode | undefined;
    INTEGER(): TerminalNode | undefined;
    INTERVAL(): TerminalNode | undefined;
    LEAST(): TerminalNode | undefined;
    NATIONAL(): TerminalNode | undefined;
    NCHAR(): TerminalNode | undefined;
    NONE(): TerminalNode | undefined;
    NORMALIZE(): TerminalNode | undefined;
    NULLIF(): TerminalNode | undefined;
    numeric(): NumericContext | undefined;
    OUT_P(): TerminalNode | undefined;
    OVERLAY(): TerminalNode | undefined;
    POSITION(): TerminalNode | undefined;
    PRECISION(): TerminalNode | undefined;
    REAL(): TerminalNode | undefined;
    ROW(): TerminalNode | undefined;
    SETOF(): TerminalNode | undefined;
    SMALLINT(): TerminalNode | undefined;
    SUBSTRING(): TerminalNode | undefined;
    TIME(): TerminalNode | undefined;
    TIMESTAMP(): TerminalNode | undefined;
    TREAT(): TerminalNode | undefined;
    TRIM(): TerminalNode | undefined;
    VALUES(): TerminalNode | undefined;
    VARCHAR(): TerminalNode | undefined;
    XMLATTRIBUTES(): TerminalNode | undefined;
    XMLCONCAT(): TerminalNode | undefined;
    XMLELEMENT(): TerminalNode | undefined;
    XMLEXISTS(): TerminalNode | undefined;
    XMLFOREST(): TerminalNode | undefined;
    XMLNAMESPACES(): TerminalNode | undefined;
    XMLPARSE(): TerminalNode | undefined;
    XMLPI(): TerminalNode | undefined;
    XMLROOT(): TerminalNode | undefined;
    XMLSERIALIZE(): TerminalNode | undefined;
    XMLTABLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Type_func_name_keywordContext extends ParserRuleContext {
    AUTHORIZATION(): TerminalNode | undefined;
    BINARY(): TerminalNode | undefined;
    COLLATION(): TerminalNode | undefined;
    CONCURRENTLY(): TerminalNode | undefined;
    CROSS(): TerminalNode | undefined;
    CURRENT_SCHEMA(): TerminalNode | undefined;
    FREEZE(): TerminalNode | undefined;
    FULL(): TerminalNode | undefined;
    ILIKE(): TerminalNode | undefined;
    INNER_P(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    ISNULL(): TerminalNode | undefined;
    JOIN(): TerminalNode | undefined;
    LEFT(): TerminalNode | undefined;
    LIKE(): TerminalNode | undefined;
    NATURAL(): TerminalNode | undefined;
    NOTNULL(): TerminalNode | undefined;
    OUTER_P(): TerminalNode | undefined;
    OVERLAPS(): TerminalNode | undefined;
    RIGHT(): TerminalNode | undefined;
    SIMILAR(): TerminalNode | undefined;
    TABLESAMPLE(): TerminalNode | undefined;
    VERBOSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Reserved_keywordContext extends ParserRuleContext {
    ALL(): TerminalNode | undefined;
    ANALYSE(): TerminalNode | undefined;
    ANALYZE(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    ANY(): TerminalNode | undefined;
    ARRAY(): TerminalNode | undefined;
    AS(): TerminalNode | undefined;
    ASC(): TerminalNode | undefined;
    ASYMMETRIC(): TerminalNode | undefined;
    BOTH(): TerminalNode | undefined;
    CASE(): TerminalNode | undefined;
    CAST(): TerminalNode | undefined;
    CHECK(): TerminalNode | undefined;
    COLLATE(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    CREATE(): TerminalNode | undefined;
    CURRENT_CATALOG(): TerminalNode | undefined;
    CURRENT_DATE(): TerminalNode | undefined;
    CURRENT_ROLE(): TerminalNode | undefined;
    CURRENT_TIME(): TerminalNode | undefined;
    CURRENT_TIMESTAMP(): TerminalNode | undefined;
    CURRENT_USER(): TerminalNode | undefined;
    DEFERRABLE(): TerminalNode | undefined;
    DESC(): TerminalNode | undefined;
    DISTINCT(): TerminalNode | undefined;
    DO(): TerminalNode | undefined;
    ELSE(): TerminalNode | undefined;
    END_P(): TerminalNode | undefined;
    EXCEPT(): TerminalNode | undefined;
    FALSE_P(): TerminalNode | undefined;
    FETCH(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    FOREIGN(): TerminalNode | undefined;
    FROM(): TerminalNode | undefined;
    GRANT(): TerminalNode | undefined;
    GROUP_P(): TerminalNode | undefined;
    HAVING(): TerminalNode | undefined;
    IN_P(): TerminalNode | undefined;
    INITIALLY(): TerminalNode | undefined;
    INTERSECT(): TerminalNode | undefined;
    LATERAL_P(): TerminalNode | undefined;
    LEADING(): TerminalNode | undefined;
    LIMIT(): TerminalNode | undefined;
    LOCALTIME(): TerminalNode | undefined;
    LOCALTIMESTAMP(): TerminalNode | undefined;
    NOT(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    OFFSET(): TerminalNode | undefined;
    ON(): TerminalNode | undefined;
    ONLY(): TerminalNode | undefined;
    OR(): TerminalNode | undefined;
    ORDER(): TerminalNode | undefined;
    PLACING(): TerminalNode | undefined;
    PRIMARY(): TerminalNode | undefined;
    REFERENCES(): TerminalNode | undefined;
    RETURNING(): TerminalNode | undefined;
    SELECT(): TerminalNode | undefined;
    SESSION_USER(): TerminalNode | undefined;
    SOME(): TerminalNode | undefined;
    SYMMETRIC(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    THEN(): TerminalNode | undefined;
    TO(): TerminalNode | undefined;
    TRAILING(): TerminalNode | undefined;
    TRUE_P(): TerminalNode | undefined;
    UNION(): TerminalNode | undefined;
    UNIQUE(): TerminalNode | undefined;
    USER(): TerminalNode | undefined;
    USING(): TerminalNode | undefined;
    VARIADIC(): TerminalNode | undefined;
    WHEN(): TerminalNode | undefined;
    WHERE(): TerminalNode | undefined;
    WINDOW(): TerminalNode | undefined;
    WITH(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Pl_functionContext extends ParserRuleContext {
    comp_options(): Comp_optionsContext;
    pl_block(): Pl_blockContext;
    opt_semi(): Opt_semiContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Comp_optionsContext extends ParserRuleContext {
    comp_option(): Comp_optionContext[];
    comp_option(i: number): Comp_optionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Comp_optionContext extends ParserRuleContext {
    sharp(): SharpContext;
    OPTION(): TerminalNode | undefined;
    DUMP(): TerminalNode | undefined;
    PRINT_STRICT_PARAMS(): TerminalNode | undefined;
    option_value(): Option_valueContext | undefined;
    VARIABLE_CONFLICT(): TerminalNode | undefined;
    ERROR(): TerminalNode | undefined;
    USE_VARIABLE(): TerminalNode | undefined;
    USE_COLUMN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class SharpContext extends ParserRuleContext {
    Operator(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Option_valueContext extends ParserRuleContext {
    sconst(): SconstContext | undefined;
    reserved_keyword(): Reserved_keywordContext | undefined;
    plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined;
    unreserved_keyword(): Unreserved_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_semiContext extends ParserRuleContext {
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Pl_blockContext extends ParserRuleContext {
    decl_sect(): Decl_sectContext;
    BEGIN_P(): TerminalNode;
    proc_sect(): Proc_sectContext;
    exception_sect(): Exception_sectContext;
    END_P(): TerminalNode;
    opt_label(): Opt_labelContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_sectContext extends ParserRuleContext {
    opt_block_label(): Opt_block_labelContext;
    decl_start(): Decl_startContext | undefined;
    decl_stmts(): Decl_stmtsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_startContext extends ParserRuleContext {
    DECLARE(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_stmtsContext extends ParserRuleContext {
    decl_stmt(): Decl_stmtContext[];
    decl_stmt(i: number): Decl_stmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Label_declContext extends ParserRuleContext {
    LESS_LESS(): TerminalNode;
    any_identifier(): Any_identifierContext;
    GREATER_GREATER(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_stmtContext extends ParserRuleContext {
    decl_statement(): Decl_statementContext | undefined;
    DECLARE(): TerminalNode | undefined;
    label_decl(): Label_declContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_statementContext extends ParserRuleContext {
    decl_varname(): Decl_varnameContext;
    SEMI(): TerminalNode;
    ALIAS(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    decl_aliasitem(): Decl_aliasitemContext | undefined;
    decl_const(): Decl_constContext | undefined;
    decl_datatype(): Decl_datatypeContext | undefined;
    decl_collate(): Decl_collateContext | undefined;
    decl_notnull(): Decl_notnullContext | undefined;
    decl_defval(): Decl_defvalContext | undefined;
    opt_scrollable(): Opt_scrollableContext | undefined;
    CURSOR(): TerminalNode | undefined;
    decl_cursor_args(): Decl_cursor_argsContext | undefined;
    decl_is_for(): Decl_is_forContext | undefined;
    decl_cursor_query(): Decl_cursor_queryContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_scrollableContext extends ParserRuleContext {
    NO(): TerminalNode | undefined;
    SCROLL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_cursor_queryContext extends ParserRuleContext {
    selectstmt(): SelectstmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_cursor_argsContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode | undefined;
    decl_cursor_arglist(): Decl_cursor_arglistContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_cursor_arglistContext extends ParserRuleContext {
    decl_cursor_arg(): Decl_cursor_argContext[];
    decl_cursor_arg(i: number): Decl_cursor_argContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_cursor_argContext extends ParserRuleContext {
    decl_varname(): Decl_varnameContext;
    decl_datatype(): Decl_datatypeContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_is_forContext extends ParserRuleContext {
    IS(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_aliasitemContext extends ParserRuleContext {
    PARAM(): TerminalNode | undefined;
    colid(): ColidContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_varnameContext extends ParserRuleContext {
    any_identifier(): Any_identifierContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_constContext extends ParserRuleContext {
    CONSTANT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_datatypeContext extends ParserRuleContext {
    typename(): TypenameContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_collateContext extends ParserRuleContext {
    COLLATE(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_notnullContext extends ParserRuleContext {
    NOT(): TerminalNode | undefined;
    NULL_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_defvalContext extends ParserRuleContext {
    decl_defkey(): Decl_defkeyContext | undefined;
    sql_expression(): Sql_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Decl_defkeyContext extends ParserRuleContext {
    assign_operator(): Assign_operatorContext | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Assign_operatorContext extends ParserRuleContext {
    EQUAL(): TerminalNode | undefined;
    COLON_EQUALS(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Proc_sectContext extends ParserRuleContext {
    proc_stmt(): Proc_stmtContext[];
    proc_stmt(i: number): Proc_stmtContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Proc_stmtContext extends ParserRuleContext {
    pl_block(): Pl_blockContext | undefined;
    SEMI(): TerminalNode | undefined;
    stmt_return(): Stmt_returnContext | undefined;
    stmt_raise(): Stmt_raiseContext | undefined;
    stmt_assign(): Stmt_assignContext | undefined;
    stmt_if(): Stmt_ifContext | undefined;
    stmt_case(): Stmt_caseContext | undefined;
    stmt_loop(): Stmt_loopContext | undefined;
    stmt_while(): Stmt_whileContext | undefined;
    stmt_for(): Stmt_forContext | undefined;
    stmt_foreach_a(): Stmt_foreach_aContext | undefined;
    stmt_exit(): Stmt_exitContext | undefined;
    stmt_assert(): Stmt_assertContext | undefined;
    stmt_execsql(): Stmt_execsqlContext | undefined;
    stmt_dynexecute(): Stmt_dynexecuteContext | undefined;
    stmt_perform(): Stmt_performContext | undefined;
    stmt_call(): Stmt_callContext | undefined;
    stmt_getdiag(): Stmt_getdiagContext | undefined;
    stmt_open(): Stmt_openContext | undefined;
    stmt_fetch(): Stmt_fetchContext | undefined;
    stmt_move(): Stmt_moveContext | undefined;
    stmt_close(): Stmt_closeContext | undefined;
    stmt_null(): Stmt_nullContext | undefined;
    stmt_commit(): Stmt_commitContext | undefined;
    stmt_rollback(): Stmt_rollbackContext | undefined;
    stmt_set(): Stmt_setContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_performContext extends ParserRuleContext {
    PERFORM(): TerminalNode;
    expr_until_semi(): Expr_until_semiContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_callContext extends ParserRuleContext {
    CALL(): TerminalNode | undefined;
    any_identifier(): Any_identifierContext;
    OPEN_PAREN(): TerminalNode;
    opt_expr_list(): Opt_expr_listContext;
    CLOSE_PAREN(): TerminalNode;
    SEMI(): TerminalNode;
    DO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_expr_listContext extends ParserRuleContext {
    expr_list(): Expr_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_assignContext extends ParserRuleContext {
    assign_var(): Assign_varContext;
    assign_operator(): Assign_operatorContext;
    sql_expression(): Sql_expressionContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_getdiagContext extends ParserRuleContext {
    GET(): TerminalNode;
    getdiag_area_opt(): Getdiag_area_optContext;
    DIAGNOSTICS(): TerminalNode;
    getdiag_list(): Getdiag_listContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Getdiag_area_optContext extends ParserRuleContext {
    CURRENT_P(): TerminalNode | undefined;
    STACKED(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Getdiag_listContext extends ParserRuleContext {
    getdiag_list_item(): Getdiag_list_itemContext[];
    getdiag_list_item(i: number): Getdiag_list_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Getdiag_list_itemContext extends ParserRuleContext {
    getdiag_target(): Getdiag_targetContext;
    assign_operator(): Assign_operatorContext;
    getdiag_item(): Getdiag_itemContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Getdiag_itemContext extends ParserRuleContext {
    colid(): ColidContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Getdiag_targetContext extends ParserRuleContext {
    assign_var(): Assign_varContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Assign_varContext extends ParserRuleContext {
    any_name(): Any_nameContext | undefined;
    PARAM(): TerminalNode | undefined;
    OPEN_BRACKET(): TerminalNode[];
    OPEN_BRACKET(i: number): TerminalNode;
    expr_until_rightbracket(): Expr_until_rightbracketContext[];
    expr_until_rightbracket(i: number): Expr_until_rightbracketContext;
    CLOSE_BRACKET(): TerminalNode[];
    CLOSE_BRACKET(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_ifContext extends ParserRuleContext {
    IF_P(): TerminalNode[];
    IF_P(i: number): TerminalNode;
    expr_until_then(): Expr_until_thenContext;
    THEN(): TerminalNode;
    proc_sect(): Proc_sectContext;
    stmt_elsifs(): Stmt_elsifsContext;
    stmt_else(): Stmt_elseContext;
    END_P(): TerminalNode;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_elsifsContext extends ParserRuleContext {
    ELSIF(): TerminalNode[];
    ELSIF(i: number): TerminalNode;
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    THEN(): TerminalNode[];
    THEN(i: number): TerminalNode;
    proc_sect(): Proc_sectContext[];
    proc_sect(i: number): Proc_sectContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_elseContext extends ParserRuleContext {
    ELSE(): TerminalNode | undefined;
    proc_sect(): Proc_sectContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_caseContext extends ParserRuleContext {
    CASE(): TerminalNode[];
    CASE(i: number): TerminalNode;
    opt_expr_until_when(): Opt_expr_until_whenContext;
    case_when_list(): Case_when_listContext;
    opt_case_else(): Opt_case_elseContext;
    END_P(): TerminalNode;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_expr_until_whenContext extends ParserRuleContext {
    sql_expression(): Sql_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Case_when_listContext extends ParserRuleContext {
    case_when(): Case_whenContext[];
    case_when(i: number): Case_whenContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Case_whenContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    expr_list(): Expr_listContext;
    THEN(): TerminalNode;
    proc_sect(): Proc_sectContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_case_elseContext extends ParserRuleContext {
    ELSE(): TerminalNode | undefined;
    proc_sect(): Proc_sectContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_loopContext extends ParserRuleContext {
    opt_loop_label(): Opt_loop_labelContext;
    loop_body(): Loop_bodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_whileContext extends ParserRuleContext {
    opt_loop_label(): Opt_loop_labelContext;
    WHILE(): TerminalNode;
    expr_until_loop(): Expr_until_loopContext;
    loop_body(): Loop_bodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_forContext extends ParserRuleContext {
    opt_loop_label(): Opt_loop_labelContext;
    FOR(): TerminalNode;
    for_control(): For_controlContext;
    loop_body(): Loop_bodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class For_controlContext extends ParserRuleContext {
    for_variable(): For_variableContext;
    IN_P(): TerminalNode;
    cursor_name(): Cursor_nameContext | undefined;
    opt_cursor_parameters(): Opt_cursor_parametersContext | undefined;
    selectstmt(): SelectstmtContext | undefined;
    explainstmt(): ExplainstmtContext | undefined;
    EXECUTE(): TerminalNode | undefined;
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    opt_for_using_expression(): Opt_for_using_expressionContext | undefined;
    opt_reverse(): Opt_reverseContext | undefined;
    DOT_DOT(): TerminalNode | undefined;
    opt_by_expression(): Opt_by_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_for_using_expressionContext extends ParserRuleContext {
    USING(): TerminalNode | undefined;
    expr_list(): Expr_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_cursor_parametersContext extends ParserRuleContext {
    OPEN_PAREN(): TerminalNode | undefined;
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    CLOSE_PAREN(): TerminalNode | undefined;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_reverseContext extends ParserRuleContext {
    REVERSE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_by_expressionContext extends ParserRuleContext {
    BY(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class For_variableContext extends ParserRuleContext {
    any_name_list(): Any_name_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_foreach_aContext extends ParserRuleContext {
    opt_loop_label(): Opt_loop_labelContext;
    FOREACH(): TerminalNode;
    for_variable(): For_variableContext;
    foreach_slice(): Foreach_sliceContext;
    IN_P(): TerminalNode;
    ARRAY(): TerminalNode;
    a_expr(): A_exprContext;
    loop_body(): Loop_bodyContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Foreach_sliceContext extends ParserRuleContext {
    SLICE(): TerminalNode | undefined;
    iconst(): IconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_exitContext extends ParserRuleContext {
    exit_type(): Exit_typeContext;
    opt_label(): Opt_labelContext;
    SEMI(): TerminalNode;
    opt_exitcond(): Opt_exitcondContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Exit_typeContext extends ParserRuleContext {
    EXIT(): TerminalNode | undefined;
    CONTINUE_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_returnContext extends ParserRuleContext {
    RETURN(): TerminalNode;
    SEMI(): TerminalNode;
    NEXT(): TerminalNode | undefined;
    sql_expression(): Sql_expressionContext | undefined;
    QUERY(): TerminalNode | undefined;
    opt_return_result(): Opt_return_resultContext | undefined;
    EXECUTE(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    opt_for_using_expression(): Opt_for_using_expressionContext | undefined;
    selectstmt(): SelectstmtContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_return_resultContext extends ParserRuleContext {
    sql_expression(): Sql_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_raiseContext extends ParserRuleContext {
    RAISE(): TerminalNode;
    sconst(): SconstContext | undefined;
    opt_raise_list(): Opt_raise_listContext | undefined;
    opt_raise_using(): Opt_raise_usingContext | undefined;
    SEMI(): TerminalNode | undefined;
    opt_stmt_raise_level(): Opt_stmt_raise_levelContext | undefined;
    identifier(): IdentifierContext | undefined;
    SQLSTATE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_stmt_raise_levelContext extends ParserRuleContext {
    DEBUG(): TerminalNode | undefined;
    LOG(): TerminalNode | undefined;
    INFO(): TerminalNode | undefined;
    NOTICE(): TerminalNode | undefined;
    WARNING(): TerminalNode | undefined;
    EXCEPTION(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_raise_listContext extends ParserRuleContext {
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_raise_usingContext extends ParserRuleContext {
    USING(): TerminalNode | undefined;
    opt_raise_using_elem_list(): Opt_raise_using_elem_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_raise_using_elemContext extends ParserRuleContext {
    identifier(): IdentifierContext;
    EQUAL(): TerminalNode;
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_raise_using_elem_listContext extends ParserRuleContext {
    opt_raise_using_elem(): Opt_raise_using_elemContext[];
    opt_raise_using_elem(i: number): Opt_raise_using_elemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_assertContext extends ParserRuleContext {
    ASSERT(): TerminalNode;
    sql_expression(): Sql_expressionContext;
    opt_stmt_assert_message(): Opt_stmt_assert_messageContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_stmt_assert_messageContext extends ParserRuleContext {
    COMMA(): TerminalNode | undefined;
    sql_expression(): Sql_expressionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Loop_bodyContext extends ParserRuleContext {
    LOOP(): TerminalNode[];
    LOOP(i: number): TerminalNode;
    proc_sect(): Proc_sectContext;
    END_P(): TerminalNode;
    opt_label(): Opt_labelContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_execsqlContext extends ParserRuleContext {
    make_execsql_stmt(): Make_execsql_stmtContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_dynexecuteContext extends ParserRuleContext {
    EXECUTE(): TerminalNode;
    a_expr(): A_exprContext;
    SEMI(): TerminalNode;
    opt_execute_into(): Opt_execute_intoContext | undefined;
    opt_execute_using(): Opt_execute_usingContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_execute_usingContext extends ParserRuleContext {
    USING(): TerminalNode | undefined;
    opt_execute_using_list(): Opt_execute_using_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_execute_using_listContext extends ParserRuleContext {
    a_expr(): A_exprContext[];
    a_expr(i: number): A_exprContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_execute_intoContext extends ParserRuleContext {
    INTO(): TerminalNode | undefined;
    into_target(): Into_targetContext | undefined;
    STRICT_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_openContext extends ParserRuleContext {
    OPEN(): TerminalNode;
    SEMI(): TerminalNode;
    cursor_variable(): Cursor_variableContext | undefined;
    opt_scroll_option(): Opt_scroll_optionContext | undefined;
    FOR(): TerminalNode | undefined;
    colid(): ColidContext | undefined;
    selectstmt(): SelectstmtContext | undefined;
    EXECUTE(): TerminalNode | undefined;
    sql_expression(): Sql_expressionContext | undefined;
    opt_open_using(): Opt_open_usingContext | undefined;
    OPEN_PAREN(): TerminalNode | undefined;
    opt_open_bound_list(): Opt_open_bound_listContext | undefined;
    CLOSE_PAREN(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_open_bound_list_itemContext extends ParserRuleContext {
    colid(): ColidContext | undefined;
    COLON_EQUALS(): TerminalNode | undefined;
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_open_bound_listContext extends ParserRuleContext {
    opt_open_bound_list_item(): Opt_open_bound_list_itemContext[];
    opt_open_bound_list_item(i: number): Opt_open_bound_list_itemContext;
    COMMA(): TerminalNode[];
    COMMA(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_open_usingContext extends ParserRuleContext {
    USING(): TerminalNode | undefined;
    expr_list(): Expr_listContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_scroll_optionContext extends ParserRuleContext {
    opt_scroll_option_no(): Opt_scroll_option_noContext | undefined;
    SCROLL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_scroll_option_noContext extends ParserRuleContext {
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_fetchContext extends ParserRuleContext {
    _direction: Opt_fetch_directionContext;
    FETCH(): TerminalNode;
    opt_cursor_from(): Opt_cursor_fromContext;
    cursor_variable(): Cursor_variableContext;
    INTO(): TerminalNode;
    into_target(): Into_targetContext;
    SEMI(): TerminalNode;
    opt_fetch_direction(): Opt_fetch_directionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Into_targetContext extends ParserRuleContext {
    expr_list(): Expr_listContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_cursor_fromContext extends ParserRuleContext {
    FROM(): TerminalNode | undefined;
    IN_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_fetch_directionContext extends ParserRuleContext {
    NEXT(): TerminalNode | undefined;
    PRIOR(): TerminalNode | undefined;
    FIRST_P(): TerminalNode | undefined;
    LAST_P(): TerminalNode | undefined;
    ABSOLUTE_P(): TerminalNode | undefined;
    a_expr(): A_exprContext | undefined;
    RELATIVE_P(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    FORWARD(): TerminalNode | undefined;
    BACKWARD(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_moveContext extends ParserRuleContext {
    MOVE(): TerminalNode;
    cursor_variable(): Cursor_variableContext;
    SEMI(): TerminalNode;
    opt_fetch_direction(): Opt_fetch_directionContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_closeContext extends ParserRuleContext {
    CLOSE(): TerminalNode;
    cursor_variable(): Cursor_variableContext;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_nullContext extends ParserRuleContext {
    NULL_P(): TerminalNode;
    SEMI(): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_commitContext extends ParserRuleContext {
    COMMIT(): TerminalNode;
    SEMI(): TerminalNode;
    plsql_opt_transaction_chain(): Plsql_opt_transaction_chainContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_rollbackContext extends ParserRuleContext {
    ROLLBACK(): TerminalNode;
    SEMI(): TerminalNode;
    plsql_opt_transaction_chain(): Plsql_opt_transaction_chainContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Plsql_opt_transaction_chainContext extends ParserRuleContext {
    AND(): TerminalNode;
    CHAIN(): TerminalNode;
    NO(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Stmt_setContext extends ParserRuleContext {
    SET(): TerminalNode | undefined;
    any_name(): Any_nameContext | undefined;
    TO(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    SEMI(): TerminalNode;
    RESET(): TerminalNode | undefined;
    ALL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Cursor_variableContext extends ParserRuleContext {
    colid(): ColidContext | undefined;
    PARAM(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Exception_sectContext extends ParserRuleContext {
    EXCEPTION(): TerminalNode | undefined;
    proc_exceptions(): Proc_exceptionsContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Proc_exceptionsContext extends ParserRuleContext {
    proc_exception(): Proc_exceptionContext[];
    proc_exception(i: number): Proc_exceptionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Proc_exceptionContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    proc_conditions(): Proc_conditionsContext;
    THEN(): TerminalNode;
    proc_sect(): Proc_sectContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Proc_conditionsContext extends ParserRuleContext {
    proc_condition(): Proc_conditionContext[];
    proc_condition(i: number): Proc_conditionContext;
    OR(): TerminalNode[];
    OR(i: number): TerminalNode;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Proc_conditionContext extends ParserRuleContext {
    any_identifier(): Any_identifierContext | undefined;
    SQLSTATE(): TerminalNode | undefined;
    sconst(): SconstContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_block_labelContext extends ParserRuleContext {
    label_decl(): Label_declContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_loop_labelContext extends ParserRuleContext {
    label_decl(): Label_declContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_labelContext extends ParserRuleContext {
    any_identifier(): Any_identifierContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_exitcondContext extends ParserRuleContext {
    WHEN(): TerminalNode;
    expr_until_semi(): Expr_until_semiContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Any_identifierContext extends ParserRuleContext {
    colid(): ColidContext | undefined;
    plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Plsql_unreserved_keywordContext extends ParserRuleContext {
    ABSOLUTE_P(): TerminalNode | undefined;
    ALIAS(): TerminalNode | undefined;
    AND(): TerminalNode | undefined;
    ARRAY(): TerminalNode | undefined;
    ASSERT(): TerminalNode | undefined;
    BACKWARD(): TerminalNode | undefined;
    CALL(): TerminalNode | undefined;
    CHAIN(): TerminalNode | undefined;
    CLOSE(): TerminalNode | undefined;
    COLLATE(): TerminalNode | undefined;
    COLUMN(): TerminalNode | undefined;
    COMMIT(): TerminalNode | undefined;
    CONSTANT(): TerminalNode | undefined;
    CONSTRAINT(): TerminalNode | undefined;
    CONTINUE_P(): TerminalNode | undefined;
    CURRENT_P(): TerminalNode | undefined;
    CURSOR(): TerminalNode | undefined;
    DEBUG(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    DIAGNOSTICS(): TerminalNode | undefined;
    DO(): TerminalNode | undefined;
    DUMP(): TerminalNode | undefined;
    ELSIF(): TerminalNode | undefined;
    ERROR(): TerminalNode | undefined;
    EXCEPTION(): TerminalNode | undefined;
    EXIT(): TerminalNode | undefined;
    FETCH(): TerminalNode | undefined;
    FIRST_P(): TerminalNode | undefined;
    FORWARD(): TerminalNode | undefined;
    GET(): TerminalNode | undefined;
    INFO(): TerminalNode | undefined;
    INSERT(): TerminalNode | undefined;
    IS(): TerminalNode | undefined;
    LAST_P(): TerminalNode | undefined;
    LOG(): TerminalNode | undefined;
    MOVE(): TerminalNode | undefined;
    NEXT(): TerminalNode | undefined;
    NO(): TerminalNode | undefined;
    NOTICE(): TerminalNode | undefined;
    OPEN(): TerminalNode | undefined;
    OPTION(): TerminalNode | undefined;
    PERFORM(): TerminalNode | undefined;
    PRINT_STRICT_PARAMS(): TerminalNode | undefined;
    PRIOR(): TerminalNode | undefined;
    QUERY(): TerminalNode | undefined;
    RAISE(): TerminalNode | undefined;
    RELATIVE_P(): TerminalNode | undefined;
    RESET(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    REVERSE(): TerminalNode | undefined;
    ROLLBACK(): TerminalNode | undefined;
    ROWTYPE(): TerminalNode | undefined;
    SCHEMA(): TerminalNode | undefined;
    SCROLL(): TerminalNode | undefined;
    SET(): TerminalNode | undefined;
    SLICE(): TerminalNode | undefined;
    SQLSTATE(): TerminalNode | undefined;
    STACKED(): TerminalNode | undefined;
    TABLE(): TerminalNode | undefined;
    TYPE_P(): TerminalNode | undefined;
    USE_COLUMN(): TerminalNode | undefined;
    USE_VARIABLE(): TerminalNode | undefined;
    VARIABLE_CONFLICT(): TerminalNode | undefined;
    WARNING(): TerminalNode | undefined;
    OUTER_P(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Sql_expressionContext extends ParserRuleContext {
    opt_target_list(): Opt_target_listContext | undefined;
    into_clause(): Into_clauseContext | undefined;
    from_clause(): From_clauseContext | undefined;
    where_clause(): Where_clauseContext | undefined;
    group_clause(): Group_clauseContext | undefined;
    having_clause(): Having_clauseContext | undefined;
    window_clause(): Window_clauseContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Expr_until_thenContext extends ParserRuleContext {
    sql_expression(): Sql_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Expr_until_semiContext extends ParserRuleContext {
    sql_expression(): Sql_expressionContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Expr_until_rightbracketContext extends ParserRuleContext {
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Expr_until_loopContext extends ParserRuleContext {
    a_expr(): A_exprContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Make_execsql_stmtContext extends ParserRuleContext {
    stmt(): StmtContext;
    opt_returning_clause_into(): Opt_returning_clause_intoContext | undefined;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
export declare class Opt_returning_clause_intoContext extends ParserRuleContext {
    INTO(): TerminalNode;
    opt_strict(): Opt_strictContext;
    into_target(): Into_targetContext;
    constructor(parent: ParserRuleContext | undefined, invokingState: number);
    get ruleIndex(): number;
    enterRule(listener: PostgreSQLParserListener): void;
    exitRule(listener: PostgreSQLParserListener): void;
    accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result;
}
