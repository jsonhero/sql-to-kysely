import { Token, Recognizer, ANTLRErrorListener, RecognitionException } from 'antlr4ts';
import { ATNSimulator } from 'antlr4ts/atn/ATNSimulator';
/**
 * Converted from {@link SyntaxError}.
 */
export interface ParseError {
    startLine: number;
    endLine: number;
    startCol: number;
    endCol: number;
    message: string;
}
/**
 * The type of error resulting from lexical parsing and parsing.
 */
export interface SyntaxError<T> {
    recognizer: Recognizer<T, ATNSimulator>;
    offendingSymbol: Token;
    line: number;
    charPositionInLine: number;
    msg: string;
    e: RecognitionException;
}
/**
 * ErrorHandler will be invoked when it encounters a parsing error.
 * Includes lexical errors and parsing errors.
 */
export type ErrorHandler<T> = (parseError: ParseError, originalError: SyntaxError<T>) => void;
export default class ParseErrorListener implements ANTLRErrorListener<Token> {
    private _errorHandler;
    constructor(errorListener: ErrorHandler<Token>);
    syntaxError(recognizer: Recognizer<Token, ATNSimulator>, offendingSymbol: any, line: number, charPositionInLine: number, msg: string, e: RecognitionException): void;
}
